
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011cc4 memsz 0x00011cc4 flags r-x
    LOAD off    0x00012ce4 vaddr 0x10011ce4 paddr 0x100137d0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000152bc vaddr 0x100152bc paddr 0x100152bc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000110b0  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  1001126c  1001126c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10011ce4  100137d0  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  100152bc  100152bc  000152bc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000147d0  2**0
                  CONTENTS
  7 .sdram        00000000  1001541c  1001541c  000147d0  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  000147d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d28  00000000  00000000  00014810  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000235d0  00000000  00000000  00015538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008efe  00000000  00000000  00038b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b18d  00000000  00000000  00041a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022d8  00000000  00000000  0004cb94  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000339b  00000000  00000000  0004ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001704e  00000000  00000000  00052207  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00069258  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001338  00000000  00000000  00069298  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d947  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d94a  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d956  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d957  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d958  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d95c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d960  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d964  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d96f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d97a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006d985  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  0006d990  2**0
                  CONTENTS, READONLY
 30 .jdi          00004442  00000000  00000000  0006d9c0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006d570  00000000  00000000  00071e02  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1001126c l    d  .rodata	00000000 .rodata
10011ce4 l    d  .rwdata	00000000 .rwdata
100152bc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001541c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100152bc l     O .bss	00000002 ctl_reg.3290
100152be l     O .bss	00000002 no_device.3291
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011a2a l     O .rodata	00000010 zeroes.4155
10011a3a l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004620 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100060f8 l     F .text	00000008 __fp_lock
10006100 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011ce4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012128 l     O .rwdata	00000020 lc_ctype_charset
10012108 l     O .rwdata	00000020 lc_message_charset
10012148 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10011a6c l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000957c l     F .text	000000fc __sprint_r.part.0
10011ba0 l     O .rodata	00000010 blanks.4099
10011b90 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000c1a4 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000ea64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000eb84 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000ebb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000ecb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000edac l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000ee90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f070 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100137c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000f318 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f45c l     F .text	00000038 alt_dev_reg
10012730 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000f734 l     F .text	000001fc altera_avalon_jtag_uart_irq
1000f930 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100101f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010684 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100107dc l     F .text	00000050 alt_get_errno
1001082c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10008bf8 g     F .text	00000074 _mprec_log10
10008ce4 g     F .text	00000088 __any_on
1000b044 g     F .text	00000064 _isatty_r
10011a78 g     O .rodata	00000028 __mprec_tinytens
1000efb8 g     F .text	00000078 alt_main
10002218 g     F .text	000000b8 _puts_r
1001531c g     O .bss	00000100 alt_irq
1000b0a8 g     F .text	0000006c _lseek_r
100137d0 g       *ABS*	00000000 __flash_rwdata_start
1000d4f8 g     F .text	00000084 .hidden __eqdf2
1001541c g       *ABS*	00000000 __alt_heap_start
100021dc g     F .text	0000003c printf
1000b31c g     F .text	0000009c _wcrtomb_r
10009474 g     F .text	0000005c __sseek
100061a4 g     F .text	0000019c __sinit
1000b180 g     F .text	00000180 __swbuf_r
10006eb4 g     F .text	00000070 _setlocale_r
10006114 g     F .text	00000078 __sfmoreglue
1000f050 g     F .text	00000020 __malloc_unlock
100020b4 g     F .text	00000080 UsbGetRetryCnt
10007af4 g     F .text	0000013c memmove
100001f8 g     F .text	00000050 IO_init
1000618c g     F .text	00000018 _cleanup
10007d44 g     F .text	000000a8 _Balloc
1000d57c g     F .text	000000d8 .hidden __gtdf2
10010c18 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000afdc g     F .text	00000068 _fstat_r
100152d8 g     O .bss	00000004 errno
100093f0 g     F .text	00000008 __seofread
100152e0 g     O .bss	00000004 alt_argv
1001b790 g       *ABS*	00000000 _gp
1000f2e8 g     F .text	00000030 usleep
100125b0 g     O .rwdata	00000180 alt_fd_list
10010c38 g     F .text	00000090 alt_find_dev
100079e8 g     F .text	0000010c memcpy
10006108 g     F .text	0000000c _cleanup_r
1000e848 g     F .text	000000d0 .hidden __floatsidf
10010764 g     F .text	00000078 alt_io_redirect
1000d654 g     F .text	000000ec .hidden __ltdf2
1001126c g       *ABS*	00000000 __DTOR_END__
100022d0 g     F .text	00000014 puts
100092d0 g     F .text	00000068 __fpclassifyd
10008b58 g     F .text	000000a0 __ratio
1000aad8 g     F .text	00000024 __vfiprintf_internal
1000fb28 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
100021b0 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c2a8 g     F .text	00000008 .hidden __udivsi3
1000ed04 g     F .text	000000a8 isatty
10011ac8 g     O .rodata	000000c8 __mprec_tens
10006f24 g     F .text	0000000c __locale_charset
100152d4 g     O .bss	00000004 __malloc_top_pad
10001754 g     F .text	00000264 UsbGetConfigDesc2
10013798 g     O .rwdata	00000004 __mb_cur_max
10006f54 g     F .text	0000000c _localeconv_r
10008174 g     F .text	0000003c __i2b
100068a8 g     F .text	000004ac __sfvwrite_r
10009338 g     F .text	00000064 _sbrk_r
1000b114 g     F .text	0000006c _read_r
100137b8 g     O .rwdata	00000004 alt_max_fd
1000aca4 g     F .text	00000128 _fclose_r
100060c8 g     F .text	00000030 fflush
100152d0 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c2e0 g     F .text	0000087c .hidden __adddf3
10008924 g     F .text	000000f0 __b2d
1000bb70 g     F .text	00000634 .hidden __umoddi3
1000eee0 g     F .text	000000d8 lseek
10013790 g     O .rwdata	00000004 _global_impure_ptr
10008d6c g     F .text	00000564 _realloc_r
1001541c g       *ABS*	00000000 __bss_end
10010594 g     F .text	000000f0 alt_iic_isr_register
10010b14 g     F .text	00000104 alt_tick
1000b51c g     F .text	00000654 .hidden __udivdi3
1000ade0 g     F .text	00000184 _fputwc_r
10011aa0 g     O .rodata	00000028 __mprec_bigtens
10007f58 g     F .text	00000104 __s2b
1000e918 g     F .text	000000a0 .hidden __floatunsidf
100086b4 g     F .text	00000060 __mcmp
100011b4 g     F .text	000000fc UsbSetAddress
1000646c g     F .text	00000018 __fp_lock_all
10010548 g     F .text	0000004c alt_ic_irq_enabled
10010a7c g     F .text	00000098 alt_alarm_stop
100152e8 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10012588 g     O .rwdata	00000028 alt_dev_null
100101dc g     F .text	0000001c alt_dcache_flush_all
1000805c g     F .text	00000068 __hi0bits
100002b4 g     F .text	00000068 IO_read
1000e7c8 g     F .text	00000080 .hidden __fixdfsi
100137d0 g       *ABS*	00000000 __ram_rwdata_end
100137b0 g     O .rwdata	00000008 alt_dev_list
1000f368 g     F .text	000000f4 write
10011ce4 g       *ABS*	00000000 __ram_rodata_end
1000ec00 g     F .text	000000b4 fstat
1000d654 g     F .text	000000ec .hidden __ledf2
10002134 g     F .text	0000007c UsbPrintMem
1000841c g     F .text	00000148 __pow5mult
10009690 g     F .text	00001448 ___vfiprintf_internal_r
100152c8 g     O .bss	00000004 __nlocale_changed
1000c2b0 g     F .text	00000008 .hidden __umodsi3
1001541c g       *ABS*	00000000 end
1000f674 g     F .text	000000c0 altera_avalon_jtag_uart_init
1001126c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000e9b8 g     F .text	000000ac .hidden __clzsi2
1000fd30 g     F .text	00000218 altera_avalon_jtag_uart_write
1000645c g     F .text	00000004 __sfp_lock_acquire
10007900 g     F .text	000000e8 memchr
10002370 g     F .text	00002154 ___vfprintf_internal_r
10001ab4 g     F .text	000000fc UsbClassRequest
100065d8 g     F .text	000002d0 _free_r
10006f30 g     F .text	00000010 __locale_mb_cur_max
10011094 g     F .text	000001a4 __call_exitprocs
100152c4 g     O .bss	00000004 __mlocale_changed
1001379c g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
100152ec g     O .bss	00000004 _alt_tick_rate
10008564 g     F .text	00000150 __lshift
100152f0 g     O .bss	00000004 _alt_nticks
1000f0c0 g     F .text	000000f8 read
1000f4c8 g     F .text	00000048 alt_sys_init
10010f78 g     F .text	0000011c __register_exitproc
100081b0 g     F .text	0000026c __multiply
1000f9d4 g     F .text	00000068 altera_avalon_jtag_uart_close
1000c2b8 g     F .text	00000028 .hidden __mulsi3
10011ce4 g       *ABS*	00000000 __ram_rwdata_start
1001126c g       *ABS*	00000000 __ram_rodata_start
100152f4 g     O .bss	00000028 __malloc_current_mallinfo
10008a14 g     F .text	00000144 __d2b
100012b0 g     F .text	00000144 UsbGetDeviceDesc1
1000f510 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010ddc g     F .text	000000d4 alt_get_fd
10010088 g     F .text	00000154 alt_busy_sleep
1000ab68 g     F .text	00000064 _close_r
10010efc g     F .text	0000007c memcmp
1000f5d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001541c g       *ABS*	00000000 __alt_stack_base
1000f620 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100044e8 g     F .text	00000138 __swsetup_r
1000cb5c g     F .text	0000099c .hidden __divdf3
10006340 g     F .text	0000011c __sfp
10008c6c g     F .text	00000078 __copybits
10012180 g     O .rwdata	00000408 __malloc_av_
10006468 g     F .text	00000004 __sinit_lock_release
1000d740 g     F .text	00000800 .hidden __muldf3
1000939c g     F .text	00000054 __sread
10002030 g     F .text	00000084 UsbWaitTDListDone
10010cc8 g     F .text	00000114 alt_find_file
10010248 g     F .text	000000a0 alt_dev_llist_insert
1000f030 g     F .text	00000020 __malloc_lock
1000f238 g     F .text	000000b0 sbrk
10005e84 g     F .text	00000244 _fflush_r
1000abcc g     F .text	000000d8 _calloc_r
100152bc g       *ABS*	00000000 __bss_start
10007c30 g     F .text	00000114 memset
1000031c g     F .text	00000d50 main
100152e4 g     O .bss	00000004 alt_envp
100152cc g     O .bss	00000004 __malloc_max_total_mem
1000f570 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100019b8 g     F .text	000000fc UsbSetConfig
1000b300 g     F .text	0000001c __swbuf
100094d0 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000adcc g     F .text	00000014 fclose
10004848 g     F .text	0000163c _dtoa_r
1000713c g     F .text	000007c4 _malloc_r
1000b490 g     F .text	00000030 __ascii_wctomb
100137bc g     O .rwdata	00000004 alt_errno
10006d54 g     F .text	000000a8 _fwalk
1000c214 g     F .text	00000048 .hidden __divsi3
1000649c g     F .text	0000013c _malloc_trim_r
10001bb0 g     F .text	00000144 UsbGetHidDesc
1001126c g       *ABS*	00000000 __CTOR_END__
100094d8 g     F .text	000000a4 strcmp
1001126c g       *ABS*	00000000 __flash_rodata_start
1001126c g       *ABS*	00000000 __DTOR_LIST__
1000d4f8 g     F .text	00000084 .hidden __nedf2
100010c0 g     F .text	00000044 UsbRead
1000f494 g     F .text	00000034 alt_irq_init
1000f1b8 g     F .text	00000080 alt_release_fd
10011bb0 g     O .rodata	00000100 .hidden __clz_tab
100152c0 g     O .bss	00000004 _PathLocale
10010eb0 g     F .text	00000014 atexit
1000aafc g     F .text	0000006c _write_r
10006f60 g     F .text	0000001c setlocale
10013794 g     O .rwdata	00000004 _impure_ptr
100152dc g     O .bss	00000004 alt_argc
10010344 g     F .text	0000005c _do_dtors
10006f4c g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
100088c4 g     F .text	00000060 __ulp
10006484 g     F .text	00000018 __fp_unlock_all
100137a8 g     O .rwdata	00000008 alt_fs_list
10001cf4 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10006f7c g     F .text	0000000c localeconv
100103bc g     F .text	00000050 alt_ic_isr_register
100137d0 g       *ABS*	00000000 _edata
1001541c g       *ABS*	00000000 _end
1000106c g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000fa3c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100104a8 g     F .text	000000a0 alt_ic_irq_disable
100093f8 g     F .text	0000007c __swrite
100137a0 g     O .rwdata	00000004 __malloc_trim_threshold
10006f40 g     F .text	0000000c __locale_msgcharset
10010ec4 g     F .text	00000038 exit
10006dfc g     F .text	000000b8 _fwalk_reent
10008714 g     F .text	000001b0 __mdiff
1000c25c g     F .text	0000004c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006460 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	0000006c IO_write
10011238 g     F .text	00000034 _exit
1000ff48 g     F .text	00000140 alt_alarm_start
10006f88 g     F .text	000001b4 __smakebuf_r
100022e4 g     F .text	0000008c strlen
10010920 g     F .text	0000015c open
1000d57c g     F .text	000000d8 .hidden __gedf2
100137a4 g     O .rwdata	00000004 __wctomb
10009678 g     F .text	00000018 __sprint_r
100103a0 g     F .text	0000001c alt_icache_flush_all
100137c4 g     O .rwdata	00000004 alt_priority_mask
1001040c g     F .text	0000009c alt_ic_irq_enable
100044c4 g     F .text	00000024 __vfprintf_internal
1000b4c0 g     F .text	0000005c _wctomb_r
1000df40 g     F .text	00000888 .hidden __subdf3
100080c4 g     F .text	000000b0 __lo0bits
100015c8 g     F .text	0000018c UsbGetConfigDesc1
100137c8 g     O .rwdata	00000008 alt_alarm_list
100102e8 g     F .text	0000005c _do_ctors
10001104 g     F .text	000000b0 UsbSoftReset
1000b3b8 g     F .text	000000d8 wcrtomb
1000eab4 g     F .text	000000d0 close
100013f4 g     F .text	000001d4 UsbGetDeviceDesc2
1000ee10 g     F .text	00000080 alt_load
1000af64 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
10006464 g     F .text	00000004 __sinit_lock_acquire
10007e14 g     F .text	00000144 __multadd
10007dec g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001726 	beq	r2,zero,10000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00c40074 	movhi	r3,4097
10000130:	18d4c704 	addi	r3,r3,21276
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	100490fa 	slli	r2,r2,3
1000013c:	1885883a 	add	r2,r3,r2
10000140:	10800017 	ldw	r2,0(r2)
10000144:	01040074 	movhi	r4,4097
10000148:	2114c704 	addi	r4,r4,21276
1000014c:	e0fffd17 	ldw	r3,-12(fp)
10000150:	180690fa 	slli	r3,r3,3
10000154:	20c7883a 	add	r3,r4,r3
10000158:	18c00104 	addi	r3,r3,4
1000015c:	18c00017 	ldw	r3,0(r3)
10000160:	1809883a 	mov	r4,r3
10000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
10000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000017c:	e0bffb17 	ldw	r2,-20(fp)
10000180:	103fe31e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>
10000184:	00000706 	br	100001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000188:	e0bffc17 	ldw	r2,-16(fp)
1000018c:	1085883a 	add	r2,r2,r2
10000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000194:	e0bffd17 	ldw	r2,-12(fp)
10000198:	10800044 	addi	r2,r2,1
1000019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a0:	003fde06 	br	1000011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6ade414 	ori	gp,gp,46992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	1094af14 	ori	r2,r2,21180

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18d50714 	ori	r3,r3,21532

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000ee100 	call	1000ee10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000efb80 	call	1000efb8 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	00800c04 	movi	r2,48
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	00801804 	movi	r2,96
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	00801c04 	movi	r2,112
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	00801004 	movi	r2,64
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	00801404 	movi	r2,80
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	*otg_hpi_address = Address;
10000264:	00801004 	movi	r2,64
10000268:	e0fffe03 	ldbu	r3,-8(fp)
1000026c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000270:	00800c04 	movi	r2,48
10000274:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000278:	00801c04 	movi	r2,112
1000027c:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10000280:	00801404 	movi	r2,80
10000284:	e0ffff0b 	ldhu	r3,-4(fp)
10000288:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
1000028c:	00801c04 	movi	r2,112
10000290:	00c00044 	movi	r3,1
10000294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000298:	00800c04 	movi	r2,48
1000029c:	00c00044 	movi	r3,1
100002a0:	10c00005 	stb	r3,0(r2)

}
100002a4:	e037883a 	mov	sp,fp
100002a8:	df000017 	ldw	fp,0(sp)
100002ac:	dec00104 	addi	sp,sp,4
100002b0:	f800283a 	ret

100002b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002b4:	defffd04 	addi	sp,sp,-12
100002b8:	df000215 	stw	fp,8(sp)
100002bc:	df000204 	addi	fp,sp,8
100002c0:	2005883a 	mov	r2,r4
100002c4:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
100002c8:	00801004 	movi	r2,64
100002cc:	e0ffff03 	ldbu	r3,-4(fp)
100002d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100002d4:	00800c04 	movi	r2,48
100002d8:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002dc:	00801804 	movi	r2,96
100002e0:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100002e4:	00801404 	movi	r2,80
100002e8:	10800017 	ldw	r2,0(r2)
100002ec:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100002f0:	00801804 	movi	r2,96
100002f4:	00c00044 	movi	r3,1
100002f8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002fc:	00800c04 	movi	r2,48
10000300:	00c00044 	movi	r3,1
10000304:	10c00005 	stb	r3,0(r2)

	//printf("%x\n",temp);
	return temp;
10000308:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000030c:	e037883a 	mov	sp,fp
10000310:	df000017 	ldw	fp,0(sp)
10000314:	dec00104 	addi	sp,sp,4
10000318:	f800283a 	ret

1000031c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
1000031c:	defff904 	addi	sp,sp,-28
10000320:	dfc00615 	stw	ra,24(sp)
10000324:	df000515 	stw	fp,20(sp)
10000328:	df000504 	addi	fp,sp,20
	IO_init();
1000032c:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000330:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
10000334:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
10000338:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
1000033c:	01040074 	movhi	r4,4097
10000340:	21049b04 	addi	r4,r4,4716
10000344:	00022d00 	call	100022d0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000348:	00011040 	call	10001104 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000034c:	01005104 	movi	r4,324
10000350:	000b883a 	mov	r5,zero
10000354:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000358:	01302414 	movui	r4,49296
1000035c:	017fffd4 	movui	r5,65535
10000360:	000106c0 	call	1000106c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000364:	01006d04 	movi	r4,436
10000368:	01409604 	movi	r5,600
1000036c:	000106c0 	call	1000106c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000370:	00811004 	movi	r2,1088
10000374:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000378:	e0bffb0b 	ldhu	r2,-20(fp)
1000037c:	01005084 	movi	r4,322
10000380:	100b883a 	mov	r5,r2
10000384:	000106c0 	call	1000106c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000388:	00808404 	movi	r2,528
1000038c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000390:	e0bffe0b 	ldhu	r2,-8(fp)
10000394:	01302314 	movui	r4,49292
10000398:	100b883a 	mov	r5,r2
1000039c:	000106c0 	call	1000106c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003a0:	01007104 	movi	r4,452
100003a4:	000b883a 	mov	r5,zero
100003a8:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003ac:	01007184 	movi	r4,454
100003b0:	000b883a 	mov	r5,zero
100003b4:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003b8:	01007204 	movi	r4,456
100003bc:	000b883a 	mov	r5,zero
100003c0:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003c4:	01007284 	movi	r4,458
100003c8:	000b883a 	mov	r5,zero
100003cc:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003d0:	01007304 	movi	r4,460
100003d4:	000b883a 	mov	r5,zero
100003d8:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100003dc:	01007384 	movi	r4,462
100003e0:	000b883a 	mov	r5,zero
100003e4:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100003e8:	01007404 	movi	r4,464
100003ec:	000b883a 	mov	r5,zero
100003f0:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100003f4:	01007484 	movi	r4,466
100003f8:	000b883a 	mov	r5,zero
100003fc:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000400:	01007504 	movi	r4,468
10000404:	000b883a 	mov	r5,zero
10000408:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
1000040c:	01007584 	movi	r4,470
10000410:	000b883a 	mov	r5,zero
10000414:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000418:	01007604 	movi	r4,472
1000041c:	000b883a 	mov	r5,zero
10000420:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000424:	01007684 	movi	r4,474
10000428:	000b883a 	mov	r5,zero
1000042c:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000430:	01007704 	movi	r4,476
10000434:	000b883a 	mov	r5,zero
10000438:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000043c:	01007784 	movi	r4,478
10000440:	000b883a 	mov	r5,zero
10000444:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000448:	01007084 	movi	r4,450
1000044c:	01401c84 	movi	r5,114
10000450:	000106c0 	call	1000106c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000454:	01000044 	movi	r4,1
10000458:	01738054 	movui	r5,52737
1000045c:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000460:	0001883a 	nop
10000464:	010000c4 	movi	r4,3
10000468:	00002b40 	call	100002b4 <IO_read>
1000046c:	10bfffcc 	andi	r2,r2,65535
10000470:	103ffc26 	beq	r2,zero,10000464 <__alt_data_end+0xf8000464>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000474:	0001883a 	nop
10000478:	01000044 	movi	r4,1
1000047c:	00002b40 	call	100002b4 <IO_read>
10000480:	10bfffcc 	andi	r2,r2,65535
10000484:	1083fb58 	cmpnei	r2,r2,4077
10000488:	10000826 	beq	r2,zero,100004ac <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000048c:	01000044 	movi	r4,1
10000490:	00002b40 	call	100002b4 <IO_read>
10000494:	10bfffcc 	andi	r2,r2,65535
10000498:	01040074 	movhi	r4,4097
1000049c:	2104a104 	addi	r4,r4,4740
100004a0:	100b883a 	mov	r5,r2
100004a4:	00021dc0 	call	100021dc <printf>
		goto USB_HOT_PLUG;
100004a8:	003fa706 	br	10000348 <__alt_data_end+0xf8000348>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004ac:	01040074 	movhi	r4,4097
100004b0:	2104aa04 	addi	r4,r4,4776
100004b4:	00021dc0 	call	100021dc <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004b8:	01007084 	movi	r4,450
100004bc:	01401d04 	movi	r5,116
100004c0:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004c4:	01007104 	movi	r4,452
100004c8:	01400f04 	movi	r5,60
100004cc:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004d0:	01007184 	movi	r4,454
100004d4:	000b883a 	mov	r5,zero
100004d8:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100004dc:	01007204 	movi	r4,456
100004e0:	000b883a 	mov	r5,zero
100004e4:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100004e8:	01007284 	movi	r4,458
100004ec:	000b883a 	mov	r5,zero
100004f0:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100004f4:	01007304 	movi	r4,460
100004f8:	000b883a 	mov	r5,zero
100004fc:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000500:	01007384 	movi	r4,462
10000504:	000b883a 	mov	r5,zero
10000508:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000050c:	01007404 	movi	r4,464
10000510:	000b883a 	mov	r5,zero
10000514:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000518:	01007484 	movi	r4,466
1000051c:	000b883a 	mov	r5,zero
10000520:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000524:	01007504 	movi	r4,468
10000528:	000b883a 	mov	r5,zero
1000052c:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000530:	01007584 	movi	r4,470
10000534:	000b883a 	mov	r5,zero
10000538:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000053c:	01007604 	movi	r4,472
10000540:	000b883a 	mov	r5,zero
10000544:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000548:	01007684 	movi	r4,474
1000054c:	000b883a 	mov	r5,zero
10000550:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000554:	01007704 	movi	r4,476
10000558:	000b883a 	mov	r5,zero
1000055c:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000560:	01007784 	movi	r4,478
10000564:	000b883a 	mov	r5,zero
10000568:	000106c0 	call	1000106c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000056c:	01000044 	movi	r4,1
10000570:	01738054 	movui	r5,52737
10000574:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000578:	0001883a 	nop
1000057c:	01000044 	movi	r4,1
10000580:	00002b40 	call	100002b4 <IO_read>
10000584:	10bfffcc 	andi	r2,r2,65535
10000588:	1083fb58 	cmpnei	r2,r2,4077
1000058c:	10000826 	beq	r2,zero,100005b0 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000590:	01000044 	movi	r4,1
10000594:	00002b40 	call	100002b4 <IO_read>
10000598:	10bfffcc 	andi	r2,r2,65535
1000059c:	01040074 	movhi	r4,4097
100005a0:	2104a104 	addi	r4,r4,4740
100005a4:	100b883a 	mov	r5,r2
100005a8:	00021dc0 	call	100021dc <printf>
		goto USB_HOT_PLUG;
100005ac:	003f6606 	br	10000348 <__alt_data_end+0xf8000348>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005b0:	00b02284 	movi	r2,-16246
100005b4:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005b8:	008c0004 	movi	r2,12288
100005bc:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
100005c0:	00880004 	movi	r2,8192
100005c4:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005c8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100005cc:	10bfffcc 	andi	r2,r2,65535
100005d0:	1009883a 	mov	r4,r2
100005d4:	00010c00 	call	100010c0 <UsbRead>
100005d8:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
100005dc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100005e0:	e0fffb0b 	ldhu	r3,-20(fp)
100005e4:	1884703a 	and	r2,r3,r2
100005e8:	10bfffcc 	andi	r2,r2,65535
100005ec:	1000341e 	bne	r2,zero,100006c0 <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100005f0:	e03ffbc5 	stb	zero,-17(fp)
100005f4:	00001006 	br	10000638 <main+0x31c>
		{
			usleep(5*1000);
100005f8:	0104e204 	movi	r4,5000
100005fc:	000f2e80 	call	1000f2e8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000600:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000604:	10bfffcc 	andi	r2,r2,65535
10000608:	1009883a 	mov	r4,r2
1000060c:	00010c00 	call	100010c0 <UsbRead>
10000610:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
10000614:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000618:	e0fffb0b 	ldhu	r3,-20(fp)
1000061c:	1884703a 	and	r2,r3,r2
10000620:	10bfffcc 	andi	r2,r2,65535
10000624:	10000126 	beq	r2,zero,1000062c <main+0x310>
10000628:	00000606 	br	10000644 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
1000062c:	e0bffbc3 	ldbu	r2,-17(fp)
10000630:	10800044 	addi	r2,r2,1
10000634:	e0bffbc5 	stb	r2,-17(fp)
10000638:	e0bffbc3 	ldbu	r2,-17(fp)
1000063c:	10800170 	cmpltui	r2,r2,5
10000640:	103fed1e 	bne	r2,zero,100005f8 <__alt_data_end+0xf80005f8>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000644:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000648:	e0fffb0b 	ldhu	r3,-20(fp)
1000064c:	1884703a 	and	r2,r3,r2
10000650:	10bfffcc 	andi	r2,r2,65535
10000654:	1000261e 	bne	r2,zero,100006f0 <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000658:	01040074 	movhi	r4,4097
1000065c:	2104ae04 	addi	r4,r4,4792
10000660:	00022d00 	call	100022d0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000664:	01040074 	movhi	r4,4097
10000668:	2104b804 	addi	r4,r4,4832
1000066c:	00022d00 	call	100022d0 <puts>
			while (!(usb_ctl_val & no_device))
10000670:	00000d06 	br	100006a8 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000674:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000678:	10bfffcc 	andi	r2,r2,65535
1000067c:	1009883a 	mov	r4,r2
10000680:	00010c00 	call	100010c0 <UsbRead>
10000684:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10000688:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000068c:	e0fffb0b 	ldhu	r3,-20(fp)
10000690:	1884703a 	and	r2,r3,r2
10000694:	10bfffcc 	andi	r2,r2,65535
10000698:	10000126 	beq	r2,zero,100006a0 <main+0x384>
					goto USB_HOT_PLUG;
1000069c:	003f2a06 	br	10000348 <__alt_data_end+0xf8000348>

				usleep(2000);
100006a0:	0101f404 	movi	r4,2000
100006a4:	000f2e80 	call	1000f2e8 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006a8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006ac:	e0fffb0b 	ldhu	r3,-20(fp)
100006b0:	1884703a 	and	r2,r3,r2
100006b4:	10bfffcc 	andi	r2,r2,65535
100006b8:	103fee26 	beq	r2,zero,10000674 <__alt_data_end+0xf8000674>
100006bc:	00000c06 	br	100006f0 <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006c0:	e0fffb0b 	ldhu	r3,-20(fp)
100006c4:	e0bffc0b 	ldhu	r2,-16(fp)
100006c8:	1884703a 	and	r2,r3,r2
100006cc:	10bfffcc 	andi	r2,r2,65535
100006d0:	10000426 	beq	r2,zero,100006e4 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
100006d4:	01040074 	movhi	r4,4097
100006d8:	2104c404 	addi	r4,r4,4880
100006dc:	00022d00 	call	100022d0 <puts>
100006e0:	00000306 	br	100006f0 <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100006e4:	01040074 	movhi	r4,4097
100006e8:	2104cb04 	addi	r4,r4,4908
100006ec:	00022d00 	call	100022d0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100006f0:	00011b40 	call	100011b4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100006f4:	00000306 	br	10000704 <main+0x3e8>
	{
		UsbSetAddress();
100006f8:	00011b40 	call	100011b4 <UsbSetAddress>
		usleep(10*1000);
100006fc:	0109c404 	movi	r4,10000
10000700:	000f2e80 	call	1000f2e8 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000704:	010000c4 	movi	r4,3
10000708:	00002b40 	call	100002b4 <IO_read>
1000070c:	10bfffcc 	andi	r2,r2,65535
10000710:	1080040c 	andi	r2,r2,16
10000714:	103ff826 	beq	r2,zero,100006f8 <__alt_data_end+0xf80006f8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000718:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
1000071c:	01000084 	movi	r4,2
10000720:	01414184 	movi	r5,1286
10000724:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000728:	0009883a 	mov	r4,zero
1000072c:	00002b40 	call	100002b4 <IO_read>
10000730:	10bfffcc 	andi	r2,r2,65535
10000734:	01040074 	movhi	r4,4097
10000738:	2104d204 	addi	r4,r4,4936
1000073c:	100b883a 	mov	r5,r2
10000740:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000744:	01000084 	movi	r4,2
10000748:	01414204 	movi	r5,1288
1000074c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000750:	0009883a 	mov	r4,zero
10000754:	00002b40 	call	100002b4 <IO_read>
10000758:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
1000075c:	e0bffb0b 	ldhu	r2,-20(fp)
10000760:	01040074 	movhi	r4,4097
10000764:	2104dd04 	addi	r4,r4,4980
10000768:	100b883a 	mov	r5,r2
1000076c:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000770:	e0bffb0b 	ldhu	r2,-20(fp)
10000774:	108000e0 	cmpeqi	r2,r2,3
10000778:	1000031e 	bne	r2,zero,10000788 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000077c:	00020b40 	call	100020b4 <UsbGetRetryCnt>
10000780:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10000784:	003ef006 	br	10000348 <__alt_data_end+0xf8000348>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000788:	01040074 	movhi	r4,4097
1000078c:	2104e904 	addi	r4,r4,5028
10000790:	00022d00 	call	100022d0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000794:	00012b00 	call	100012b0 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000798:	00000306 	br	100007a8 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
1000079c:	00012b00 	call	100012b0 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007a0:	0109c404 	movi	r4,10000
100007a4:	000f2e80 	call	1000f2e8 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007a8:	010000c4 	movi	r4,3
100007ac:	00002b40 	call	100002b4 <IO_read>
100007b0:	10bfffcc 	andi	r2,r2,65535
100007b4:	1080040c 	andi	r2,r2,16
100007b8:	103ff826 	beq	r2,zero,1000079c <__alt_data_end+0xf800079c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007bc:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007c0:	01000084 	movi	r4,2
100007c4:	01414184 	movi	r5,1286
100007c8:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007cc:	0009883a 	mov	r4,zero
100007d0:	00002b40 	call	100002b4 <IO_read>
100007d4:	10bfffcc 	andi	r2,r2,65535
100007d8:	01040074 	movhi	r4,4097
100007dc:	2104f804 	addi	r4,r4,5088
100007e0:	100b883a 	mov	r5,r2
100007e4:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508);
100007e8:	01000084 	movi	r4,2
100007ec:	01414204 	movi	r5,1288
100007f0:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100007f4:	0009883a 	mov	r4,zero
100007f8:	00002b40 	call	100002b4 <IO_read>
100007fc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000800:	e0bffb0b 	ldhu	r2,-20(fp)
10000804:	01040074 	movhi	r4,4097
10000808:	21050304 	addi	r4,r4,5132
1000080c:	100b883a 	mov	r5,r2
10000810:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03)
10000814:	00000206 	br	10000820 <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000818:	00020b40 	call	100020b4 <UsbGetRetryCnt>
1000081c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000820:	e0bffb0b 	ldhu	r2,-20(fp)
10000824:	108000d8 	cmpnei	r2,r2,3
10000828:	103ffb1e 	bne	r2,zero,10000818 <__alt_data_end+0xf8000818>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
1000082c:	01040074 	movhi	r4,4097
10000830:	21050f04 	addi	r4,r4,5180
10000834:	00022d00 	call	100022d0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10000838:	00013f40 	call	100013f4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000083c:	00000306 	br	1000084c <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000840:	00013f40 	call	100013f4 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000844:	0109c404 	movi	r4,10000
10000848:	000f2e80 	call	1000f2e8 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000084c:	010000c4 	movi	r4,3
10000850:	00002b40 	call	100002b4 <IO_read>
10000854:	10bfffcc 	andi	r2,r2,65535
10000858:	1080040c 	andi	r2,r2,16
1000085c:	103ff826 	beq	r2,zero,10000840 <__alt_data_end+0xf8000840>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000860:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000864:	01000084 	movi	r4,2
10000868:	01414184 	movi	r5,1286
1000086c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000870:	0009883a 	mov	r4,zero
10000874:	00002b40 	call	100002b4 <IO_read>
10000878:	10bfffcc 	andi	r2,r2,65535
1000087c:	01040074 	movhi	r4,4097
10000880:	2104f804 	addi	r4,r4,5088
10000884:	100b883a 	mov	r5,r2
10000888:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508);
1000088c:	01000084 	movi	r4,2
10000890:	01414204 	movi	r5,1288
10000894:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000898:	0009883a 	mov	r4,zero
1000089c:	00002b40 	call	100002b4 <IO_read>
100008a0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008a4:	e0bffb0b 	ldhu	r2,-20(fp)
100008a8:	01040074 	movhi	r4,4097
100008ac:	21050304 	addi	r4,r4,5132
100008b0:	100b883a 	mov	r5,r2
100008b4:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03)
100008b8:	00000206 	br	100008c4 <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008bc:	00020b40 	call	100020b4 <UsbGetRetryCnt>
100008c0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008c4:	e0bffb0b 	ldhu	r2,-20(fp)
100008c8:	108000d8 	cmpnei	r2,r2,3
100008cc:	103ffb1e 	bne	r2,zero,100008bc <__alt_data_end+0xf80008bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008d0:	01040074 	movhi	r4,4097
100008d4:	21052304 	addi	r4,r4,5260
100008d8:	00022d00 	call	100022d0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100008dc:	00015c80 	call	100015c8 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008e0:	00000306 	br	100008f0 <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100008e4:	00015c80 	call	100015c8 <UsbGetConfigDesc1>
		usleep(10*1000);
100008e8:	0109c404 	movi	r4,10000
100008ec:	000f2e80 	call	1000f2e8 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008f0:	010000c4 	movi	r4,3
100008f4:	00002b40 	call	100002b4 <IO_read>
100008f8:	10bfffcc 	andi	r2,r2,65535
100008fc:	1080040c 	andi	r2,r2,16
10000900:	103ff826 	beq	r2,zero,100008e4 <__alt_data_end+0xf80008e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000904:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000908:	01000084 	movi	r4,2
1000090c:	01414184 	movi	r5,1286
10000910:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000914:	0009883a 	mov	r4,zero
10000918:	00002b40 	call	100002b4 <IO_read>
1000091c:	10bfffcc 	andi	r2,r2,65535
10000920:	01040074 	movhi	r4,4097
10000924:	21053504 	addi	r4,r4,5332
10000928:	100b883a 	mov	r5,r2
1000092c:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000930:	01000084 	movi	r4,2
10000934:	01414204 	movi	r5,1288
10000938:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000093c:	0009883a 	mov	r4,zero
10000940:	00002b40 	call	100002b4 <IO_read>
10000944:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000948:	e0bffb0b 	ldhu	r2,-20(fp)
1000094c:	01040074 	movhi	r4,4097
10000950:	21054004 	addi	r4,r4,5376
10000954:	100b883a 	mov	r5,r2
10000958:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03)
1000095c:	00000206 	br	10000968 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000960:	00020b40 	call	100020b4 <UsbGetRetryCnt>
10000964:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000968:	e0bffb0b 	ldhu	r2,-20(fp)
1000096c:	108000d8 	cmpnei	r2,r2,3
10000970:	103ffb1e 	bne	r2,zero,10000960 <__alt_data_end+0xf8000960>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000974:	01040074 	movhi	r4,4097
10000978:	21054c04 	addi	r4,r4,5424
1000097c:	00022d00 	call	100022d0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000980:	00017540 	call	10001754 <UsbGetConfigDesc2>

	usleep(100*1000);
10000984:	010000b4 	movhi	r4,2
10000988:	2121a804 	addi	r4,r4,-31072
1000098c:	000f2e80 	call	1000f2e8 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000990:	00000306 	br	100009a0 <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000994:	00017540 	call	10001754 <UsbGetConfigDesc2>
		usleep(10*1000);
10000998:	0109c404 	movi	r4,10000
1000099c:	000f2e80 	call	1000f2e8 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009a0:	010000c4 	movi	r4,3
100009a4:	00002b40 	call	100002b4 <IO_read>
100009a8:	10bfffcc 	andi	r2,r2,65535
100009ac:	1080040c 	andi	r2,r2,16
100009b0:	103ff826 	beq	r2,zero,10000994 <__alt_data_end+0xf8000994>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009b4:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009b8:	01000084 	movi	r4,2
100009bc:	01414184 	movi	r5,1286
100009c0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009c4:	0009883a 	mov	r4,zero
100009c8:	00002b40 	call	100002b4 <IO_read>
100009cc:	10bfffcc 	andi	r2,r2,65535
100009d0:	01040074 	movhi	r4,4097
100009d4:	21055f04 	addi	r4,r4,5500
100009d8:	100b883a 	mov	r5,r2
100009dc:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508);
100009e0:	01000084 	movi	r4,2
100009e4:	01414204 	movi	r5,1288
100009e8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009ec:	0009883a 	mov	r4,zero
100009f0:	00002b40 	call	100002b4 <IO_read>
100009f4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
100009f8:	e0bffb0b 	ldhu	r2,-20(fp)
100009fc:	01040074 	movhi	r4,4097
10000a00:	21056a04 	addi	r4,r4,5544
10000a04:	100b883a 	mov	r5,r2
10000a08:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03)
10000a0c:	00000206 	br	10000a18 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a10:	00020b40 	call	100020b4 <UsbGetRetryCnt>
10000a14:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a18:	e0bffb0b 	ldhu	r2,-20(fp)
10000a1c:	108000d8 	cmpnei	r2,r2,3
10000a20:	103ffb1e 	bne	r2,zero,10000a10 <__alt_data_end+0xf8000a10>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a24:	01040074 	movhi	r4,4097
10000a28:	21057604 	addi	r4,r4,5592
10000a2c:	00022d00 	call	100022d0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a30:	01000084 	movi	r4,2
10000a34:	01415b04 	movi	r5,1388
10000a38:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000a3c:	0009883a 	mov	r4,zero
10000a40:	00002b40 	call	100002b4 <IO_read>
10000a44:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000a48:	e0bffe8b 	ldhu	r2,-6(fp)
10000a4c:	108000cc 	andi	r2,r2,3
10000a50:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000a54:	e0bffe8b 	ldhu	r2,-6(fp)
10000a58:	01040074 	movhi	r4,4097
10000a5c:	21058904 	addi	r4,r4,5668
10000a60:	100b883a 	mov	r5,r2
10000a64:	00021dc0 	call	100021dc <printf>

	if (code == 0x01)
10000a68:	e0bffe8b 	ldhu	r2,-6(fp)
10000a6c:	10800058 	cmpnei	r2,r2,1
10000a70:	1000041e 	bne	r2,zero,10000a84 <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a74:	01040074 	movhi	r4,4097
10000a78:	21058c04 	addi	r4,r4,5680
10000a7c:	00022d00 	call	100022d0 <puts>
10000a80:	00000306 	br	10000a90 <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000a84:	01040074 	movhi	r4,4097
10000a88:	21059b04 	addi	r4,r4,5740
10000a8c:	00022d00 	call	100022d0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000a90:	01000084 	movi	r4,2
10000a94:	01415d84 	movi	r5,1398
10000a98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000a9c:	0009883a 	mov	r4,zero
10000aa0:	0141cfc4 	movi	r5,1855
10000aa4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000aa8:	0009883a 	mov	r4,zero
10000aac:	01604154 	movui	r5,33029
10000ab0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ab4:	0009883a 	mov	r4,zero
10000ab8:	014000c4 	movi	r5,3
10000abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ac0:	0009883a 	mov	r4,zero
10000ac4:	01400204 	movi	r5,8
10000ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000acc:	0009883a 	mov	r4,zero
10000ad0:	016b0294 	movui	r5,44042
10000ad4:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000ad8:	01006c04 	movi	r4,432
10000adc:	01415d84 	movi	r5,1398
10000ae0:	000106c0 	call	1000106c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000ae4:	01000084 	movi	r4,2
10000ae8:	01415f04 	movi	r5,1404
10000aec:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000af0:	0009883a 	mov	r4,zero
10000af4:	00002b40 	call	100002b4 <IO_read>
10000af8:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000afc:	e0bfff03 	ldbu	r2,-4(fp)
10000b00:	01040074 	movhi	r4,4097
10000b04:	2105a404 	addi	r4,r4,5776
10000b08:	100b883a 	mov	r5,r2
10000b0c:	00021dc0 	call	100021dc <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b10:	00019b80 	call	100019b8 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b14:	00000306 	br	10000b24 <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b18:	00019b80 	call	100019b8 <UsbSetConfig>
		usleep(10*1000);
10000b1c:	0109c404 	movi	r4,10000
10000b20:	000f2e80 	call	1000f2e8 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b24:	010000c4 	movi	r4,3
10000b28:	00002b40 	call	100002b4 <IO_read>
10000b2c:	10bfffcc 	andi	r2,r2,65535
10000b30:	1080040c 	andi	r2,r2,16
10000b34:	103ff826 	beq	r2,zero,10000b18 <__alt_data_end+0xf8000b18>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b38:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b3c:	01000084 	movi	r4,2
10000b40:	01414184 	movi	r5,1286
10000b44:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b48:	0009883a 	mov	r4,zero
10000b4c:	00002b40 	call	100002b4 <IO_read>
10000b50:	10bfffcc 	andi	r2,r2,65535
10000b54:	01040074 	movhi	r4,4097
10000b58:	2105ae04 	addi	r4,r4,5816
10000b5c:	100b883a 	mov	r5,r2
10000b60:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000b64:	01000084 	movi	r4,2
10000b68:	01414204 	movi	r5,1288
10000b6c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b70:	0009883a 	mov	r4,zero
10000b74:	00002b40 	call	100002b4 <IO_read>
10000b78:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000b7c:	e0bffb0b 	ldhu	r2,-20(fp)
10000b80:	01040074 	movhi	r4,4097
10000b84:	2105b904 	addi	r4,r4,5860
10000b88:	100b883a 	mov	r5,r2
10000b8c:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03)
10000b90:	00000206 	br	10000b9c <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b94:	00020b40 	call	100020b4 <UsbGetRetryCnt>
10000b98:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000b9c:	e0bffb0b 	ldhu	r2,-20(fp)
10000ba0:	108000d8 	cmpnei	r2,r2,3
10000ba4:	103ffb1e 	bne	r2,zero,10000b94 <__alt_data_end+0xf8000b94>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000ba8:	01040074 	movhi	r4,4097
10000bac:	2105c504 	addi	r4,r4,5908
10000bb0:	00022d00 	call	100022d0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bb4:	0001ab40 	call	10001ab4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bb8:	00000306 	br	10000bc8 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000bbc:	0001ab40 	call	10001ab4 <UsbClassRequest>
		usleep(10*1000);
10000bc0:	0109c404 	movi	r4,10000
10000bc4:	000f2e80 	call	1000f2e8 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bc8:	010000c4 	movi	r4,3
10000bcc:	00002b40 	call	100002b4 <IO_read>
10000bd0:	10bfffcc 	andi	r2,r2,65535
10000bd4:	1080040c 	andi	r2,r2,16
10000bd8:	103ff826 	beq	r2,zero,10000bbc <__alt_data_end+0xf8000bbc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000bdc:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000be0:	01000084 	movi	r4,2
10000be4:	01414184 	movi	r5,1286
10000be8:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000bec:	0009883a 	mov	r4,zero
10000bf0:	00002b40 	call	100002b4 <IO_read>
10000bf4:	10bfffcc 	andi	r2,r2,65535
10000bf8:	01040074 	movhi	r4,4097
10000bfc:	2105d704 	addi	r4,r4,5980
10000c00:	100b883a 	mov	r5,r2
10000c04:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000c08:	01000084 	movi	r4,2
10000c0c:	01414204 	movi	r5,1288
10000c10:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c14:	0009883a 	mov	r4,zero
10000c18:	00002b40 	call	100002b4 <IO_read>
10000c1c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c20:	e0bffb0b 	ldhu	r2,-20(fp)
10000c24:	01040074 	movhi	r4,4097
10000c28:	2105e204 	addi	r4,r4,6024
10000c2c:	100b883a 	mov	r5,r2
10000c30:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03)
10000c34:	00000206 	br	10000c40 <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c38:	00020b40 	call	100020b4 <UsbGetRetryCnt>
10000c3c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c40:	e0bffb0b 	ldhu	r2,-20(fp)
10000c44:	108000d8 	cmpnei	r2,r2,3
10000c48:	103ffb1e 	bne	r2,zero,10000c38 <__alt_data_end+0xf8000c38>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c4c:	01040074 	movhi	r4,4097
10000c50:	2105ee04 	addi	r4,r4,6072
10000c54:	00022d00 	call	100022d0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c58:	0001bb00 	call	10001bb0 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c5c:	00000306 	br	10000c6c <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c60:	0001bb00 	call	10001bb0 <UsbGetHidDesc>
		usleep(10*1000);
10000c64:	0109c404 	movi	r4,10000
10000c68:	000f2e80 	call	1000f2e8 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c6c:	010000c4 	movi	r4,3
10000c70:	00002b40 	call	100002b4 <IO_read>
10000c74:	10bfffcc 	andi	r2,r2,65535
10000c78:	1080040c 	andi	r2,r2,16
10000c7c:	103ff826 	beq	r2,zero,10000c60 <__alt_data_end+0xf8000c60>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c80:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c84:	01000084 	movi	r4,2
10000c88:	01414184 	movi	r5,1286
10000c8c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c90:	0009883a 	mov	r4,zero
10000c94:	00002b40 	call	100002b4 <IO_read>
10000c98:	10bfffcc 	andi	r2,r2,65535
10000c9c:	01040074 	movhi	r4,4097
10000ca0:	2105d704 	addi	r4,r4,5980
10000ca4:	100b883a 	mov	r5,r2
10000ca8:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000cac:	01000084 	movi	r4,2
10000cb0:	01414204 	movi	r5,1288
10000cb4:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cb8:	0009883a 	mov	r4,zero
10000cbc:	00002b40 	call	100002b4 <IO_read>
10000cc0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000cc4:	e0bffb0b 	ldhu	r2,-20(fp)
10000cc8:	01040074 	movhi	r4,4097
10000ccc:	2105e204 	addi	r4,r4,6024
10000cd0:	100b883a 	mov	r5,r2
10000cd4:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03)
10000cd8:	00000206 	br	10000ce4 <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cdc:	00020b40 	call	100020b4 <UsbGetRetryCnt>
10000ce0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ce4:	e0bffb0b 	ldhu	r2,-20(fp)
10000ce8:	108000d8 	cmpnei	r2,r2,3
10000cec:	103ffb1e 	bne	r2,zero,10000cdc <__alt_data_end+0xf8000cdc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000cf0:	01040074 	movhi	r4,4097
10000cf4:	21060004 	addi	r4,r4,6144
10000cf8:	00022d00 	call	100022d0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000cfc:	0001cf40 	call	10001cf4 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d00:	00000306 	br	10000d10 <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d04:	0001cf40 	call	10001cf4 <UsbGetReportDesc>
		usleep(10*1000);
10000d08:	0109c404 	movi	r4,10000
10000d0c:	000f2e80 	call	1000f2e8 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d10:	010000c4 	movi	r4,3
10000d14:	00002b40 	call	100002b4 <IO_read>
10000d18:	10bfffcc 	andi	r2,r2,65535
10000d1c:	1080040c 	andi	r2,r2,16
10000d20:	103ff826 	beq	r2,zero,10000d04 <__alt_data_end+0xf8000d04>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d24:	00020300 	call	10002030 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d28:	01000084 	movi	r4,2
10000d2c:	01414184 	movi	r5,1286
10000d30:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d34:	0009883a 	mov	r4,zero
10000d38:	00002b40 	call	100002b4 <IO_read>
10000d3c:	10bfffcc 	andi	r2,r2,65535
10000d40:	01040074 	movhi	r4,4097
10000d44:	21061404 	addi	r4,r4,6224
10000d48:	100b883a 	mov	r5,r2
10000d4c:	00021dc0 	call	100021dc <printf>

	IO_write(HPI_ADDR,0x0508);
10000d50:	01000084 	movi	r4,2
10000d54:	01414204 	movi	r5,1288
10000d58:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d5c:	0009883a 	mov	r4,zero
10000d60:	00002b40 	call	100002b4 <IO_read>
10000d64:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d68:	e0bffb0b 	ldhu	r2,-20(fp)
10000d6c:	01040074 	movhi	r4,4097
10000d70:	21062004 	addi	r4,r4,6272
10000d74:	100b883a 	mov	r5,r2
10000d78:	00021dc0 	call	100021dc <printf>
	while (usb_ctl_val != 0x03)
10000d7c:	00000206 	br	10000d88 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d80:	00020b40 	call	100020b4 <UsbGetRetryCnt>
10000d84:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d88:	e0bffb0b 	ldhu	r2,-20(fp)
10000d8c:	108000d8 	cmpnei	r2,r2,3
10000d90:	103ffb1e 	bne	r2,zero,10000d80 <__alt_data_end+0xf8000d80>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000d94:	01040074 	movhi	r4,4097
10000d98:	21062c04 	addi	r4,r4,6320
10000d9c:	00022d00 	call	100022d0 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000da0:	0109c404 	movi	r4,10000
10000da4:	000f2e80 	call	1000f2e8 <usleep>
	while(1)
	{
		toggle++;
10000da8:	e0bffb83 	ldbu	r2,-18(fp)
10000dac:	10800044 	addi	r2,r2,1
10000db0:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000db4:	01000084 	movi	r4,2
10000db8:	01414004 	movi	r5,1280
10000dbc:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000dc0:	0009883a 	mov	r4,zero
10000dc4:	01414704 	movi	r5,1308
10000dc8:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000dcc:	e0bfff03 	ldbu	r2,-4(fp)
10000dd0:	108003cc 	andi	r2,r2,15
10000dd4:	0009883a 	mov	r4,zero
10000dd8:	100b883a 	mov	r5,r2
10000ddc:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000de0:	0009883a 	mov	r4,zero
10000de4:	0140a444 	movi	r5,657
10000de8:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
10000dec:	e0bffb83 	ldbu	r2,-18(fp)
10000df0:	1080004c 	andi	r2,r2,1
10000df4:	10803fcc 	andi	r2,r2,255
10000df8:	10000426 	beq	r2,zero,10000e0c <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000dfc:	0009883a 	mov	r4,zero
10000e00:	01400044 	movi	r5,1
10000e04:	00002480 	call	10000248 <IO_write>
10000e08:	00000306 	br	10000e18 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000e0c:	0009883a 	mov	r4,zero
10000e10:	01401044 	movi	r5,65
10000e14:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000e18:	0009883a 	mov	r4,zero
10000e1c:	014004c4 	movi	r5,19
10000e20:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000e24:	0009883a 	mov	r4,zero
10000e28:	000b883a 	mov	r5,zero
10000e2c:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000e30:	01006c04 	movi	r4,432
10000e34:	01414004 	movi	r5,1280
10000e38:	000106c0 	call	1000106c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e3c:	00002406 	br	10000ed0 <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000e40:	01000084 	movi	r4,2
10000e44:	01414004 	movi	r5,1280
10000e48:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000e4c:	0009883a 	mov	r4,zero
10000e50:	01414704 	movi	r5,1308
10000e54:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e58:	e0bfff03 	ldbu	r2,-4(fp)
10000e5c:	108003cc 	andi	r2,r2,15
10000e60:	0009883a 	mov	r4,zero
10000e64:	100b883a 	mov	r5,r2
10000e68:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e6c:	0009883a 	mov	r4,zero
10000e70:	0140a444 	movi	r5,657
10000e74:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10000e78:	e0bffb83 	ldbu	r2,-18(fp)
10000e7c:	1080004c 	andi	r2,r2,1
10000e80:	10803fcc 	andi	r2,r2,255
10000e84:	10000426 	beq	r2,zero,10000e98 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000e88:	0009883a 	mov	r4,zero
10000e8c:	01400044 	movi	r5,1
10000e90:	00002480 	call	10000248 <IO_write>
10000e94:	00000306 	br	10000ea4 <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000e98:	0009883a 	mov	r4,zero
10000e9c:	01401044 	movi	r5,65
10000ea0:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000ea4:	0009883a 	mov	r4,zero
10000ea8:	014004c4 	movi	r5,19
10000eac:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000eb0:	0009883a 	mov	r4,zero
10000eb4:	000b883a 	mov	r5,zero
10000eb8:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ebc:	01006c04 	movi	r4,432
10000ec0:	01414004 	movi	r5,1280
10000ec4:	000106c0 	call	1000106c <UsbWrite>
			usleep(10*1000);
10000ec8:	0109c404 	movi	r4,10000
10000ecc:	000f2e80 	call	1000f2e8 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ed0:	010000c4 	movi	r4,3
10000ed4:	00002b40 	call	100002b4 <IO_read>
10000ed8:	10bfffcc 	andi	r2,r2,65535
10000edc:	1080040c 	andi	r2,r2,16
10000ee0:	103fd726 	beq	r2,zero,10000e40 <__alt_data_end+0xf8000e40>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10000ee4:	00020300 	call	10002030 <UsbWaitTDListDone>
10000ee8:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10000eec:	01000084 	movi	r4,2
10000ef0:	01414784 	movi	r5,1310
10000ef4:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
10000ef8:	0009883a 	mov	r4,zero
10000efc:	00002b40 	call	100002b4 <IO_read>
10000f00:	10bfffcc 	andi	r2,r2,65535
10000f04:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10000f08:	01040074 	movhi	r4,4097
10000f0c:	21064004 	addi	r4,r4,6400
10000f10:	e17ffd17 	ldw	r5,-12(fp)
10000f14:	00021dc0 	call	100021dc <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
10000f18:	e0bffd17 	ldw	r2,-12(fp)
10000f1c:	10c03fcc 	andi	r3,r2,255
10000f20:	00800804 	movi	r2,32
10000f24:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
10000f28:	01003204 	movi	r4,200
10000f2c:	000f2e80 	call	1000f2e8 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000f30:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000f34:	10bfffcc 	andi	r2,r2,65535
10000f38:	1009883a 	mov	r4,r2
10000f3c:	00010c00 	call	100010c0 <UsbRead>
10000f40:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
10000f44:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000f48:	e0fffb0b 	ldhu	r3,-20(fp)
10000f4c:	1884703a 	and	r2,r3,r2
10000f50:	10bfffcc 	andi	r2,r2,65535
10000f54:	1000211e 	bne	r2,zero,10000fdc <main+0xcc0>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000f58:	e03ffbc5 	stb	zero,-17(fp)
10000f5c:	00001006 	br	10000fa0 <main+0xc84>
			{
				usleep(5*1000);
10000f60:	0104e204 	movi	r4,5000
10000f64:	000f2e80 	call	1000f2e8 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10000f68:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000f6c:	10bfffcc 	andi	r2,r2,65535
10000f70:	1009883a 	mov	r4,r2
10000f74:	00010c00 	call	100010c0 <UsbRead>
10000f78:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
10000f7c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000f80:	e0fffb0b 	ldhu	r3,-20(fp)
10000f84:	1884703a 	and	r2,r3,r2
10000f88:	10bfffcc 	andi	r2,r2,65535
10000f8c:	10000126 	beq	r2,zero,10000f94 <main+0xc78>
10000f90:	00000606 	br	10000fac <main+0xc90>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000f94:	e0bffbc3 	ldbu	r2,-17(fp)
10000f98:	10800044 	addi	r2,r2,1
10000f9c:	e0bffbc5 	stb	r2,-17(fp)
10000fa0:	e0bffbc3 	ldbu	r2,-17(fp)
10000fa4:	108001f0 	cmpltui	r2,r2,7
10000fa8:	103fed1e 	bne	r2,zero,10000f60 <__alt_data_end+0xf8000f60>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10000fac:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000fb0:	e0fffb0b 	ldhu	r3,-20(fp)
10000fb4:	1884703a 	and	r2,r3,r2
10000fb8:	10bfffcc 	andi	r2,r2,65535
10000fbc:	1000071e 	bne	r2,zero,10000fdc <main+0xcc0>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10000fc0:	01040074 	movhi	r4,4097
10000fc4:	21064904 	addi	r4,r4,6436
10000fc8:	00022d00 	call	100022d0 <puts>
				printf("[INFO]: please insert again!!! \n");
10000fcc:	01040074 	movhi	r4,4097
10000fd0:	21065404 	addi	r4,r4,6480
10000fd4:	00022d00 	call	100022d0 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10000fd8:	00001e06 	br	10001054 <main+0xd38>
10000fdc:	00001d06 	br	10001054 <main+0xd38>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10000fe0:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000fe4:	10bfffcc 	andi	r2,r2,65535
10000fe8:	1009883a 	mov	r4,r2
10000fec:	00010c00 	call	100010c0 <UsbRead>
10000ff0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10000ff4:	0104e204 	movi	r4,5000
10000ff8:	000f2e80 	call	1000f2e8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000ffc:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001000:	10bfffcc 	andi	r2,r2,65535
10001004:	1009883a 	mov	r4,r2
10001008:	00010c00 	call	100010c0 <UsbRead>
1000100c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001010:	0104e204 	movi	r4,5000
10001014:	000f2e80 	call	1000f2e8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001018:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000101c:	10bfffcc 	andi	r2,r2,65535
10001020:	1009883a 	mov	r4,r2
10001024:	00010c00 	call	100010c0 <UsbRead>
10001028:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
1000102c:	0104e204 	movi	r4,5000
10001030:	000f2e80 	call	1000f2e8 <usleep>

			if(usb_ctl_val & no_device)
10001034:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001038:	e0fffb0b 	ldhu	r3,-20(fp)
1000103c:	1884703a 	and	r2,r3,r2
10001040:	10bfffcc 	andi	r2,r2,65535
10001044:	10000126 	beq	r2,zero,1000104c <main+0xd30>
				goto USB_HOT_PLUG;
10001048:	003cbf06 	br	10000348 <__alt_data_end+0xf8000348>

			usleep(200);
1000104c:	01003204 	movi	r4,200
10001050:	000f2e80 	call	1000f2e8 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001054:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001058:	e0fffb0b 	ldhu	r3,-20(fp)
1000105c:	1884703a 	and	r2,r3,r2
10001060:	10bfffcc 	andi	r2,r2,65535
10001064:	103fde26 	beq	r2,zero,10000fe0 <__alt_data_end+0xf8000fe0>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10001068:	003f4f06 	br	10000da8 <__alt_data_end+0xf8000da8>

1000106c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
1000106c:	defffc04 	addi	sp,sp,-16
10001070:	dfc00315 	stw	ra,12(sp)
10001074:	df000215 	stw	fp,8(sp)
10001078:	df000204 	addi	fp,sp,8
1000107c:	2007883a 	mov	r3,r4
10001080:	2805883a 	mov	r2,r5
10001084:	e0fffe0d 	sth	r3,-8(fp)
10001088:	e0bfff0d 	sth	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

	IO_write(HPI_ADDR, Address);
1000108c:	e0bffe0b 	ldhu	r2,-8(fp)
10001090:	01000084 	movi	r4,2
10001094:	100b883a 	mov	r5,r2
10001098:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA, Data);
1000109c:	e0bfff0b 	ldhu	r2,-4(fp)
100010a0:	0009883a 	mov	r4,zero
100010a4:	100b883a 	mov	r5,r2
100010a8:	00002480 	call	10000248 <IO_write>

}
100010ac:	e037883a 	mov	sp,fp
100010b0:	dfc00117 	ldw	ra,4(sp)
100010b4:	df000017 	ldw	fp,0(sp)
100010b8:	dec00204 	addi	sp,sp,8
100010bc:	f800283a 	ret

100010c0 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100010c0:	defffd04 	addi	sp,sp,-12
100010c4:	dfc00215 	stw	ra,8(sp)
100010c8:	df000115 	stw	fp,4(sp)
100010cc:	df000104 	addi	fp,sp,4
100010d0:	2005883a 	mov	r2,r4
100010d4:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//


	IO_write(HPI_ADDR, Address);
100010d8:	e0bfff0b 	ldhu	r2,-4(fp)
100010dc:	01000084 	movi	r4,2
100010e0:	100b883a 	mov	r5,r2
100010e4:	00002480 	call	10000248 <IO_write>
	return IO_read(HPI_DATA);
100010e8:	0009883a 	mov	r4,zero
100010ec:	00002b40 	call	100002b4 <IO_read>

}
100010f0:	e037883a 	mov	sp,fp
100010f4:	dfc00117 	ldw	ra,4(sp)
100010f8:	df000017 	ldw	fp,0(sp)
100010fc:	dec00204 	addi	sp,sp,8
10001100:	f800283a 	ret

10001104 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001104:	defffe04 	addi	sp,sp,-8
10001108:	dfc00115 	stw	ra,4(sp)
1000110c:	df000015 	stw	fp,0(sp)
10001110:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001114:	01000044 	movi	r4,1
10001118:	017e9414 	movui	r5,64080
1000111c:	00002480 	call	10000248 <IO_write>
	usleep(100000);
10001120:	010000b4 	movhi	r4,2
10001124:	2121a804 	addi	r4,r4,-31072
10001128:	000f2e80 	call	1000f2e8 <usleep>
	printf("[USB INIT]:reset finished!\n");
1000112c:	01040074 	movhi	r4,4097
10001130:	21065c04 	addi	r4,r4,6512
10001134:	00022d00 	call	100022d0 <puts>

	usleep(500000);
10001138:	01000234 	movhi	r4,8
1000113c:	21284804 	addi	r4,r4,-24288
10001140:	000f2e80 	call	1000f2e8 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001144:	01040074 	movhi	r4,4097
10001148:	21066304 	addi	r4,r4,6540
1000114c:	00022d00 	call	100022d0 <puts>
	IO_read(HPI_MAILBOX);
10001150:	01000044 	movi	r4,1
10001154:	00002b40 	call	100002b4 <IO_read>
	IO_read(HPI_STATUS);
10001158:	010000c4 	movi	r4,3
1000115c:	00002b40 	call	100002b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001160:	01005104 	movi	r4,324
10001164:	00010c00 	call	100010c0 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001168:	01005104 	movi	r4,324
1000116c:	000b883a 	mov	r5,zero
10001170:	000106c0 	call	1000106c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001174:	01005204 	movi	r4,328
10001178:	00010c00 	call	100010c0 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
1000117c:	01005204 	movi	r4,328
10001180:	000b883a 	mov	r5,zero
10001184:	000106c0 	call	1000106c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001188:	01302414 	movui	r4,49296
1000118c:	017fffd4 	movui	r5,65535
10001190:	000106c0 	call	1000106c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001194:	01302c14 	movui	r4,49328
10001198:	017fffd4 	movui	r5,65535
1000119c:	000106c0 	call	1000106c <UsbWrite>
}
100011a0:	e037883a 	mov	sp,fp
100011a4:	dfc00117 	ldw	ra,4(sp)
100011a8:	df000017 	ldw	fp,0(sp)
100011ac:	dec00204 	addi	sp,sp,8
100011b0:	f800283a 	ret

100011b4 <UsbSetAddress>:


void UsbSetAddress()
{
100011b4:	defffe04 	addi	sp,sp,-8
100011b8:	dfc00115 	stw	ra,4(sp)
100011bc:	df000015 	stw	fp,0(sp)
100011c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100011c4:	01000084 	movi	r4,2
100011c8:	01414004 	movi	r5,1280
100011cc:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100011d0:	0009883a 	mov	r4,zero
100011d4:	01414304 	movi	r5,1292
100011d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100011dc:	0009883a 	mov	r4,zero
100011e0:	01400204 	movi	r5,8
100011e4:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100011e8:	0009883a 	mov	r4,zero
100011ec:	01403404 	movi	r5,208
100011f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100011f4:	0009883a 	mov	r4,zero
100011f8:	01400044 	movi	r5,1
100011fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001200:	0009883a 	mov	r4,zero
10001204:	014004c4 	movi	r5,19
10001208:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000120c:	0009883a 	mov	r4,zero
10001210:	01414504 	movi	r5,1300
10001214:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10001218:	0009883a 	mov	r4,zero
1000121c:	01414004 	movi	r5,1280
10001220:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
10001224:	0009883a 	mov	r4,zero
10001228:	01400084 	movi	r5,2
1000122c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001230:	0009883a 	mov	r4,zero
10001234:	000b883a 	mov	r5,zero
10001238:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000123c:	0009883a 	mov	r4,zero
10001240:	000b883a 	mov	r5,zero
10001244:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001248:	0009883a 	mov	r4,zero
1000124c:	000b883a 	mov	r5,zero
10001250:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001254:	0009883a 	mov	r4,zero
10001258:	000b883a 	mov	r5,zero
1000125c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001260:	0009883a 	mov	r4,zero
10001264:	01402404 	movi	r5,144
10001268:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000126c:	0009883a 	mov	r4,zero
10001270:	01401044 	movi	r5,65
10001274:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001278:	0009883a 	mov	r4,zero
1000127c:	014004c4 	movi	r5,19
10001280:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001284:	0009883a 	mov	r4,zero
10001288:	000b883a 	mov	r5,zero
1000128c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001290:	01006c04 	movi	r4,432
10001294:	01414004 	movi	r5,1280
10001298:	000106c0 	call	1000106c <UsbWrite>
}
1000129c:	e037883a 	mov	sp,fp
100012a0:	dfc00117 	ldw	ra,4(sp)
100012a4:	df000017 	ldw	fp,0(sp)
100012a8:	dec00204 	addi	sp,sp,8
100012ac:	f800283a 	ret

100012b0 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100012b0:	defffe04 	addi	sp,sp,-8
100012b4:	dfc00115 	stw	ra,4(sp)
100012b8:	df000015 	stw	fp,0(sp)
100012bc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100012c0:	01000084 	movi	r4,2
100012c4:	01414004 	movi	r5,1280
100012c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100012cc:	0009883a 	mov	r4,zero
100012d0:	01414304 	movi	r5,1292
100012d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100012d8:	0009883a 	mov	r4,zero
100012dc:	01400204 	movi	r5,8
100012e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100012e4:	0009883a 	mov	r4,zero
100012e8:	0140b404 	movi	r5,720
100012ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100012f0:	0009883a 	mov	r4,zero
100012f4:	01400044 	movi	r5,1
100012f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100012fc:	0009883a 	mov	r4,zero
10001300:	014004c4 	movi	r5,19
10001304:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001308:	0009883a 	mov	r4,zero
1000130c:	01414504 	movi	r5,1300
10001310:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001314:	0009883a 	mov	r4,zero
10001318:	0141a004 	movi	r5,1664
1000131c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10001320:	0009883a 	mov	r4,zero
10001324:	01404004 	movi	r5,256
10001328:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000132c:	0009883a 	mov	r4,zero
10001330:	000b883a 	mov	r5,zero
10001334:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001338:	0009883a 	mov	r4,zero
1000133c:	01400204 	movi	r5,8
10001340:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10001344:	0009883a 	mov	r4,zero
10001348:	01414b04 	movi	r5,1324
1000134c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001350:	0009883a 	mov	r4,zero
10001354:	01400204 	movi	r5,8
10001358:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
1000135c:	0009883a 	mov	r4,zero
10001360:	0140a404 	movi	r5,656
10001364:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001368:	0009883a 	mov	r4,zero
1000136c:	01401044 	movi	r5,65
10001370:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001374:	0009883a 	mov	r4,zero
10001378:	014004c4 	movi	r5,19
1000137c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
10001380:	0009883a 	mov	r4,zero
10001384:	01414804 	movi	r5,1312
10001388:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
1000138c:	0009883a 	mov	r4,zero
10001390:	000b883a 	mov	r5,zero
10001394:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001398:	0009883a 	mov	r4,zero
1000139c:	000b883a 	mov	r5,zero
100013a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100013a4:	0009883a 	mov	r4,zero
100013a8:	01408404 	movi	r5,528
100013ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
100013b0:	0009883a 	mov	r4,zero
100013b4:	01401044 	movi	r5,65
100013b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013bc:	0009883a 	mov	r4,zero
100013c0:	014004c4 	movi	r5,19
100013c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013c8:	0009883a 	mov	r4,zero
100013cc:	000b883a 	mov	r5,zero
100013d0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100013d4:	01006c04 	movi	r4,432
100013d8:	01414004 	movi	r5,1280
100013dc:	000106c0 	call	1000106c <UsbWrite>
}
100013e0:	e037883a 	mov	sp,fp
100013e4:	dfc00117 	ldw	ra,4(sp)
100013e8:	df000017 	ldw	fp,0(sp)
100013ec:	dec00204 	addi	sp,sp,8
100013f0:	f800283a 	ret

100013f4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100013f4:	defffe04 	addi	sp,sp,-8
100013f8:	dfc00115 	stw	ra,4(sp)
100013fc:	df000015 	stw	fp,0(sp)
10001400:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001404:	01000084 	movi	r4,2
10001408:	01414004 	movi	r5,1280
1000140c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001410:	0009883a 	mov	r4,zero
10001414:	01414304 	movi	r5,1292
10001418:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000141c:	0009883a 	mov	r4,zero
10001420:	01400204 	movi	r5,8
10001424:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001428:	0009883a 	mov	r4,zero
1000142c:	0140b404 	movi	r5,720
10001430:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001434:	0009883a 	mov	r4,zero
10001438:	01400044 	movi	r5,1
1000143c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001440:	0009883a 	mov	r4,zero
10001444:	014004c4 	movi	r5,19
10001448:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000144c:	0009883a 	mov	r4,zero
10001450:	01414504 	movi	r5,1300
10001454:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001458:	0009883a 	mov	r4,zero
1000145c:	0141a004 	movi	r5,1664
10001460:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001464:	0009883a 	mov	r4,zero
10001468:	01404004 	movi	r5,256
1000146c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001470:	0009883a 	mov	r4,zero
10001474:	000b883a 	mov	r5,zero
10001478:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
1000147c:	0009883a 	mov	r4,zero
10001480:	01400484 	movi	r5,18
10001484:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001488:	0009883a 	mov	r4,zero
1000148c:	01415104 	movi	r5,1348
10001490:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001494:	0009883a 	mov	r4,zero
10001498:	01400204 	movi	r5,8
1000149c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100014a0:	0009883a 	mov	r4,zero
100014a4:	0140a404 	movi	r5,656
100014a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100014ac:	0009883a 	mov	r4,zero
100014b0:	01401044 	movi	r5,65
100014b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100014b8:	0009883a 	mov	r4,zero
100014bc:	014004c4 	movi	r5,19
100014c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100014c4:	0009883a 	mov	r4,zero
100014c8:	01414804 	movi	r5,1312
100014cc:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100014d0:	0009883a 	mov	r4,zero
100014d4:	01415304 	movi	r5,1356
100014d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100014dc:	0009883a 	mov	r4,zero
100014e0:	01400204 	movi	r5,8
100014e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100014e8:	0009883a 	mov	r4,zero
100014ec:	0140a404 	movi	r5,656
100014f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100014f4:	0009883a 	mov	r4,zero
100014f8:	01400044 	movi	r5,1
100014fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001500:	0009883a 	mov	r4,zero
10001504:	014004c4 	movi	r5,19
10001508:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000150c:	0009883a 	mov	r4,zero
10001510:	01414b04 	movi	r5,1324
10001514:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10001518:	0009883a 	mov	r4,zero
1000151c:	01415504 	movi	r5,1364
10001520:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10001524:	0009883a 	mov	r4,zero
10001528:	01400084 	movi	r5,2
1000152c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001530:	0009883a 	mov	r4,zero
10001534:	0140a404 	movi	r5,656
10001538:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000153c:	0009883a 	mov	r4,zero
10001540:	01401044 	movi	r5,65
10001544:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001548:	0009883a 	mov	r4,zero
1000154c:	014004c4 	movi	r5,19
10001550:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001554:	0009883a 	mov	r4,zero
10001558:	01414e04 	movi	r5,1336
1000155c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001560:	0009883a 	mov	r4,zero
10001564:	000b883a 	mov	r5,zero
10001568:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000156c:	0009883a 	mov	r4,zero
10001570:	000b883a 	mov	r5,zero
10001574:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001578:	0009883a 	mov	r4,zero
1000157c:	01408404 	movi	r5,528
10001580:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001584:	0009883a 	mov	r4,zero
10001588:	01401044 	movi	r5,65
1000158c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001590:	0009883a 	mov	r4,zero
10001594:	014004c4 	movi	r5,19
10001598:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000159c:	0009883a 	mov	r4,zero
100015a0:	000b883a 	mov	r5,zero
100015a4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100015a8:	01006c04 	movi	r4,432
100015ac:	01414004 	movi	r5,1280
100015b0:	000106c0 	call	1000106c <UsbWrite>
}
100015b4:	e037883a 	mov	sp,fp
100015b8:	dfc00117 	ldw	ra,4(sp)
100015bc:	df000017 	ldw	fp,0(sp)
100015c0:	dec00204 	addi	sp,sp,8
100015c4:	f800283a 	ret

100015c8 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100015c8:	defffe04 	addi	sp,sp,-8
100015cc:	dfc00115 	stw	ra,4(sp)
100015d0:	df000015 	stw	fp,0(sp)
100015d4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100015d8:	01000084 	movi	r4,2
100015dc:	01414004 	movi	r5,1280
100015e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100015e4:	0009883a 	mov	r4,zero
100015e8:	01414304 	movi	r5,1292
100015ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100015f0:	0009883a 	mov	r4,zero
100015f4:	01400204 	movi	r5,8
100015f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100015fc:	0009883a 	mov	r4,zero
10001600:	0140b404 	movi	r5,720
10001604:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001608:	0009883a 	mov	r4,zero
1000160c:	01400044 	movi	r5,1
10001610:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001614:	0009883a 	mov	r4,zero
10001618:	014004c4 	movi	r5,19
1000161c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001620:	0009883a 	mov	r4,zero
10001624:	01414504 	movi	r5,1300
10001628:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000162c:	0009883a 	mov	r4,zero
10001630:	0141a004 	movi	r5,1664
10001634:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001638:	0009883a 	mov	r4,zero
1000163c:	01408004 	movi	r5,512
10001640:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001644:	0009883a 	mov	r4,zero
10001648:	000b883a 	mov	r5,zero
1000164c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001650:	0009883a 	mov	r4,zero
10001654:	01400244 	movi	r5,9
10001658:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000165c:	0009883a 	mov	r4,zero
10001660:	01415104 	movi	r5,1348
10001664:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001668:	0009883a 	mov	r4,zero
1000166c:	01400204 	movi	r5,8
10001670:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001674:	0009883a 	mov	r4,zero
10001678:	0140a404 	movi	r5,656
1000167c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001680:	0009883a 	mov	r4,zero
10001684:	01401044 	movi	r5,65
10001688:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000168c:	0009883a 	mov	r4,zero
10001690:	014004c4 	movi	r5,19
10001694:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001698:	0009883a 	mov	r4,zero
1000169c:	01414804 	movi	r5,1312
100016a0:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100016a4:	0009883a 	mov	r4,zero
100016a8:	01415304 	movi	r5,1356
100016ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100016b0:	0009883a 	mov	r4,zero
100016b4:	01400044 	movi	r5,1
100016b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100016bc:	0009883a 	mov	r4,zero
100016c0:	0140a404 	movi	r5,656
100016c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100016c8:	0009883a 	mov	r4,zero
100016cc:	01400044 	movi	r5,1
100016d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100016d4:	0009883a 	mov	r4,zero
100016d8:	014004c4 	movi	r5,19
100016dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100016e0:	0009883a 	mov	r4,zero
100016e4:	01414b04 	movi	r5,1324
100016e8:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100016ec:	0009883a 	mov	r4,zero
100016f0:	000b883a 	mov	r5,zero
100016f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100016f8:	0009883a 	mov	r4,zero
100016fc:	000b883a 	mov	r5,zero
10001700:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001704:	0009883a 	mov	r4,zero
10001708:	01408404 	movi	r5,528
1000170c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001710:	0009883a 	mov	r4,zero
10001714:	01401044 	movi	r5,65
10001718:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000171c:	0009883a 	mov	r4,zero
10001720:	014004c4 	movi	r5,19
10001724:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001728:	0009883a 	mov	r4,zero
1000172c:	000b883a 	mov	r5,zero
10001730:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001734:	01006c04 	movi	r4,432
10001738:	01414004 	movi	r5,1280
1000173c:	000106c0 	call	1000106c <UsbWrite>
}
10001740:	e037883a 	mov	sp,fp
10001744:	dfc00117 	ldw	ra,4(sp)
10001748:	df000017 	ldw	fp,0(sp)
1000174c:	dec00204 	addi	sp,sp,8
10001750:	f800283a 	ret

10001754 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001754:	defffe04 	addi	sp,sp,-8
10001758:	dfc00115 	stw	ra,4(sp)
1000175c:	df000015 	stw	fp,0(sp)
10001760:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001764:	01000084 	movi	r4,2
10001768:	01414004 	movi	r5,1280
1000176c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001770:	0009883a 	mov	r4,zero
10001774:	01414304 	movi	r5,1292
10001778:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000177c:	0009883a 	mov	r4,zero
10001780:	01400204 	movi	r5,8
10001784:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001788:	0009883a 	mov	r4,zero
1000178c:	0140b404 	movi	r5,720
10001790:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001794:	0009883a 	mov	r4,zero
10001798:	01400044 	movi	r5,1
1000179c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100017a0:	0009883a 	mov	r4,zero
100017a4:	014004c4 	movi	r5,19
100017a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100017ac:	0009883a 	mov	r4,zero
100017b0:	01414504 	movi	r5,1300
100017b4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100017b8:	0009883a 	mov	r4,zero
100017bc:	0141a004 	movi	r5,1664
100017c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100017c4:	0009883a 	mov	r4,zero
100017c8:	01408004 	movi	r5,512
100017cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100017d0:	0009883a 	mov	r4,zero
100017d4:	000b883a 	mov	r5,zero
100017d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100017dc:	0009883a 	mov	r4,zero
100017e0:	01403fc4 	movi	r5,255
100017e4:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100017e8:	0009883a 	mov	r4,zero
100017ec:	01415704 	movi	r5,1372
100017f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100017f4:	0009883a 	mov	r4,zero
100017f8:	01400204 	movi	r5,8
100017fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001800:	0009883a 	mov	r4,zero
10001804:	0140a404 	movi	r5,656
10001808:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000180c:	0009883a 	mov	r4,zero
10001810:	01401044 	movi	r5,65
10001814:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001818:	0009883a 	mov	r4,zero
1000181c:	014004c4 	movi	r5,19
10001820:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001824:	0009883a 	mov	r4,zero
10001828:	01414804 	movi	r5,1312
1000182c:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001830:	0009883a 	mov	r4,zero
10001834:	01415904 	movi	r5,1380
10001838:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000183c:	0009883a 	mov	r4,zero
10001840:	01400204 	movi	r5,8
10001844:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001848:	0009883a 	mov	r4,zero
1000184c:	0140a404 	movi	r5,656
10001850:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001854:	0009883a 	mov	r4,zero
10001858:	01400044 	movi	r5,1
1000185c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001860:	0009883a 	mov	r4,zero
10001864:	014004c4 	movi	r5,19
10001868:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000186c:	0009883a 	mov	r4,zero
10001870:	01414b04 	movi	r5,1324
10001874:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001878:	0009883a 	mov	r4,zero
1000187c:	01415b04 	movi	r5,1388
10001880:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001884:	0009883a 	mov	r4,zero
10001888:	01400204 	movi	r5,8
1000188c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001890:	0009883a 	mov	r4,zero
10001894:	0140a404 	movi	r5,656
10001898:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000189c:	0009883a 	mov	r4,zero
100018a0:	01401044 	movi	r5,65
100018a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100018a8:	0009883a 	mov	r4,zero
100018ac:	014004c4 	movi	r5,19
100018b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100018b4:	0009883a 	mov	r4,zero
100018b8:	01414e04 	movi	r5,1336
100018bc:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100018c0:	0009883a 	mov	r4,zero
100018c4:	01415d04 	movi	r5,1396
100018c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100018cc:	0009883a 	mov	r4,zero
100018d0:	01400204 	movi	r5,8
100018d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100018d8:	0009883a 	mov	r4,zero
100018dc:	0140a404 	movi	r5,656
100018e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100018e4:	0009883a 	mov	r4,zero
100018e8:	01400044 	movi	r5,1
100018ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100018f0:	0009883a 	mov	r4,zero
100018f4:	014004c4 	movi	r5,19
100018f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100018fc:	0009883a 	mov	r4,zero
10001900:	01415104 	movi	r5,1348
10001904:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001908:	0009883a 	mov	r4,zero
1000190c:	01415f04 	movi	r5,1404
10001910:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001914:	0009883a 	mov	r4,zero
10001918:	01400084 	movi	r5,2
1000191c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001920:	0009883a 	mov	r4,zero
10001924:	0140a404 	movi	r5,656
10001928:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000192c:	0009883a 	mov	r4,zero
10001930:	01401044 	movi	r5,65
10001934:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001938:	0009883a 	mov	r4,zero
1000193c:	014004c4 	movi	r5,19
10001940:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001944:	0009883a 	mov	r4,zero
10001948:	01415404 	movi	r5,1360
1000194c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001950:	0009883a 	mov	r4,zero
10001954:	000b883a 	mov	r5,zero
10001958:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000195c:	0009883a 	mov	r4,zero
10001960:	000b883a 	mov	r5,zero
10001964:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001968:	0009883a 	mov	r4,zero
1000196c:	01408404 	movi	r5,528
10001970:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001974:	0009883a 	mov	r4,zero
10001978:	01401044 	movi	r5,65
1000197c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001980:	0009883a 	mov	r4,zero
10001984:	014004c4 	movi	r5,19
10001988:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000198c:	0009883a 	mov	r4,zero
10001990:	000b883a 	mov	r5,zero
10001994:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001998:	01006c04 	movi	r4,432
1000199c:	01414004 	movi	r5,1280
100019a0:	000106c0 	call	1000106c <UsbWrite>
}
100019a4:	e037883a 	mov	sp,fp
100019a8:	dfc00117 	ldw	ra,4(sp)
100019ac:	df000017 	ldw	fp,0(sp)
100019b0:	dec00204 	addi	sp,sp,8
100019b4:	f800283a 	ret

100019b8 <UsbSetConfig>:

void UsbSetConfig()
{
100019b8:	defffe04 	addi	sp,sp,-8
100019bc:	dfc00115 	stw	ra,4(sp)
100019c0:	df000015 	stw	fp,0(sp)
100019c4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100019c8:	01000084 	movi	r4,2
100019cc:	01414004 	movi	r5,1280
100019d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100019d4:	0009883a 	mov	r4,zero
100019d8:	01414304 	movi	r5,1292
100019dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100019e0:	0009883a 	mov	r4,zero
100019e4:	01400204 	movi	r5,8
100019e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100019ec:	0009883a 	mov	r4,zero
100019f0:	0140b404 	movi	r5,720
100019f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100019f8:	0009883a 	mov	r4,zero
100019fc:	01400044 	movi	r5,1
10001a00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a04:	0009883a 	mov	r4,zero
10001a08:	014004c4 	movi	r5,19
10001a0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001a10:	0009883a 	mov	r4,zero
10001a14:	01414504 	movi	r5,1300
10001a18:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001a1c:	0009883a 	mov	r4,zero
10001a20:	01424004 	movi	r5,2304
10001a24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001a28:	0009883a 	mov	r4,zero
10001a2c:	01400044 	movi	r5,1
10001a30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a34:	0009883a 	mov	r4,zero
10001a38:	000b883a 	mov	r5,zero
10001a3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a40:	0009883a 	mov	r4,zero
10001a44:	000b883a 	mov	r5,zero
10001a48:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001a4c:	0009883a 	mov	r4,zero
10001a50:	000b883a 	mov	r5,zero
10001a54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001a58:	0009883a 	mov	r4,zero
10001a5c:	000b883a 	mov	r5,zero
10001a60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001a64:	0009883a 	mov	r4,zero
10001a68:	0140a404 	movi	r5,656
10001a6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001a70:	0009883a 	mov	r4,zero
10001a74:	01401044 	movi	r5,65
10001a78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a7c:	0009883a 	mov	r4,zero
10001a80:	014004c4 	movi	r5,19
10001a84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a88:	0009883a 	mov	r4,zero
10001a8c:	000b883a 	mov	r5,zero
10001a90:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a94:	01006c04 	movi	r4,432
10001a98:	01414004 	movi	r5,1280
10001a9c:	000106c0 	call	1000106c <UsbWrite>

}
10001aa0:	e037883a 	mov	sp,fp
10001aa4:	dfc00117 	ldw	ra,4(sp)
10001aa8:	df000017 	ldw	fp,0(sp)
10001aac:	dec00204 	addi	sp,sp,8
10001ab0:	f800283a 	ret

10001ab4 <UsbClassRequest>:

void UsbClassRequest()
{
10001ab4:	defffe04 	addi	sp,sp,-8
10001ab8:	dfc00115 	stw	ra,4(sp)
10001abc:	df000015 	stw	fp,0(sp)
10001ac0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001ac4:	01000084 	movi	r4,2
10001ac8:	01414004 	movi	r5,1280
10001acc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001ad0:	0009883a 	mov	r4,zero
10001ad4:	01414304 	movi	r5,1292
10001ad8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001adc:	0009883a 	mov	r4,zero
10001ae0:	01400204 	movi	r5,8
10001ae4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001ae8:	0009883a 	mov	r4,zero
10001aec:	0140b404 	movi	r5,720
10001af0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001af4:	0009883a 	mov	r4,zero
10001af8:	01400044 	movi	r5,1
10001afc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b00:	0009883a 	mov	r4,zero
10001b04:	014004c4 	movi	r5,19
10001b08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b0c:	0009883a 	mov	r4,zero
10001b10:	01414504 	movi	r5,1300
10001b14:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001b18:	0009883a 	mov	r4,zero
10001b1c:	01428844 	movi	r5,2593
10001b20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001b24:	0009883a 	mov	r4,zero
10001b28:	000b883a 	mov	r5,zero
10001b2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b30:	0009883a 	mov	r4,zero
10001b34:	000b883a 	mov	r5,zero
10001b38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b3c:	0009883a 	mov	r4,zero
10001b40:	000b883a 	mov	r5,zero
10001b44:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001b48:	0009883a 	mov	r4,zero
10001b4c:	000b883a 	mov	r5,zero
10001b50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001b54:	0009883a 	mov	r4,zero
10001b58:	000b883a 	mov	r5,zero
10001b5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001b60:	0009883a 	mov	r4,zero
10001b64:	0140a404 	movi	r5,656
10001b68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001b6c:	0009883a 	mov	r4,zero
10001b70:	01401044 	movi	r5,65
10001b74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b78:	0009883a 	mov	r4,zero
10001b7c:	014004c4 	movi	r5,19
10001b80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b84:	0009883a 	mov	r4,zero
10001b88:	000b883a 	mov	r5,zero
10001b8c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b90:	01006c04 	movi	r4,432
10001b94:	01414004 	movi	r5,1280
10001b98:	000106c0 	call	1000106c <UsbWrite>
}
10001b9c:	e037883a 	mov	sp,fp
10001ba0:	dfc00117 	ldw	ra,4(sp)
10001ba4:	df000017 	ldw	fp,0(sp)
10001ba8:	dec00204 	addi	sp,sp,8
10001bac:	f800283a 	ret

10001bb0 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001bb0:	defffe04 	addi	sp,sp,-8
10001bb4:	dfc00115 	stw	ra,4(sp)
10001bb8:	df000015 	stw	fp,0(sp)
10001bbc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001bc0:	01000084 	movi	r4,2
10001bc4:	01414004 	movi	r5,1280
10001bc8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001bcc:	0009883a 	mov	r4,zero
10001bd0:	01414304 	movi	r5,1292
10001bd4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001bd8:	0009883a 	mov	r4,zero
10001bdc:	01400204 	movi	r5,8
10001be0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001be4:	0009883a 	mov	r4,zero
10001be8:	0140b404 	movi	r5,720
10001bec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001bf0:	0009883a 	mov	r4,zero
10001bf4:	01400044 	movi	r5,1
10001bf8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001bfc:	0009883a 	mov	r4,zero
10001c00:	014004c4 	movi	r5,19
10001c04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c08:	0009883a 	mov	r4,zero
10001c0c:	01414504 	movi	r5,1300
10001c10:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001c14:	0009883a 	mov	r4,zero
10001c18:	0141a044 	movi	r5,1665
10001c1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001c20:	0009883a 	mov	r4,zero
10001c24:	01484004 	movi	r5,8448
10001c28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001c2c:	0009883a 	mov	r4,zero
10001c30:	000b883a 	mov	r5,zero
10001c34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001c38:	0009883a 	mov	r4,zero
10001c3c:	01401ec4 	movi	r5,123
10001c40:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001c44:	0009883a 	mov	r4,zero
10001c48:	01415104 	movi	r5,1348
10001c4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001c50:	0009883a 	mov	r4,zero
10001c54:	01400204 	movi	r5,8
10001c58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001c5c:	0009883a 	mov	r4,zero
10001c60:	0140a404 	movi	r5,656
10001c64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001c68:	0009883a 	mov	r4,zero
10001c6c:	01401044 	movi	r5,65
10001c70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001c74:	0009883a 	mov	r4,zero
10001c78:	014004c4 	movi	r5,19
10001c7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001c80:	0009883a 	mov	r4,zero
10001c84:	01414804 	movi	r5,1312
10001c88:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001c8c:	0009883a 	mov	r4,zero
10001c90:	000b883a 	mov	r5,zero
10001c94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001c98:	0009883a 	mov	r4,zero
10001c9c:	000b883a 	mov	r5,zero
10001ca0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001ca4:	0009883a 	mov	r4,zero
10001ca8:	01408404 	movi	r5,528
10001cac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001cb0:	0009883a 	mov	r4,zero
10001cb4:	01401044 	movi	r5,65
10001cb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001cbc:	0009883a 	mov	r4,zero
10001cc0:	014004c4 	movi	r5,19
10001cc4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001cc8:	0009883a 	mov	r4,zero
10001ccc:	000b883a 	mov	r5,zero
10001cd0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001cd4:	01006c04 	movi	r4,432
10001cd8:	01414004 	movi	r5,1280
10001cdc:	000106c0 	call	1000106c <UsbWrite>

}
10001ce0:	e037883a 	mov	sp,fp
10001ce4:	dfc00117 	ldw	ra,4(sp)
10001ce8:	df000017 	ldw	fp,0(sp)
10001cec:	dec00204 	addi	sp,sp,8
10001cf0:	f800283a 	ret

10001cf4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001cf4:	defffe04 	addi	sp,sp,-8
10001cf8:	dfc00115 	stw	ra,4(sp)
10001cfc:	df000015 	stw	fp,0(sp)
10001d00:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d04:	01000084 	movi	r4,2
10001d08:	01414004 	movi	r5,1280
10001d0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001d10:	0009883a 	mov	r4,zero
10001d14:	01414304 	movi	r5,1292
10001d18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001d1c:	0009883a 	mov	r4,zero
10001d20:	01400204 	movi	r5,8
10001d24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001d28:	0009883a 	mov	r4,zero
10001d2c:	0140b404 	movi	r5,720
10001d30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001d34:	0009883a 	mov	r4,zero
10001d38:	01400044 	movi	r5,1
10001d3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d40:	0009883a 	mov	r4,zero
10001d44:	014004c4 	movi	r5,19
10001d48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001d4c:	0009883a 	mov	r4,zero
10001d50:	01414504 	movi	r5,1300
10001d54:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001d58:	0009883a 	mov	r4,zero
10001d5c:	0141a044 	movi	r5,1665
10001d60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001d64:	0009883a 	mov	r4,zero
10001d68:	01488004 	movi	r5,8704
10001d6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001d70:	0009883a 	mov	r4,zero
10001d74:	000b883a 	mov	r5,zero
10001d78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001d7c:	0009883a 	mov	r4,zero
10001d80:	01401ec4 	movi	r5,123
10001d84:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001d88:	0009883a 	mov	r4,zero
10001d8c:	01416004 	movi	r5,1408
10001d90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001d94:	0009883a 	mov	r4,zero
10001d98:	01400204 	movi	r5,8
10001d9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001da0:	0009883a 	mov	r4,zero
10001da4:	0140a404 	movi	r5,656
10001da8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001dac:	0009883a 	mov	r4,zero
10001db0:	01401044 	movi	r5,65
10001db4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001db8:	0009883a 	mov	r4,zero
10001dbc:	014004c4 	movi	r5,19
10001dc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001dc4:	0009883a 	mov	r4,zero
10001dc8:	01414804 	movi	r5,1312
10001dcc:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001dd0:	0009883a 	mov	r4,zero
10001dd4:	01416204 	movi	r5,1416
10001dd8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001ddc:	0009883a 	mov	r4,zero
10001de0:	01400204 	movi	r5,8
10001de4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001de8:	0009883a 	mov	r4,zero
10001dec:	0140a404 	movi	r5,656
10001df0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001df4:	0009883a 	mov	r4,zero
10001df8:	01400044 	movi	r5,1
10001dfc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001e00:	0009883a 	mov	r4,zero
10001e04:	014004c4 	movi	r5,19
10001e08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001e0c:	0009883a 	mov	r4,zero
10001e10:	01414b04 	movi	r5,1324
10001e14:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001e18:	0009883a 	mov	r4,zero
10001e1c:	01416404 	movi	r5,1424
10001e20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001e24:	0009883a 	mov	r4,zero
10001e28:	01400204 	movi	r5,8
10001e2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001e30:	0009883a 	mov	r4,zero
10001e34:	0140a404 	movi	r5,656
10001e38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001e3c:	0009883a 	mov	r4,zero
10001e40:	01401044 	movi	r5,65
10001e44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001e48:	0009883a 	mov	r4,zero
10001e4c:	014004c4 	movi	r5,19
10001e50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001e54:	0009883a 	mov	r4,zero
10001e58:	01414e04 	movi	r5,1336
10001e5c:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001e60:	0009883a 	mov	r4,zero
10001e64:	01416604 	movi	r5,1432
10001e68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001e6c:	0009883a 	mov	r4,zero
10001e70:	01400204 	movi	r5,8
10001e74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001e78:	0009883a 	mov	r4,zero
10001e7c:	0140a404 	movi	r5,656
10001e80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001e84:	0009883a 	mov	r4,zero
10001e88:	01400044 	movi	r5,1
10001e8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001e90:	0009883a 	mov	r4,zero
10001e94:	014004c4 	movi	r5,19
10001e98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001e9c:	0009883a 	mov	r4,zero
10001ea0:	01415104 	movi	r5,1348
10001ea4:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001ea8:	0009883a 	mov	r4,zero
10001eac:	01416804 	movi	r5,1440
10001eb0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001eb4:	0009883a 	mov	r4,zero
10001eb8:	01400204 	movi	r5,8
10001ebc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001ec0:	0009883a 	mov	r4,zero
10001ec4:	0140a404 	movi	r5,656
10001ec8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001ecc:	0009883a 	mov	r4,zero
10001ed0:	01401044 	movi	r5,65
10001ed4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001ed8:	0009883a 	mov	r4,zero
10001edc:	014004c4 	movi	r5,19
10001ee0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001ee4:	0009883a 	mov	r4,zero
10001ee8:	01415404 	movi	r5,1360
10001eec:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10001ef0:	0009883a 	mov	r4,zero
10001ef4:	01416a04 	movi	r5,1448
10001ef8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001efc:	0009883a 	mov	r4,zero
10001f00:	01400204 	movi	r5,8
10001f04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f08:	0009883a 	mov	r4,zero
10001f0c:	0140a404 	movi	r5,656
10001f10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001f14:	0009883a 	mov	r4,zero
10001f18:	01400044 	movi	r5,1
10001f1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001f20:	0009883a 	mov	r4,zero
10001f24:	014004c4 	movi	r5,19
10001f28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10001f2c:	0009883a 	mov	r4,zero
10001f30:	01415704 	movi	r5,1372
10001f34:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10001f38:	0009883a 	mov	r4,zero
10001f3c:	01416c04 	movi	r5,1456
10001f40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001f44:	0009883a 	mov	r4,zero
10001f48:	01400204 	movi	r5,8
10001f4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10001f50:	0009883a 	mov	r4,zero
10001f54:	0140a404 	movi	r5,656
10001f58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10001f5c:	0009883a 	mov	r4,zero
10001f60:	01401044 	movi	r5,65
10001f64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001f68:	0009883a 	mov	r4,zero
10001f6c:	014004c4 	movi	r5,19
10001f70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10001f74:	0009883a 	mov	r4,zero
10001f78:	01415a04 	movi	r5,1384
10001f7c:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10001f80:	0009883a 	mov	r4,zero
10001f84:	01416e04 	movi	r5,1464
10001f88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10001f8c:	0009883a 	mov	r4,zero
10001f90:	014000c4 	movi	r5,3
10001f94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001f98:	0009883a 	mov	r4,zero
10001f9c:	0140a404 	movi	r5,656
10001fa0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	01400044 	movi	r5,1
10001fac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	014004c4 	movi	r5,19
10001fb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	01415d04 	movi	r5,1396
10001fc4:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10001fc8:	0009883a 	mov	r4,zero
10001fcc:	000b883a 	mov	r5,zero
10001fd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001fd4:	0009883a 	mov	r4,zero
10001fd8:	000b883a 	mov	r5,zero
10001fdc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	01408404 	movi	r5,528
10001fe8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001fec:	0009883a 	mov	r4,zero
10001ff0:	01401044 	movi	r5,65
10001ff4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	014004c4 	movi	r5,19
10002000:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002004:	0009883a 	mov	r4,zero
10002008:	000b883a 	mov	r5,zero
1000200c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002010:	01006c04 	movi	r4,432
10002014:	01414004 	movi	r5,1280
10002018:	000106c0 	call	1000106c <UsbWrite>

}
1000201c:	e037883a 	mov	sp,fp
10002020:	dfc00117 	ldw	ra,4(sp)
10002024:	df000017 	ldw	fp,0(sp)
10002028:	dec00204 	addi	sp,sp,8
1000202c:	f800283a 	ret

10002030 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002030:	defffd04 	addi	sp,sp,-12
10002034:	dfc00215 	stw	ra,8(sp)
10002038:	df000115 	stw	fp,4(sp)
1000203c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002040:	01005104 	movi	r4,324
10002044:	00010c00 	call	100010c0 <UsbRead>
10002048:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000204c:	01005104 	movi	r4,324
10002050:	000b883a 	mov	r5,zero
10002054:	000106c0 	call	1000106c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002058:	00000d06 	br	10002090 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
1000205c:	e0bfff0b 	ldhu	r2,-4(fp)
10002060:	10000526 	beq	r2,zero,10002078 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002064:	e0bfff0b 	ldhu	r2,-4(fp)
10002068:	01040074 	movhi	r4,4097
1000206c:	21066c04 	addi	r4,r4,6576
10002070:	100b883a 	mov	r5,r2
10002074:	00021dc0 	call	100021dc <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002078:	01005104 	movi	r4,324
1000207c:	00010c00 	call	100010c0 <UsbRead>
10002080:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002084:	01005104 	movi	r4,324
10002088:	000b883a 	mov	r5,zero
1000208c:	000106c0 	call	1000106c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002090:	e0bfff0b 	ldhu	r2,-4(fp)
10002094:	10840018 	cmpnei	r2,r2,4096
10002098:	103ff01e 	bne	r2,zero,1000205c <__alt_data_end+0xf800205c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
1000209c:	e0bfff0b 	ldhu	r2,-4(fp)
}
100020a0:	e037883a 	mov	sp,fp
100020a4:	dfc00117 	ldw	ra,4(sp)
100020a8:	df000017 	ldw	fp,0(sp)
100020ac:	dec00204 	addi	sp,sp,8
100020b0:	f800283a 	ret

100020b4 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
100020b4:	defffd04 	addi	sp,sp,-12
100020b8:	dfc00215 	stw	ra,8(sp)
100020bc:	df000115 	stw	fp,4(sp)
100020c0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100020c4:	010000c4 	movi	r4,3
100020c8:	00002b40 	call	100002b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100020cc:	01005104 	movi	r4,324
100020d0:	00010c00 	call	100010c0 <UsbRead>
100020d4:	10bfffcc 	andi	r2,r2,65535
100020d8:	10840018 	cmpnei	r2,r2,4096
100020dc:	1000091e 	bne	r2,zero,10002104 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020e0:	01005104 	movi	r4,324
100020e4:	000b883a 	mov	r5,zero
100020e8:	000106c0 	call	1000106c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100020ec:	0001883a 	nop
100020f0:	010000c4 	movi	r4,3
100020f4:	00002b40 	call	100002b4 <IO_read>
100020f8:	10bfffcc 	andi	r2,r2,65535
100020fc:	1080040c 	andi	r2,r2,16
10002100:	103ffb26 	beq	r2,zero,100020f0 <__alt_data_end+0xf80020f0>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002104:	01000084 	movi	r4,2
10002108:	01414204 	movi	r5,1288
1000210c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002110:	0009883a 	mov	r4,zero
10002114:	00002b40 	call	100002b4 <IO_read>
10002118:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
1000211c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002120:	e037883a 	mov	sp,fp
10002124:	dfc00117 	ldw	ra,4(sp)
10002128:	df000017 	ldw	fp,0(sp)
1000212c:	dec00204 	addi	sp,sp,8
10002130:	f800283a 	ret

10002134 <UsbPrintMem>:


void UsbPrintMem()
{
10002134:	defffc04 	addi	sp,sp,-16
10002138:	dfc00315 	stw	ra,12(sp)
1000213c:	df000215 	stw	fp,8(sp)
10002140:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002144:	01000084 	movi	r4,2
10002148:	01414004 	movi	r5,1280
1000214c:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002150:	e03ffe15 	stw	zero,-8(fp)
10002154:	00000e06 	br	10002190 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002158:	0009883a 	mov	r4,zero
1000215c:	00002b40 	call	100002b4 <IO_read>
10002160:	10bfffcc 	andi	r2,r2,65535
10002164:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002168:	e0bffe17 	ldw	r2,-8(fp)
1000216c:	10814004 	addi	r2,r2,1280
10002170:	01040074 	movhi	r4,4097
10002174:	21067404 	addi	r4,r4,6608
10002178:	100b883a 	mov	r5,r2
1000217c:	e1bfff17 	ldw	r6,-4(fp)
10002180:	00021dc0 	call	100021dc <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002184:	e0bffe17 	ldw	r2,-8(fp)
10002188:	10800084 	addi	r2,r2,2
1000218c:	e0bffe15 	stw	r2,-8(fp)
10002190:	e0bffe17 	ldw	r2,-8(fp)
10002194:	10803250 	cmplti	r2,r2,201
10002198:	103fef1e 	bne	r2,zero,10002158 <__alt_data_end+0xf8002158>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
1000219c:	e037883a 	mov	sp,fp
100021a0:	dfc00117 	ldw	ra,4(sp)
100021a4:	df000017 	ldw	fp,0(sp)
100021a8:	dec00204 	addi	sp,sp,8
100021ac:	f800283a 	ret

100021b0 <_printf_r>:
100021b0:	defffd04 	addi	sp,sp,-12
100021b4:	dfc00015 	stw	ra,0(sp)
100021b8:	d9800115 	stw	r6,4(sp)
100021bc:	d9c00215 	stw	r7,8(sp)
100021c0:	280d883a 	mov	r6,r5
100021c4:	21400217 	ldw	r5,8(r4)
100021c8:	d9c00104 	addi	r7,sp,4
100021cc:	00023700 	call	10002370 <___vfprintf_internal_r>
100021d0:	dfc00017 	ldw	ra,0(sp)
100021d4:	dec00304 	addi	sp,sp,12
100021d8:	f800283a 	ret

100021dc <printf>:
100021dc:	defffc04 	addi	sp,sp,-16
100021e0:	dfc00015 	stw	ra,0(sp)
100021e4:	d9400115 	stw	r5,4(sp)
100021e8:	d9800215 	stw	r6,8(sp)
100021ec:	d9c00315 	stw	r7,12(sp)
100021f0:	00840074 	movhi	r2,4097
100021f4:	108de504 	addi	r2,r2,14228
100021f8:	10800017 	ldw	r2,0(r2)
100021fc:	200b883a 	mov	r5,r4
10002200:	d9800104 	addi	r6,sp,4
10002204:	11000217 	ldw	r4,8(r2)
10002208:	00044c40 	call	100044c4 <__vfprintf_internal>
1000220c:	dfc00017 	ldw	ra,0(sp)
10002210:	dec00404 	addi	sp,sp,16
10002214:	f800283a 	ret

10002218 <_puts_r>:
10002218:	defff604 	addi	sp,sp,-40
1000221c:	dc400815 	stw	r17,32(sp)
10002220:	2023883a 	mov	r17,r4
10002224:	2809883a 	mov	r4,r5
10002228:	dc000715 	stw	r16,28(sp)
1000222c:	dfc00915 	stw	ra,36(sp)
10002230:	2821883a 	mov	r16,r5
10002234:	00022e40 	call	100022e4 <strlen>
10002238:	00c40074 	movhi	r3,4097
1000223c:	18cde504 	addi	r3,r3,14228
10002240:	18c00017 	ldw	r3,0(r3)
10002244:	11000044 	addi	r4,r2,1
10002248:	d8800115 	stw	r2,4(sp)
1000224c:	18c00217 	ldw	r3,8(r3)
10002250:	00840074 	movhi	r2,4097
10002254:	10867904 	addi	r2,r2,6628
10002258:	d8800215 	stw	r2,8(sp)
1000225c:	1940030b 	ldhu	r5,12(r3)
10002260:	00800044 	movi	r2,1
10002264:	d8800315 	stw	r2,12(sp)
10002268:	00800084 	movi	r2,2
1000226c:	d8800515 	stw	r2,20(sp)
10002270:	dc000015 	stw	r16,0(sp)
10002274:	d9000615 	stw	r4,24(sp)
10002278:	dec00415 	stw	sp,16(sp)
1000227c:	2888000c 	andi	r2,r5,8192
10002280:	1000061e 	bne	r2,zero,1000229c <_puts_r+0x84>
10002284:	19001917 	ldw	r4,100(r3)
10002288:	00b7ffc4 	movi	r2,-8193
1000228c:	29480014 	ori	r5,r5,8192
10002290:	2084703a 	and	r2,r4,r2
10002294:	1940030d 	sth	r5,12(r3)
10002298:	18801915 	stw	r2,100(r3)
1000229c:	89400217 	ldw	r5,8(r17)
100022a0:	8809883a 	mov	r4,r17
100022a4:	d9800404 	addi	r6,sp,16
100022a8:	00068a80 	call	100068a8 <__sfvwrite_r>
100022ac:	1000061e 	bne	r2,zero,100022c8 <_puts_r+0xb0>
100022b0:	00800284 	movi	r2,10
100022b4:	dfc00917 	ldw	ra,36(sp)
100022b8:	dc400817 	ldw	r17,32(sp)
100022bc:	dc000717 	ldw	r16,28(sp)
100022c0:	dec00a04 	addi	sp,sp,40
100022c4:	f800283a 	ret
100022c8:	00bfffc4 	movi	r2,-1
100022cc:	003ff906 	br	100022b4 <__alt_data_end+0xf80022b4>

100022d0 <puts>:
100022d0:	00840074 	movhi	r2,4097
100022d4:	108de504 	addi	r2,r2,14228
100022d8:	200b883a 	mov	r5,r4
100022dc:	11000017 	ldw	r4,0(r2)
100022e0:	00022181 	jmpi	10002218 <_puts_r>

100022e4 <strlen>:
100022e4:	208000cc 	andi	r2,r4,3
100022e8:	10001d26 	beq	r2,zero,10002360 <strlen+0x7c>
100022ec:	20800007 	ldb	r2,0(r4)
100022f0:	10001d26 	beq	r2,zero,10002368 <strlen+0x84>
100022f4:	2005883a 	mov	r2,r4
100022f8:	00000206 	br	10002304 <strlen+0x20>
100022fc:	10c00007 	ldb	r3,0(r2)
10002300:	18001526 	beq	r3,zero,10002358 <strlen+0x74>
10002304:	10800044 	addi	r2,r2,1
10002308:	10c000cc 	andi	r3,r2,3
1000230c:	183ffb1e 	bne	r3,zero,100022fc <__alt_data_end+0xf80022fc>
10002310:	10c00017 	ldw	r3,0(r2)
10002314:	01ffbff4 	movhi	r7,65279
10002318:	39ffbfc4 	addi	r7,r7,-257
1000231c:	01a02074 	movhi	r6,32897
10002320:	31a02004 	addi	r6,r6,-32640
10002324:	00000206 	br	10002330 <strlen+0x4c>
10002328:	10800104 	addi	r2,r2,4
1000232c:	10c00017 	ldw	r3,0(r2)
10002330:	19cb883a 	add	r5,r3,r7
10002334:	00c6303a 	nor	r3,zero,r3
10002338:	28c6703a 	and	r3,r5,r3
1000233c:	1986703a 	and	r3,r3,r6
10002340:	183ff926 	beq	r3,zero,10002328 <__alt_data_end+0xf8002328>
10002344:	10c00007 	ldb	r3,0(r2)
10002348:	18000326 	beq	r3,zero,10002358 <strlen+0x74>
1000234c:	10800044 	addi	r2,r2,1
10002350:	10c00007 	ldb	r3,0(r2)
10002354:	183ffd1e 	bne	r3,zero,1000234c <__alt_data_end+0xf800234c>
10002358:	1105c83a 	sub	r2,r2,r4
1000235c:	f800283a 	ret
10002360:	2005883a 	mov	r2,r4
10002364:	003fea06 	br	10002310 <__alt_data_end+0xf8002310>
10002368:	0005883a 	mov	r2,zero
1000236c:	f800283a 	ret

10002370 <___vfprintf_internal_r>:
10002370:	defeb604 	addi	sp,sp,-1320
10002374:	dfc14915 	stw	ra,1316(sp)
10002378:	dcc14315 	stw	r19,1292(sp)
1000237c:	dc414115 	stw	r17,1284(sp)
10002380:	d9012c15 	stw	r4,1200(sp)
10002384:	2827883a 	mov	r19,r5
10002388:	3023883a 	mov	r17,r6
1000238c:	d9c12f15 	stw	r7,1212(sp)
10002390:	df014815 	stw	fp,1312(sp)
10002394:	ddc14715 	stw	r23,1308(sp)
10002398:	dd814615 	stw	r22,1304(sp)
1000239c:	dd414515 	stw	r21,1300(sp)
100023a0:	dd014415 	stw	r20,1296(sp)
100023a4:	dc814215 	stw	r18,1288(sp)
100023a8:	dc014015 	stw	r16,1280(sp)
100023ac:	0006f540 	call	10006f54 <_localeconv_r>
100023b0:	10800017 	ldw	r2,0(r2)
100023b4:	1009883a 	mov	r4,r2
100023b8:	d8813415 	stw	r2,1232(sp)
100023bc:	00022e40 	call	100022e4 <strlen>
100023c0:	d8813815 	stw	r2,1248(sp)
100023c4:	d8812c17 	ldw	r2,1200(sp)
100023c8:	10000226 	beq	r2,zero,100023d4 <___vfprintf_internal_r+0x64>
100023cc:	10800e17 	ldw	r2,56(r2)
100023d0:	10010826 	beq	r2,zero,100027f4 <___vfprintf_internal_r+0x484>
100023d4:	9880030b 	ldhu	r2,12(r19)
100023d8:	1108000c 	andi	r4,r2,8192
100023dc:	1007883a 	mov	r3,r2
100023e0:	2000071e 	bne	r4,zero,10002400 <___vfprintf_internal_r+0x90>
100023e4:	99001917 	ldw	r4,100(r19)
100023e8:	10c80014 	ori	r3,r2,8192
100023ec:	00b7ffc4 	movi	r2,-8193
100023f0:	2088703a 	and	r4,r4,r2
100023f4:	98c0030d 	sth	r3,12(r19)
100023f8:	1805883a 	mov	r2,r3
100023fc:	99001915 	stw	r4,100(r19)
10002400:	1900020c 	andi	r4,r3,8
10002404:	2000ab26 	beq	r4,zero,100026b4 <___vfprintf_internal_r+0x344>
10002408:	99000417 	ldw	r4,16(r19)
1000240c:	2000a926 	beq	r4,zero,100026b4 <___vfprintf_internal_r+0x344>
10002410:	18c0068c 	andi	r3,r3,26
10002414:	01000284 	movi	r4,10
10002418:	1900af26 	beq	r3,r4,100026d8 <___vfprintf_internal_r+0x368>
1000241c:	d9010dc4 	addi	r4,sp,1079
10002420:	d9410e04 	addi	r5,sp,1080
10002424:	d8800404 	addi	r2,sp,16
10002428:	2907c83a 	sub	r3,r5,r4
1000242c:	d9012815 	stw	r4,1184(sp)
10002430:	d9412915 	stw	r5,1188(sp)
10002434:	d8811e15 	stw	r2,1144(sp)
10002438:	d8012015 	stw	zero,1152(sp)
1000243c:	d8011f15 	stw	zero,1148(sp)
10002440:	d8013515 	stw	zero,1236(sp)
10002444:	d8013715 	stw	zero,1244(sp)
10002448:	d8013915 	stw	zero,1252(sp)
1000244c:	d8013b15 	stw	zero,1260(sp)
10002450:	d8013a15 	stw	zero,1256(sp)
10002454:	d8013115 	stw	zero,1220(sp)
10002458:	1011883a 	mov	r8,r2
1000245c:	05c40074 	movhi	r23,4097
10002460:	bdc68a84 	addi	r23,r23,6698
10002464:	d8c13d15 	stw	r3,1268(sp)
10002468:	88800007 	ldb	r2,0(r17)
1000246c:	10021126 	beq	r2,zero,10002cb4 <___vfprintf_internal_r+0x944>
10002470:	00c00944 	movi	r3,37
10002474:	8821883a 	mov	r16,r17
10002478:	10c0021e 	bne	r2,r3,10002484 <___vfprintf_internal_r+0x114>
1000247c:	00001406 	br	100024d0 <___vfprintf_internal_r+0x160>
10002480:	10c00326 	beq	r2,r3,10002490 <___vfprintf_internal_r+0x120>
10002484:	84000044 	addi	r16,r16,1
10002488:	80800007 	ldb	r2,0(r16)
1000248c:	103ffc1e 	bne	r2,zero,10002480 <__alt_data_end+0xf8002480>
10002490:	8465c83a 	sub	r18,r16,r17
10002494:	90000e26 	beq	r18,zero,100024d0 <___vfprintf_internal_r+0x160>
10002498:	d8c12017 	ldw	r3,1152(sp)
1000249c:	d8811f17 	ldw	r2,1148(sp)
100024a0:	44400015 	stw	r17,0(r8)
100024a4:	1c87883a 	add	r3,r3,r18
100024a8:	10800044 	addi	r2,r2,1
100024ac:	d8c12015 	stw	r3,1152(sp)
100024b0:	44800115 	stw	r18,4(r8)
100024b4:	d8811f15 	stw	r2,1148(sp)
100024b8:	00c001c4 	movi	r3,7
100024bc:	1880bb16 	blt	r3,r2,100027ac <___vfprintf_internal_r+0x43c>
100024c0:	42000204 	addi	r8,r8,8
100024c4:	d9013117 	ldw	r4,1220(sp)
100024c8:	2489883a 	add	r4,r4,r18
100024cc:	d9013115 	stw	r4,1220(sp)
100024d0:	80800007 	ldb	r2,0(r16)
100024d4:	1000bc26 	beq	r2,zero,100027c8 <___vfprintf_internal_r+0x458>
100024d8:	053fffc4 	movi	r20,-1
100024dc:	84400044 	addi	r17,r16,1
100024e0:	84800047 	ldb	r18,1(r16)
100024e4:	d8012785 	stb	zero,1182(sp)
100024e8:	002d883a 	mov	r22,zero
100024ec:	d8013015 	stw	zero,1216(sp)
100024f0:	d8012a15 	stw	zero,1192(sp)
100024f4:	04001604 	movi	r16,88
100024f8:	05400244 	movi	r21,9
100024fc:	4039883a 	mov	fp,r8
10002500:	a007883a 	mov	r3,r20
10002504:	8c400044 	addi	r17,r17,1
10002508:	90bff804 	addi	r2,r18,-32
1000250c:	80832036 	bltu	r16,r2,10003190 <___vfprintf_internal_r+0xe20>
10002510:	1085883a 	add	r2,r2,r2
10002514:	1085883a 	add	r2,r2,r2
10002518:	01440034 	movhi	r5,4096
1000251c:	29494b04 	addi	r5,r5,9516
10002520:	1145883a 	add	r2,r2,r5
10002524:	10800017 	ldw	r2,0(r2)
10002528:	1000683a 	jmp	r2
1000252c:	10002f30 	cmpltui	zero,r2,188
10002530:	10003190 	cmplti	zero,r2,198
10002534:	10003190 	cmplti	zero,r2,198
10002538:	10002f4c 	andi	zero,r2,189
1000253c:	10003190 	cmplti	zero,r2,198
10002540:	10003190 	cmplti	zero,r2,198
10002544:	10003190 	cmplti	zero,r2,198
10002548:	10003190 	cmplti	zero,r2,198
1000254c:	10003190 	cmplti	zero,r2,198
10002550:	10003190 	cmplti	zero,r2,198
10002554:	10002f60 	cmpeqi	zero,r2,189
10002558:	10002800 	call	11000280 <_gp+0xfe4af0>
1000255c:	10003190 	cmplti	zero,r2,198
10002560:	100026a0 	cmpeqi	zero,r2,154
10002564:	1000280c 	andi	zero,r2,160
10002568:	10003190 	cmplti	zero,r2,198
1000256c:	1000285c 	xori	zero,r2,161
10002570:	10002d6c 	andhi	zero,r2,181
10002574:	10002d6c 	andhi	zero,r2,181
10002578:	10002d6c 	andhi	zero,r2,181
1000257c:	10002d6c 	andhi	zero,r2,181
10002580:	10002d6c 	andhi	zero,r2,181
10002584:	10002d6c 	andhi	zero,r2,181
10002588:	10002d6c 	andhi	zero,r2,181
1000258c:	10002d6c 	andhi	zero,r2,181
10002590:	10002d6c 	andhi	zero,r2,181
10002594:	10003190 	cmplti	zero,r2,198
10002598:	10003190 	cmplti	zero,r2,198
1000259c:	10003190 	cmplti	zero,r2,198
100025a0:	10003190 	cmplti	zero,r2,198
100025a4:	10003190 	cmplti	zero,r2,198
100025a8:	10003190 	cmplti	zero,r2,198
100025ac:	10003190 	cmplti	zero,r2,198
100025b0:	10003190 	cmplti	zero,r2,198
100025b4:	10003190 	cmplti	zero,r2,198
100025b8:	10003190 	cmplti	zero,r2,198
100025bc:	10002870 	cmpltui	zero,r2,161
100025c0:	10002cbc 	xorhi	zero,r2,178
100025c4:	10003190 	cmplti	zero,r2,198
100025c8:	10002cbc 	xorhi	zero,r2,178
100025cc:	10003190 	cmplti	zero,r2,198
100025d0:	10003190 	cmplti	zero,r2,198
100025d4:	10003190 	cmplti	zero,r2,198
100025d8:	10003190 	cmplti	zero,r2,198
100025dc:	10002db4 	orhi	zero,r2,182
100025e0:	10003190 	cmplti	zero,r2,198
100025e4:	10003190 	cmplti	zero,r2,198
100025e8:	10002dc8 	cmpgei	zero,r2,183
100025ec:	10003190 	cmplti	zero,r2,198
100025f0:	10003190 	cmplti	zero,r2,198
100025f4:	10003190 	cmplti	zero,r2,198
100025f8:	10003190 	cmplti	zero,r2,198
100025fc:	10003190 	cmplti	zero,r2,198
10002600:	10002e10 	cmplti	zero,r2,184
10002604:	10003190 	cmplti	zero,r2,198
10002608:	10003190 	cmplti	zero,r2,198
1000260c:	10002f84 	addi	zero,r2,190
10002610:	10003190 	cmplti	zero,r2,198
10002614:	10003190 	cmplti	zero,r2,198
10002618:	10003190 	cmplti	zero,r2,198
1000261c:	10003190 	cmplti	zero,r2,198
10002620:	10003190 	cmplti	zero,r2,198
10002624:	10003190 	cmplti	zero,r2,198
10002628:	10003190 	cmplti	zero,r2,198
1000262c:	10003190 	cmplti	zero,r2,198
10002630:	10003190 	cmplti	zero,r2,198
10002634:	10003190 	cmplti	zero,r2,198
10002638:	10002e88 	cmpgei	zero,r2,186
1000263c:	10003000 	call	11000300 <_gp+0xfe4b70>
10002640:	10002cbc 	xorhi	zero,r2,178
10002644:	10002cbc 	xorhi	zero,r2,178
10002648:	10002cbc 	xorhi	zero,r2,178
1000264c:	10002fcc 	andi	zero,r2,191
10002650:	10003000 	call	11000300 <_gp+0xfe4b70>
10002654:	10003190 	cmplti	zero,r2,198
10002658:	10003190 	cmplti	zero,r2,198
1000265c:	10002fe0 	cmpeqi	zero,r2,191
10002660:	10003190 	cmplti	zero,r2,198
10002664:	10002e50 	cmplti	zero,r2,185
10002668:	10003110 	cmplti	zero,r2,196
1000266c:	100030bc 	xorhi	zero,r2,194
10002670:	10003040 	call	11000304 <_gp+0xfe4b74>
10002674:	10003190 	cmplti	zero,r2,198
10002678:	10003054 	ori	zero,r2,193
1000267c:	10003190 	cmplti	zero,r2,198
10002680:	10003150 	cmplti	zero,r2,197
10002684:	10003190 	cmplti	zero,r2,198
10002688:	10003190 	cmplti	zero,r2,198
1000268c:	10002ec8 	cmpgei	zero,r2,187
10002690:	d9413017 	ldw	r5,1216(sp)
10002694:	d8812f15 	stw	r2,1212(sp)
10002698:	014bc83a 	sub	r5,zero,r5
1000269c:	d9413015 	stw	r5,1216(sp)
100026a0:	d8812a17 	ldw	r2,1192(sp)
100026a4:	10800114 	ori	r2,r2,4
100026a8:	d8812a15 	stw	r2,1192(sp)
100026ac:	8c800007 	ldb	r18,0(r17)
100026b0:	003f9406 	br	10002504 <__alt_data_end+0xf8002504>
100026b4:	d9012c17 	ldw	r4,1200(sp)
100026b8:	980b883a 	mov	r5,r19
100026bc:	00044e80 	call	100044e8 <__swsetup_r>
100026c0:	10002d1e 	bne	r2,zero,10002778 <___vfprintf_internal_r+0x408>
100026c4:	9880030b 	ldhu	r2,12(r19)
100026c8:	01000284 	movi	r4,10
100026cc:	1007883a 	mov	r3,r2
100026d0:	18c0068c 	andi	r3,r3,26
100026d4:	193f511e 	bne	r3,r4,1000241c <__alt_data_end+0xf800241c>
100026d8:	98c0038b 	ldhu	r3,14(r19)
100026dc:	193fffcc 	andi	r4,r3,65535
100026e0:	2120001c 	xori	r4,r4,32768
100026e4:	21200004 	addi	r4,r4,-32768
100026e8:	203f4c16 	blt	r4,zero,1000241c <__alt_data_end+0xf800241c>
100026ec:	9ac01917 	ldw	r11,100(r19)
100026f0:	9a800717 	ldw	r10,28(r19)
100026f4:	9a400917 	ldw	r9,36(r19)
100026f8:	d9012c17 	ldw	r4,1200(sp)
100026fc:	d9c12f17 	ldw	r7,1212(sp)
10002700:	02010004 	movi	r8,1024
10002704:	10bfff4c 	andi	r2,r2,65533
10002708:	d8c1078d 	sth	r3,1054(sp)
1000270c:	d9410404 	addi	r5,sp,1040
10002710:	d8c00404 	addi	r3,sp,16
10002714:	880d883a 	mov	r6,r17
10002718:	d881070d 	sth	r2,1052(sp)
1000271c:	dac11d15 	stw	r11,1140(sp)
10002720:	da810b15 	stw	r10,1068(sp)
10002724:	da410d15 	stw	r9,1076(sp)
10002728:	d8c10415 	stw	r3,1040(sp)
1000272c:	d8c10815 	stw	r3,1056(sp)
10002730:	da010615 	stw	r8,1048(sp)
10002734:	da010915 	stw	r8,1060(sp)
10002738:	d8010a15 	stw	zero,1064(sp)
1000273c:	00023700 	call	10002370 <___vfprintf_internal_r>
10002740:	1021883a 	mov	r16,r2
10002744:	10000416 	blt	r2,zero,10002758 <___vfprintf_internal_r+0x3e8>
10002748:	d9012c17 	ldw	r4,1200(sp)
1000274c:	d9410404 	addi	r5,sp,1040
10002750:	0005e840 	call	10005e84 <_fflush_r>
10002754:	10072a1e 	bne	r2,zero,10004400 <___vfprintf_internal_r+0x2090>
10002758:	d881070b 	ldhu	r2,1052(sp)
1000275c:	1080100c 	andi	r2,r2,64
10002760:	10000326 	beq	r2,zero,10002770 <___vfprintf_internal_r+0x400>
10002764:	9880030b 	ldhu	r2,12(r19)
10002768:	10801014 	ori	r2,r2,64
1000276c:	9880030d 	sth	r2,12(r19)
10002770:	8005883a 	mov	r2,r16
10002774:	00000106 	br	1000277c <___vfprintf_internal_r+0x40c>
10002778:	00bfffc4 	movi	r2,-1
1000277c:	dfc14917 	ldw	ra,1316(sp)
10002780:	df014817 	ldw	fp,1312(sp)
10002784:	ddc14717 	ldw	r23,1308(sp)
10002788:	dd814617 	ldw	r22,1304(sp)
1000278c:	dd414517 	ldw	r21,1300(sp)
10002790:	dd014417 	ldw	r20,1296(sp)
10002794:	dcc14317 	ldw	r19,1292(sp)
10002798:	dc814217 	ldw	r18,1288(sp)
1000279c:	dc414117 	ldw	r17,1284(sp)
100027a0:	dc014017 	ldw	r16,1280(sp)
100027a4:	dec14a04 	addi	sp,sp,1320
100027a8:	f800283a 	ret
100027ac:	d9012c17 	ldw	r4,1200(sp)
100027b0:	980b883a 	mov	r5,r19
100027b4:	d9811e04 	addi	r6,sp,1144
100027b8:	00096780 	call	10009678 <__sprint_r>
100027bc:	1000081e 	bne	r2,zero,100027e0 <___vfprintf_internal_r+0x470>
100027c0:	da000404 	addi	r8,sp,16
100027c4:	003f3f06 	br	100024c4 <__alt_data_end+0xf80024c4>
100027c8:	d8812017 	ldw	r2,1152(sp)
100027cc:	10000426 	beq	r2,zero,100027e0 <___vfprintf_internal_r+0x470>
100027d0:	d9012c17 	ldw	r4,1200(sp)
100027d4:	980b883a 	mov	r5,r19
100027d8:	d9811e04 	addi	r6,sp,1144
100027dc:	00096780 	call	10009678 <__sprint_r>
100027e0:	9880030b 	ldhu	r2,12(r19)
100027e4:	1080100c 	andi	r2,r2,64
100027e8:	103fe31e 	bne	r2,zero,10002778 <__alt_data_end+0xf8002778>
100027ec:	d8813117 	ldw	r2,1220(sp)
100027f0:	003fe206 	br	1000277c <__alt_data_end+0xf800277c>
100027f4:	d9012c17 	ldw	r4,1200(sp)
100027f8:	00061a40 	call	100061a4 <__sinit>
100027fc:	003ef506 	br	100023d4 <__alt_data_end+0xf80023d4>
10002800:	05800ac4 	movi	r22,43
10002804:	8c800007 	ldb	r18,0(r17)
10002808:	003f3e06 	br	10002504 <__alt_data_end+0xf8002504>
1000280c:	8c800007 	ldb	r18,0(r17)
10002810:	00c00a84 	movi	r3,42
10002814:	88800044 	addi	r2,r17,1
10002818:	90c6fb26 	beq	r18,r3,10004408 <___vfprintf_internal_r+0x2098>
1000281c:	953ff404 	addi	r20,r18,-48
10002820:	1023883a 	mov	r17,r2
10002824:	0007883a 	mov	r3,zero
10002828:	ad3f3736 	bltu	r21,r20,10002508 <__alt_data_end+0xf8002508>
1000282c:	0009883a 	mov	r4,zero
10002830:	01400284 	movi	r5,10
10002834:	000c2b80 	call	1000c2b8 <__mulsi3>
10002838:	8c800007 	ldb	r18,0(r17)
1000283c:	a089883a 	add	r4,r20,r2
10002840:	8c400044 	addi	r17,r17,1
10002844:	953ff404 	addi	r20,r18,-48
10002848:	ad3ff92e 	bgeu	r21,r20,10002830 <__alt_data_end+0xf8002830>
1000284c:	2007883a 	mov	r3,r4
10002850:	203f2d0e 	bge	r4,zero,10002508 <__alt_data_end+0xf8002508>
10002854:	00ffffc4 	movi	r3,-1
10002858:	003f2b06 	br	10002508 <__alt_data_end+0xf8002508>
1000285c:	d9412a17 	ldw	r5,1192(sp)
10002860:	29402014 	ori	r5,r5,128
10002864:	d9412a15 	stw	r5,1192(sp)
10002868:	8c800007 	ldb	r18,0(r17)
1000286c:	003f2506 	br	10002504 <__alt_data_end+0xf8002504>
10002870:	d9412a17 	ldw	r5,1192(sp)
10002874:	1829883a 	mov	r20,r3
10002878:	dd812785 	stb	r22,1182(sp)
1000287c:	29400414 	ori	r5,r5,16
10002880:	d9412a15 	stw	r5,1192(sp)
10002884:	d8c12a17 	ldw	r3,1192(sp)
10002888:	e011883a 	mov	r8,fp
1000288c:	1880080c 	andi	r2,r3,32
10002890:	1001e126 	beq	r2,zero,10003018 <___vfprintf_internal_r+0xca8>
10002894:	d9012f17 	ldw	r4,1212(sp)
10002898:	20800117 	ldw	r2,4(r4)
1000289c:	25400017 	ldw	r21,0(r4)
100028a0:	21000204 	addi	r4,r4,8
100028a4:	d9012f15 	stw	r4,1212(sp)
100028a8:	102d883a 	mov	r22,r2
100028ac:	10046916 	blt	r2,zero,10003a54 <___vfprintf_internal_r+0x16e4>
100028b0:	df012783 	ldbu	fp,1182(sp)
100028b4:	00c00044 	movi	r3,1
100028b8:	ad84b03a 	or	r2,r21,r22
100028bc:	a0000416 	blt	r20,zero,100028d0 <___vfprintf_internal_r+0x560>
100028c0:	d9412a17 	ldw	r5,1192(sp)
100028c4:	013fdfc4 	movi	r4,-129
100028c8:	290a703a 	and	r5,r5,r4
100028cc:	d9412a15 	stw	r5,1192(sp)
100028d0:	1002491e 	bne	r2,zero,100031f8 <___vfprintf_internal_r+0xe88>
100028d4:	a002481e 	bne	r20,zero,100031f8 <___vfprintf_internal_r+0xe88>
100028d8:	18c03fcc 	andi	r3,r3,255
100028dc:	1803871e 	bne	r3,zero,100036fc <___vfprintf_internal_r+0x138c>
100028e0:	d9012a17 	ldw	r4,1192(sp)
100028e4:	2080004c 	andi	r2,r4,1
100028e8:	10038426 	beq	r2,zero,100036fc <___vfprintf_internal_r+0x138c>
100028ec:	d9413d17 	ldw	r5,1268(sp)
100028f0:	00800c04 	movi	r2,48
100028f4:	d8810dc5 	stb	r2,1079(sp)
100028f8:	d9412e15 	stw	r5,1208(sp)
100028fc:	dc010dc4 	addi	r16,sp,1079
10002900:	d8812e17 	ldw	r2,1208(sp)
10002904:	1500010e 	bge	r2,r20,1000290c <___vfprintf_internal_r+0x59c>
10002908:	a005883a 	mov	r2,r20
1000290c:	d8812b15 	stw	r2,1196(sp)
10002910:	d8013315 	stw	zero,1228(sp)
10002914:	e0803fcc 	andi	r2,fp,255
10002918:	1080201c 	xori	r2,r2,128
1000291c:	10bfe004 	addi	r2,r2,-128
10002920:	10000326 	beq	r2,zero,10002930 <___vfprintf_internal_r+0x5c0>
10002924:	d8c12b17 	ldw	r3,1196(sp)
10002928:	18c00044 	addi	r3,r3,1
1000292c:	d8c12b15 	stw	r3,1196(sp)
10002930:	d8c12a17 	ldw	r3,1192(sp)
10002934:	18c0008c 	andi	r3,r3,2
10002938:	d8c12d15 	stw	r3,1204(sp)
1000293c:	18000326 	beq	r3,zero,1000294c <___vfprintf_internal_r+0x5dc>
10002940:	d8c12b17 	ldw	r3,1196(sp)
10002944:	18c00084 	addi	r3,r3,2
10002948:	d8c12b15 	stw	r3,1196(sp)
1000294c:	d8c12a17 	ldw	r3,1192(sp)
10002950:	18c0210c 	andi	r3,r3,132
10002954:	d8c13215 	stw	r3,1224(sp)
10002958:	1802151e 	bne	r3,zero,100031b0 <___vfprintf_internal_r+0xe40>
1000295c:	d9013017 	ldw	r4,1216(sp)
10002960:	d8c12b17 	ldw	r3,1196(sp)
10002964:	20f9c83a 	sub	fp,r4,r3
10002968:	0702110e 	bge	zero,fp,100031b0 <___vfprintf_internal_r+0xe40>
1000296c:	02400404 	movi	r9,16
10002970:	d8c12017 	ldw	r3,1152(sp)
10002974:	d8811f17 	ldw	r2,1148(sp)
10002978:	4f059a0e 	bge	r9,fp,10003fe4 <___vfprintf_internal_r+0x1c74>
1000297c:	8809883a 	mov	r4,r17
10002980:	01440074 	movhi	r5,4097
10002984:	29468e84 	addi	r5,r5,6714
10002988:	dc013c15 	stw	r16,1264(sp)
1000298c:	e023883a 	mov	r17,fp
10002990:	d9413615 	stw	r5,1240(sp)
10002994:	482d883a 	mov	r22,r9
10002998:	054001c4 	movi	r21,7
1000299c:	dc012c17 	ldw	r16,1200(sp)
100029a0:	2039883a 	mov	fp,r4
100029a4:	00000306 	br	100029b4 <___vfprintf_internal_r+0x644>
100029a8:	8c7ffc04 	addi	r17,r17,-16
100029ac:	42000204 	addi	r8,r8,8
100029b0:	b440130e 	bge	r22,r17,10002a00 <___vfprintf_internal_r+0x690>
100029b4:	18c00404 	addi	r3,r3,16
100029b8:	10800044 	addi	r2,r2,1
100029bc:	01040074 	movhi	r4,4097
100029c0:	21068e84 	addi	r4,r4,6714
100029c4:	41000015 	stw	r4,0(r8)
100029c8:	45800115 	stw	r22,4(r8)
100029cc:	d8c12015 	stw	r3,1152(sp)
100029d0:	d8811f15 	stw	r2,1148(sp)
100029d4:	a8bff40e 	bge	r21,r2,100029a8 <__alt_data_end+0xf80029a8>
100029d8:	8009883a 	mov	r4,r16
100029dc:	980b883a 	mov	r5,r19
100029e0:	d9811e04 	addi	r6,sp,1144
100029e4:	00096780 	call	10009678 <__sprint_r>
100029e8:	103f7d1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100029ec:	8c7ffc04 	addi	r17,r17,-16
100029f0:	d8c12017 	ldw	r3,1152(sp)
100029f4:	d8811f17 	ldw	r2,1148(sp)
100029f8:	da000404 	addi	r8,sp,16
100029fc:	b47fed16 	blt	r22,r17,100029b4 <__alt_data_end+0xf80029b4>
10002a00:	dc013c17 	ldw	r16,1264(sp)
10002a04:	e009883a 	mov	r4,fp
10002a08:	8839883a 	mov	fp,r17
10002a0c:	2023883a 	mov	r17,r4
10002a10:	d9413617 	ldw	r5,1240(sp)
10002a14:	e0c7883a 	add	r3,fp,r3
10002a18:	10800044 	addi	r2,r2,1
10002a1c:	41400015 	stw	r5,0(r8)
10002a20:	47000115 	stw	fp,4(r8)
10002a24:	d8c12015 	stw	r3,1152(sp)
10002a28:	d8811f15 	stw	r2,1148(sp)
10002a2c:	010001c4 	movi	r4,7
10002a30:	20836b16 	blt	r4,r2,100037e0 <___vfprintf_internal_r+0x1470>
10002a34:	d8812787 	ldb	r2,1182(sp)
10002a38:	42000204 	addi	r8,r8,8
10002a3c:	10000c26 	beq	r2,zero,10002a70 <___vfprintf_internal_r+0x700>
10002a40:	d8811f17 	ldw	r2,1148(sp)
10002a44:	d9012784 	addi	r4,sp,1182
10002a48:	18c00044 	addi	r3,r3,1
10002a4c:	10800044 	addi	r2,r2,1
10002a50:	41000015 	stw	r4,0(r8)
10002a54:	01000044 	movi	r4,1
10002a58:	41000115 	stw	r4,4(r8)
10002a5c:	d8c12015 	stw	r3,1152(sp)
10002a60:	d8811f15 	stw	r2,1148(sp)
10002a64:	010001c4 	movi	r4,7
10002a68:	2082ef16 	blt	r4,r2,10003628 <___vfprintf_internal_r+0x12b8>
10002a6c:	42000204 	addi	r8,r8,8
10002a70:	d8812d17 	ldw	r2,1204(sp)
10002a74:	10000c26 	beq	r2,zero,10002aa8 <___vfprintf_internal_r+0x738>
10002a78:	d8811f17 	ldw	r2,1148(sp)
10002a7c:	d9012704 	addi	r4,sp,1180
10002a80:	18c00084 	addi	r3,r3,2
10002a84:	10800044 	addi	r2,r2,1
10002a88:	41000015 	stw	r4,0(r8)
10002a8c:	01000084 	movi	r4,2
10002a90:	41000115 	stw	r4,4(r8)
10002a94:	d8c12015 	stw	r3,1152(sp)
10002a98:	d8811f15 	stw	r2,1148(sp)
10002a9c:	010001c4 	movi	r4,7
10002aa0:	2082e916 	blt	r4,r2,10003648 <___vfprintf_internal_r+0x12d8>
10002aa4:	42000204 	addi	r8,r8,8
10002aa8:	d9013217 	ldw	r4,1224(sp)
10002aac:	00802004 	movi	r2,128
10002ab0:	20823226 	beq	r4,r2,1000337c <___vfprintf_internal_r+0x100c>
10002ab4:	d9012e17 	ldw	r4,1208(sp)
10002ab8:	a129c83a 	sub	r20,r20,r4
10002abc:	05002d0e 	bge	zero,r20,10002b74 <___vfprintf_internal_r+0x804>
10002ac0:	05800404 	movi	r22,16
10002ac4:	d8811f17 	ldw	r2,1148(sp)
10002ac8:	05440074 	movhi	r21,4097
10002acc:	ad468a84 	addi	r21,r21,6698
10002ad0:	b5001f0e 	bge	r22,r20,10002b50 <___vfprintf_internal_r+0x7e0>
10002ad4:	8809883a 	mov	r4,r17
10002ad8:	dc012d15 	stw	r16,1204(sp)
10002adc:	a023883a 	mov	r17,r20
10002ae0:	070001c4 	movi	fp,7
10002ae4:	dc012c17 	ldw	r16,1200(sp)
10002ae8:	2029883a 	mov	r20,r4
10002aec:	00000306 	br	10002afc <___vfprintf_internal_r+0x78c>
10002af0:	8c7ffc04 	addi	r17,r17,-16
10002af4:	42000204 	addi	r8,r8,8
10002af8:	b440110e 	bge	r22,r17,10002b40 <___vfprintf_internal_r+0x7d0>
10002afc:	18c00404 	addi	r3,r3,16
10002b00:	10800044 	addi	r2,r2,1
10002b04:	45c00015 	stw	r23,0(r8)
10002b08:	45800115 	stw	r22,4(r8)
10002b0c:	d8c12015 	stw	r3,1152(sp)
10002b10:	d8811f15 	stw	r2,1148(sp)
10002b14:	e0bff60e 	bge	fp,r2,10002af0 <__alt_data_end+0xf8002af0>
10002b18:	8009883a 	mov	r4,r16
10002b1c:	980b883a 	mov	r5,r19
10002b20:	d9811e04 	addi	r6,sp,1144
10002b24:	00096780 	call	10009678 <__sprint_r>
10002b28:	103f2d1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10002b2c:	8c7ffc04 	addi	r17,r17,-16
10002b30:	d8c12017 	ldw	r3,1152(sp)
10002b34:	d8811f17 	ldw	r2,1148(sp)
10002b38:	da000404 	addi	r8,sp,16
10002b3c:	b47fef16 	blt	r22,r17,10002afc <__alt_data_end+0xf8002afc>
10002b40:	dc012d17 	ldw	r16,1204(sp)
10002b44:	a009883a 	mov	r4,r20
10002b48:	8829883a 	mov	r20,r17
10002b4c:	2023883a 	mov	r17,r4
10002b50:	1d07883a 	add	r3,r3,r20
10002b54:	10800044 	addi	r2,r2,1
10002b58:	45400015 	stw	r21,0(r8)
10002b5c:	45000115 	stw	r20,4(r8)
10002b60:	d8c12015 	stw	r3,1152(sp)
10002b64:	d8811f15 	stw	r2,1148(sp)
10002b68:	010001c4 	movi	r4,7
10002b6c:	2082a616 	blt	r4,r2,10003608 <___vfprintf_internal_r+0x1298>
10002b70:	42000204 	addi	r8,r8,8
10002b74:	d9412a17 	ldw	r5,1192(sp)
10002b78:	2880400c 	andi	r2,r5,256
10002b7c:	1001b51e 	bne	r2,zero,10003254 <___vfprintf_internal_r+0xee4>
10002b80:	d8812e17 	ldw	r2,1208(sp)
10002b84:	d9012e17 	ldw	r4,1208(sp)
10002b88:	44000015 	stw	r16,0(r8)
10002b8c:	1887883a 	add	r3,r3,r2
10002b90:	d8811f17 	ldw	r2,1148(sp)
10002b94:	10800044 	addi	r2,r2,1
10002b98:	41000115 	stw	r4,4(r8)
10002b9c:	d8c12015 	stw	r3,1152(sp)
10002ba0:	d8811f15 	stw	r2,1148(sp)
10002ba4:	010001c4 	movi	r4,7
10002ba8:	20818b16 	blt	r4,r2,100031d8 <___vfprintf_internal_r+0xe68>
10002bac:	42000204 	addi	r8,r8,8
10002bb0:	d9412a17 	ldw	r5,1192(sp)
10002bb4:	2880010c 	andi	r2,r5,4
10002bb8:	10003226 	beq	r2,zero,10002c84 <___vfprintf_internal_r+0x914>
10002bbc:	d8813017 	ldw	r2,1216(sp)
10002bc0:	d9012b17 	ldw	r4,1196(sp)
10002bc4:	1121c83a 	sub	r16,r2,r4
10002bc8:	04002e0e 	bge	zero,r16,10002c84 <___vfprintf_internal_r+0x914>
10002bcc:	04800404 	movi	r18,16
10002bd0:	d8811f17 	ldw	r2,1148(sp)
10002bd4:	9405240e 	bge	r18,r16,10004068 <___vfprintf_internal_r+0x1cf8>
10002bd8:	01040074 	movhi	r4,4097
10002bdc:	21068e84 	addi	r4,r4,6714
10002be0:	d9013615 	stw	r4,1240(sp)
10002be4:	050001c4 	movi	r20,7
10002be8:	dd412c17 	ldw	r21,1200(sp)
10002bec:	00000306 	br	10002bfc <___vfprintf_internal_r+0x88c>
10002bf0:	843ffc04 	addi	r16,r16,-16
10002bf4:	42000204 	addi	r8,r8,8
10002bf8:	9400130e 	bge	r18,r16,10002c48 <___vfprintf_internal_r+0x8d8>
10002bfc:	18c00404 	addi	r3,r3,16
10002c00:	10800044 	addi	r2,r2,1
10002c04:	01440074 	movhi	r5,4097
10002c08:	29468e84 	addi	r5,r5,6714
10002c0c:	41400015 	stw	r5,0(r8)
10002c10:	44800115 	stw	r18,4(r8)
10002c14:	d8c12015 	stw	r3,1152(sp)
10002c18:	d8811f15 	stw	r2,1148(sp)
10002c1c:	a0bff40e 	bge	r20,r2,10002bf0 <__alt_data_end+0xf8002bf0>
10002c20:	a809883a 	mov	r4,r21
10002c24:	980b883a 	mov	r5,r19
10002c28:	d9811e04 	addi	r6,sp,1144
10002c2c:	00096780 	call	10009678 <__sprint_r>
10002c30:	103eeb1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10002c34:	843ffc04 	addi	r16,r16,-16
10002c38:	d8c12017 	ldw	r3,1152(sp)
10002c3c:	d8811f17 	ldw	r2,1148(sp)
10002c40:	da000404 	addi	r8,sp,16
10002c44:	943fed16 	blt	r18,r16,10002bfc <__alt_data_end+0xf8002bfc>
10002c48:	d9013617 	ldw	r4,1240(sp)
10002c4c:	1c07883a 	add	r3,r3,r16
10002c50:	10800044 	addi	r2,r2,1
10002c54:	41000015 	stw	r4,0(r8)
10002c58:	44000115 	stw	r16,4(r8)
10002c5c:	d8c12015 	stw	r3,1152(sp)
10002c60:	d8811f15 	stw	r2,1148(sp)
10002c64:	010001c4 	movi	r4,7
10002c68:	2080060e 	bge	r4,r2,10002c84 <___vfprintf_internal_r+0x914>
10002c6c:	d9012c17 	ldw	r4,1200(sp)
10002c70:	980b883a 	mov	r5,r19
10002c74:	d9811e04 	addi	r6,sp,1144
10002c78:	00096780 	call	10009678 <__sprint_r>
10002c7c:	103ed81e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10002c80:	d8c12017 	ldw	r3,1152(sp)
10002c84:	d8812b17 	ldw	r2,1196(sp)
10002c88:	d9413017 	ldw	r5,1216(sp)
10002c8c:	1140010e 	bge	r2,r5,10002c94 <___vfprintf_internal_r+0x924>
10002c90:	2805883a 	mov	r2,r5
10002c94:	d9013117 	ldw	r4,1220(sp)
10002c98:	2089883a 	add	r4,r4,r2
10002c9c:	d9013115 	stw	r4,1220(sp)
10002ca0:	1802381e 	bne	r3,zero,10003584 <___vfprintf_internal_r+0x1214>
10002ca4:	88800007 	ldb	r2,0(r17)
10002ca8:	d8011f15 	stw	zero,1148(sp)
10002cac:	da000404 	addi	r8,sp,16
10002cb0:	103def1e 	bne	r2,zero,10002470 <__alt_data_end+0xf8002470>
10002cb4:	8821883a 	mov	r16,r17
10002cb8:	003e0506 	br	100024d0 <__alt_data_end+0xf80024d0>
10002cbc:	1829883a 	mov	r20,r3
10002cc0:	d8c12a17 	ldw	r3,1192(sp)
10002cc4:	dd812785 	stb	r22,1182(sp)
10002cc8:	e011883a 	mov	r8,fp
10002ccc:	1880020c 	andi	r2,r3,8
10002cd0:	1003c926 	beq	r2,zero,10003bf8 <___vfprintf_internal_r+0x1888>
10002cd4:	d9012f17 	ldw	r4,1212(sp)
10002cd8:	d9412f17 	ldw	r5,1212(sp)
10002cdc:	d8812f17 	ldw	r2,1212(sp)
10002ce0:	21000017 	ldw	r4,0(r4)
10002ce4:	29400117 	ldw	r5,4(r5)
10002ce8:	10800204 	addi	r2,r2,8
10002cec:	d9013715 	stw	r4,1244(sp)
10002cf0:	d9413915 	stw	r5,1252(sp)
10002cf4:	d8812f15 	stw	r2,1212(sp)
10002cf8:	d9013717 	ldw	r4,1244(sp)
10002cfc:	d9413917 	ldw	r5,1252(sp)
10002d00:	da013f15 	stw	r8,1276(sp)
10002d04:	04000044 	movi	r16,1
10002d08:	00092d00 	call	100092d0 <__fpclassifyd>
10002d0c:	da013f17 	ldw	r8,1276(sp)
10002d10:	d9013717 	ldw	r4,1244(sp)
10002d14:	d9413917 	ldw	r5,1252(sp)
10002d18:	1403571e 	bne	r2,r16,10003a78 <___vfprintf_internal_r+0x1708>
10002d1c:	000d883a 	mov	r6,zero
10002d20:	000f883a 	mov	r7,zero
10002d24:	000d6540 	call	1000d654 <__ledf2>
10002d28:	da013f17 	ldw	r8,1276(sp)
10002d2c:	1004f416 	blt	r2,zero,10004100 <___vfprintf_internal_r+0x1d90>
10002d30:	df012783 	ldbu	fp,1182(sp)
10002d34:	008011c4 	movi	r2,71
10002d38:	14847a0e 	bge	r2,r18,10003f24 <___vfprintf_internal_r+0x1bb4>
10002d3c:	04040074 	movhi	r16,4097
10002d40:	84067b04 	addi	r16,r16,6636
10002d44:	d9012a17 	ldw	r4,1192(sp)
10002d48:	00bfdfc4 	movi	r2,-129
10002d4c:	00c000c4 	movi	r3,3
10002d50:	2088703a 	and	r4,r4,r2
10002d54:	d8c12b15 	stw	r3,1196(sp)
10002d58:	d9012a15 	stw	r4,1192(sp)
10002d5c:	d8c12e15 	stw	r3,1208(sp)
10002d60:	0029883a 	mov	r20,zero
10002d64:	d8013315 	stw	zero,1228(sp)
10002d68:	003eea06 	br	10002914 <__alt_data_end+0xf8002914>
10002d6c:	953ff404 	addi	r20,r18,-48
10002d70:	d8013015 	stw	zero,1216(sp)
10002d74:	0009883a 	mov	r4,zero
10002d78:	1825883a 	mov	r18,r3
10002d7c:	01400284 	movi	r5,10
10002d80:	000c2b80 	call	1000c2b8 <__mulsi3>
10002d84:	88c00007 	ldb	r3,0(r17)
10002d88:	1509883a 	add	r4,r2,r20
10002d8c:	8c400044 	addi	r17,r17,1
10002d90:	1d3ff404 	addi	r20,r3,-48
10002d94:	8805883a 	mov	r2,r17
10002d98:	ad3ff82e 	bgeu	r21,r20,10002d7c <__alt_data_end+0xf8002d7c>
10002d9c:	d9013015 	stw	r4,1216(sp)
10002da0:	9009883a 	mov	r4,r18
10002da4:	1023883a 	mov	r17,r2
10002da8:	1825883a 	mov	r18,r3
10002dac:	2007883a 	mov	r3,r4
10002db0:	003dd506 	br	10002508 <__alt_data_end+0xf8002508>
10002db4:	d8812a17 	ldw	r2,1192(sp)
10002db8:	10800214 	ori	r2,r2,8
10002dbc:	d8812a15 	stw	r2,1192(sp)
10002dc0:	8c800007 	ldb	r18,0(r17)
10002dc4:	003dcf06 	br	10002504 <__alt_data_end+0xf8002504>
10002dc8:	d9012a17 	ldw	r4,1192(sp)
10002dcc:	e011883a 	mov	r8,fp
10002dd0:	1829883a 	mov	r20,r3
10002dd4:	21000414 	ori	r4,r4,16
10002dd8:	d9012a15 	stw	r4,1192(sp)
10002ddc:	d9412a17 	ldw	r5,1192(sp)
10002de0:	2880080c 	andi	r2,r5,32
10002de4:	1000cf26 	beq	r2,zero,10003124 <___vfprintf_internal_r+0xdb4>
10002de8:	d8812f17 	ldw	r2,1212(sp)
10002dec:	0007883a 	mov	r3,zero
10002df0:	15400017 	ldw	r21,0(r2)
10002df4:	15800117 	ldw	r22,4(r2)
10002df8:	10800204 	addi	r2,r2,8
10002dfc:	d8812f15 	stw	r2,1212(sp)
10002e00:	ad84b03a 	or	r2,r21,r22
10002e04:	d8012785 	stb	zero,1182(sp)
10002e08:	0039883a 	mov	fp,zero
10002e0c:	003eab06 	br	100028bc <__alt_data_end+0xf80028bc>
10002e10:	d9012a17 	ldw	r4,1192(sp)
10002e14:	e011883a 	mov	r8,fp
10002e18:	1829883a 	mov	r20,r3
10002e1c:	21000414 	ori	r4,r4,16
10002e20:	d9012a15 	stw	r4,1192(sp)
10002e24:	d9412a17 	ldw	r5,1192(sp)
10002e28:	2880080c 	andi	r2,r5,32
10002e2c:	1000cd26 	beq	r2,zero,10003164 <___vfprintf_internal_r+0xdf4>
10002e30:	d8812f17 	ldw	r2,1212(sp)
10002e34:	00c00044 	movi	r3,1
10002e38:	15400017 	ldw	r21,0(r2)
10002e3c:	15800117 	ldw	r22,4(r2)
10002e40:	10800204 	addi	r2,r2,8
10002e44:	d8812f15 	stw	r2,1212(sp)
10002e48:	ad84b03a 	or	r2,r21,r22
10002e4c:	003fed06 	br	10002e04 <__alt_data_end+0xf8002e04>
10002e50:	d9012a17 	ldw	r4,1192(sp)
10002e54:	dd812785 	stb	r22,1182(sp)
10002e58:	e011883a 	mov	r8,fp
10002e5c:	2080080c 	andi	r2,r4,32
10002e60:	10039226 	beq	r2,zero,10003cac <___vfprintf_internal_r+0x193c>
10002e64:	d9412f17 	ldw	r5,1212(sp)
10002e68:	d9013117 	ldw	r4,1220(sp)
10002e6c:	28800017 	ldw	r2,0(r5)
10002e70:	2007d7fa 	srai	r3,r4,31
10002e74:	29400104 	addi	r5,r5,4
10002e78:	d9412f15 	stw	r5,1212(sp)
10002e7c:	11000015 	stw	r4,0(r2)
10002e80:	10c00115 	stw	r3,4(r2)
10002e84:	003d7806 	br	10002468 <__alt_data_end+0xf8002468>
10002e88:	d8c12f17 	ldw	r3,1212(sp)
10002e8c:	d9012f17 	ldw	r4,1212(sp)
10002e90:	e011883a 	mov	r8,fp
10002e94:	18800017 	ldw	r2,0(r3)
10002e98:	21000104 	addi	r4,r4,4
10002e9c:	00c00044 	movi	r3,1
10002ea0:	d8c12b15 	stw	r3,1196(sp)
10002ea4:	d8012785 	stb	zero,1182(sp)
10002ea8:	d8810405 	stb	r2,1040(sp)
10002eac:	d9012f15 	stw	r4,1212(sp)
10002eb0:	d8c12e15 	stw	r3,1208(sp)
10002eb4:	0029883a 	mov	r20,zero
10002eb8:	d8013315 	stw	zero,1228(sp)
10002ebc:	dc010404 	addi	r16,sp,1040
10002ec0:	0005883a 	mov	r2,zero
10002ec4:	003e9a06 	br	10002930 <__alt_data_end+0xf8002930>
10002ec8:	d9412a17 	ldw	r5,1192(sp)
10002ecc:	01040074 	movhi	r4,4097
10002ed0:	21068304 	addi	r4,r4,6668
10002ed4:	dd812785 	stb	r22,1182(sp)
10002ed8:	d9013b15 	stw	r4,1260(sp)
10002edc:	2880080c 	andi	r2,r5,32
10002ee0:	e011883a 	mov	r8,fp
10002ee4:	1829883a 	mov	r20,r3
10002ee8:	10002f26 	beq	r2,zero,10002fa8 <___vfprintf_internal_r+0xc38>
10002eec:	d8812f17 	ldw	r2,1212(sp)
10002ef0:	15400017 	ldw	r21,0(r2)
10002ef4:	15800117 	ldw	r22,4(r2)
10002ef8:	10800204 	addi	r2,r2,8
10002efc:	d8812f15 	stw	r2,1212(sp)
10002f00:	d9012a17 	ldw	r4,1192(sp)
10002f04:	2080004c 	andi	r2,r4,1
10002f08:	10025f26 	beq	r2,zero,10003888 <___vfprintf_internal_r+0x1518>
10002f0c:	ad84b03a 	or	r2,r21,r22
10002f10:	10034e26 	beq	r2,zero,10003c4c <___vfprintf_internal_r+0x18dc>
10002f14:	00c00c04 	movi	r3,48
10002f18:	21000094 	ori	r4,r4,2
10002f1c:	d8c12705 	stb	r3,1180(sp)
10002f20:	dc812745 	stb	r18,1181(sp)
10002f24:	d9012a15 	stw	r4,1192(sp)
10002f28:	00c00084 	movi	r3,2
10002f2c:	003fb506 	br	10002e04 <__alt_data_end+0xf8002e04>
10002f30:	b0803fcc 	andi	r2,r22,255
10002f34:	1080201c 	xori	r2,r2,128
10002f38:	10bfe004 	addi	r2,r2,-128
10002f3c:	1003501e 	bne	r2,zero,10003c80 <___vfprintf_internal_r+0x1910>
10002f40:	05800804 	movi	r22,32
10002f44:	8c800007 	ldb	r18,0(r17)
10002f48:	003d6e06 	br	10002504 <__alt_data_end+0xf8002504>
10002f4c:	d9012a17 	ldw	r4,1192(sp)
10002f50:	21000054 	ori	r4,r4,1
10002f54:	d9012a15 	stw	r4,1192(sp)
10002f58:	8c800007 	ldb	r18,0(r17)
10002f5c:	003d6906 	br	10002504 <__alt_data_end+0xf8002504>
10002f60:	d9412f17 	ldw	r5,1212(sp)
10002f64:	d9012f17 	ldw	r4,1212(sp)
10002f68:	29400017 	ldw	r5,0(r5)
10002f6c:	20800104 	addi	r2,r4,4
10002f70:	d9413015 	stw	r5,1216(sp)
10002f74:	283dc616 	blt	r5,zero,10002690 <__alt_data_end+0xf8002690>
10002f78:	d8812f15 	stw	r2,1212(sp)
10002f7c:	8c800007 	ldb	r18,0(r17)
10002f80:	003d6006 	br	10002504 <__alt_data_end+0xf8002504>
10002f84:	d9412a17 	ldw	r5,1192(sp)
10002f88:	00840074 	movhi	r2,4097
10002f8c:	10867e04 	addi	r2,r2,6648
10002f90:	d8813b15 	stw	r2,1260(sp)
10002f94:	dd812785 	stb	r22,1182(sp)
10002f98:	2880080c 	andi	r2,r5,32
10002f9c:	e011883a 	mov	r8,fp
10002fa0:	1829883a 	mov	r20,r3
10002fa4:	103fd11e 	bne	r2,zero,10002eec <__alt_data_end+0xf8002eec>
10002fa8:	d8c12a17 	ldw	r3,1192(sp)
10002fac:	1880040c 	andi	r2,r3,16
10002fb0:	10033526 	beq	r2,zero,10003c88 <___vfprintf_internal_r+0x1918>
10002fb4:	d9012f17 	ldw	r4,1212(sp)
10002fb8:	002d883a 	mov	r22,zero
10002fbc:	25400017 	ldw	r21,0(r4)
10002fc0:	21000104 	addi	r4,r4,4
10002fc4:	d9012f15 	stw	r4,1212(sp)
10002fc8:	003fcd06 	br	10002f00 <__alt_data_end+0xf8002f00>
10002fcc:	d9012a17 	ldw	r4,1192(sp)
10002fd0:	21001014 	ori	r4,r4,64
10002fd4:	d9012a15 	stw	r4,1192(sp)
10002fd8:	8c800007 	ldb	r18,0(r17)
10002fdc:	003d4906 	br	10002504 <__alt_data_end+0xf8002504>
10002fe0:	8c800007 	ldb	r18,0(r17)
10002fe4:	01401b04 	movi	r5,108
10002fe8:	8805883a 	mov	r2,r17
10002fec:	9143db26 	beq	r18,r5,10003f5c <___vfprintf_internal_r+0x1bec>
10002ff0:	d9412a17 	ldw	r5,1192(sp)
10002ff4:	29400414 	ori	r5,r5,16
10002ff8:	d9412a15 	stw	r5,1192(sp)
10002ffc:	003d4106 	br	10002504 <__alt_data_end+0xf8002504>
10003000:	1829883a 	mov	r20,r3
10003004:	d8c12a17 	ldw	r3,1192(sp)
10003008:	dd812785 	stb	r22,1182(sp)
1000300c:	e011883a 	mov	r8,fp
10003010:	1880080c 	andi	r2,r3,32
10003014:	103e1f1e 	bne	r2,zero,10002894 <__alt_data_end+0xf8002894>
10003018:	d9412a17 	ldw	r5,1192(sp)
1000301c:	2880040c 	andi	r2,r5,16
10003020:	10032f26 	beq	r2,zero,10003ce0 <___vfprintf_internal_r+0x1970>
10003024:	d8812f17 	ldw	r2,1212(sp)
10003028:	15400017 	ldw	r21,0(r2)
1000302c:	10800104 	addi	r2,r2,4
10003030:	d8812f15 	stw	r2,1212(sp)
10003034:	a82dd7fa 	srai	r22,r21,31
10003038:	b005883a 	mov	r2,r22
1000303c:	003e1b06 	br	100028ac <__alt_data_end+0xf80028ac>
10003040:	d8812a17 	ldw	r2,1192(sp)
10003044:	10800814 	ori	r2,r2,32
10003048:	d8812a15 	stw	r2,1192(sp)
1000304c:	8c800007 	ldb	r18,0(r17)
10003050:	003d2c06 	br	10002504 <__alt_data_end+0xf8002504>
10003054:	1829883a 	mov	r20,r3
10003058:	d8c12f17 	ldw	r3,1212(sp)
1000305c:	d8012785 	stb	zero,1182(sp)
10003060:	e011883a 	mov	r8,fp
10003064:	1c000017 	ldw	r16,0(r3)
10003068:	1d400104 	addi	r21,r3,4
1000306c:	80040226 	beq	r16,zero,10004078 <___vfprintf_internal_r+0x1d08>
10003070:	8009883a 	mov	r4,r16
10003074:	a003c716 	blt	r20,zero,10003f94 <___vfprintf_internal_r+0x1c24>
10003078:	000b883a 	mov	r5,zero
1000307c:	a00d883a 	mov	r6,r20
10003080:	df013f15 	stw	fp,1276(sp)
10003084:	00079000 	call	10007900 <memchr>
10003088:	da013f17 	ldw	r8,1276(sp)
1000308c:	10044326 	beq	r2,zero,1000419c <___vfprintf_internal_r+0x1e2c>
10003090:	1405c83a 	sub	r2,r2,r16
10003094:	d8812e15 	stw	r2,1208(sp)
10003098:	a0837c16 	blt	r20,r2,10003e8c <___vfprintf_internal_r+0x1b1c>
1000309c:	d8812e17 	ldw	r2,1208(sp)
100030a0:	1003c116 	blt	r2,zero,10003fa8 <___vfprintf_internal_r+0x1c38>
100030a4:	df012783 	ldbu	fp,1182(sp)
100030a8:	d8812b15 	stw	r2,1196(sp)
100030ac:	dd412f15 	stw	r21,1212(sp)
100030b0:	0029883a 	mov	r20,zero
100030b4:	d8013315 	stw	zero,1228(sp)
100030b8:	003e1606 	br	10002914 <__alt_data_end+0xf8002914>
100030bc:	d9012f17 	ldw	r4,1212(sp)
100030c0:	d9412a17 	ldw	r5,1192(sp)
100030c4:	00800c04 	movi	r2,48
100030c8:	25400017 	ldw	r21,0(r4)
100030cc:	d8812705 	stb	r2,1180(sp)
100030d0:	00801e04 	movi	r2,120
100030d4:	29400094 	ori	r5,r5,2
100030d8:	d8812745 	stb	r2,1181(sp)
100030dc:	21000104 	addi	r4,r4,4
100030e0:	00840074 	movhi	r2,4097
100030e4:	10868304 	addi	r2,r2,6668
100030e8:	1829883a 	mov	r20,r3
100030ec:	d8813b15 	stw	r2,1260(sp)
100030f0:	e011883a 	mov	r8,fp
100030f4:	002d883a 	mov	r22,zero
100030f8:	d9412a15 	stw	r5,1192(sp)
100030fc:	d9012f15 	stw	r4,1212(sp)
10003100:	00c00084 	movi	r3,2
10003104:	04801e04 	movi	r18,120
10003108:	a805883a 	mov	r2,r21
1000310c:	003f3d06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003110:	d9412a17 	ldw	r5,1192(sp)
10003114:	e011883a 	mov	r8,fp
10003118:	1829883a 	mov	r20,r3
1000311c:	2880080c 	andi	r2,r5,32
10003120:	103f311e 	bne	r2,zero,10002de8 <__alt_data_end+0xf8002de8>
10003124:	d8c12a17 	ldw	r3,1192(sp)
10003128:	1880040c 	andi	r2,r3,16
1000312c:	1002c926 	beq	r2,zero,10003c54 <___vfprintf_internal_r+0x18e4>
10003130:	d9012f17 	ldw	r4,1212(sp)
10003134:	002d883a 	mov	r22,zero
10003138:	0007883a 	mov	r3,zero
1000313c:	25400017 	ldw	r21,0(r4)
10003140:	21000104 	addi	r4,r4,4
10003144:	d9012f15 	stw	r4,1212(sp)
10003148:	a805883a 	mov	r2,r21
1000314c:	003f2d06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003150:	d9412a17 	ldw	r5,1192(sp)
10003154:	e011883a 	mov	r8,fp
10003158:	1829883a 	mov	r20,r3
1000315c:	2880080c 	andi	r2,r5,32
10003160:	103f331e 	bne	r2,zero,10002e30 <__alt_data_end+0xf8002e30>
10003164:	d8c12a17 	ldw	r3,1192(sp)
10003168:	1880040c 	andi	r2,r3,16
1000316c:	1002ac26 	beq	r2,zero,10003c20 <___vfprintf_internal_r+0x18b0>
10003170:	d9012f17 	ldw	r4,1212(sp)
10003174:	002d883a 	mov	r22,zero
10003178:	00c00044 	movi	r3,1
1000317c:	25400017 	ldw	r21,0(r4)
10003180:	21000104 	addi	r4,r4,4
10003184:	d9012f15 	stw	r4,1212(sp)
10003188:	a805883a 	mov	r2,r21
1000318c:	003f1d06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003190:	dd812785 	stb	r22,1182(sp)
10003194:	e011883a 	mov	r8,fp
10003198:	903d8b26 	beq	r18,zero,100027c8 <__alt_data_end+0xf80027c8>
1000319c:	00c00044 	movi	r3,1
100031a0:	d8c12b15 	stw	r3,1196(sp)
100031a4:	dc810405 	stb	r18,1040(sp)
100031a8:	d8012785 	stb	zero,1182(sp)
100031ac:	003f4006 	br	10002eb0 <__alt_data_end+0xf8002eb0>
100031b0:	d8c12017 	ldw	r3,1152(sp)
100031b4:	003e2106 	br	10002a3c <__alt_data_end+0xf8002a3c>
100031b8:	45400015 	stw	r21,0(r8)
100031bc:	44000115 	stw	r16,4(r8)
100031c0:	1c07883a 	add	r3,r3,r16
100031c4:	10800044 	addi	r2,r2,1
100031c8:	d8c12015 	stw	r3,1152(sp)
100031cc:	d8811f15 	stw	r2,1148(sp)
100031d0:	010001c4 	movi	r4,7
100031d4:	20be750e 	bge	r4,r2,10002bac <__alt_data_end+0xf8002bac>
100031d8:	d9012c17 	ldw	r4,1200(sp)
100031dc:	980b883a 	mov	r5,r19
100031e0:	d9811e04 	addi	r6,sp,1144
100031e4:	00096780 	call	10009678 <__sprint_r>
100031e8:	103d7d1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100031ec:	d8c12017 	ldw	r3,1152(sp)
100031f0:	da000404 	addi	r8,sp,16
100031f4:	003e6e06 	br	10002bb0 <__alt_data_end+0xf8002bb0>
100031f8:	18803fcc 	andi	r2,r3,255
100031fc:	00c00044 	movi	r3,1
10003200:	10c11926 	beq	r2,r3,10003668 <___vfprintf_internal_r+0x12f8>
10003204:	00c00084 	movi	r3,2
10003208:	10c0e41e 	bne	r2,r3,1000359c <___vfprintf_internal_r+0x122c>
1000320c:	d9413b17 	ldw	r5,1260(sp)
10003210:	d8c10dc4 	addi	r3,sp,1079
10003214:	a88003cc 	andi	r2,r21,15
10003218:	b008973a 	slli	r4,r22,28
1000321c:	2885883a 	add	r2,r5,r2
10003220:	a82ad13a 	srli	r21,r21,4
10003224:	10800003 	ldbu	r2,0(r2)
10003228:	b02cd13a 	srli	r22,r22,4
1000322c:	256ab03a 	or	r21,r4,r21
10003230:	18800005 	stb	r2,0(r3)
10003234:	ad84b03a 	or	r2,r21,r22
10003238:	1821883a 	mov	r16,r3
1000323c:	18ffffc4 	addi	r3,r3,-1
10003240:	103ff41e 	bne	r2,zero,10003214 <__alt_data_end+0xf8003214>
10003244:	d8c12917 	ldw	r3,1188(sp)
10003248:	1c07c83a 	sub	r3,r3,r16
1000324c:	d8c12e15 	stw	r3,1208(sp)
10003250:	003dab06 	br	10002900 <__alt_data_end+0xf8002900>
10003254:	00801944 	movi	r2,101
10003258:	14807e0e 	bge	r2,r18,10003454 <___vfprintf_internal_r+0x10e4>
1000325c:	d9013717 	ldw	r4,1244(sp)
10003260:	d9413917 	ldw	r5,1252(sp)
10003264:	000d883a 	mov	r6,zero
10003268:	000f883a 	mov	r7,zero
1000326c:	d8c13e15 	stw	r3,1272(sp)
10003270:	da013f15 	stw	r8,1276(sp)
10003274:	000d4f80 	call	1000d4f8 <__eqdf2>
10003278:	d8c13e17 	ldw	r3,1272(sp)
1000327c:	da013f17 	ldw	r8,1276(sp)
10003280:	1001211e 	bne	r2,zero,10003708 <___vfprintf_internal_r+0x1398>
10003284:	d8811f17 	ldw	r2,1148(sp)
10003288:	01000044 	movi	r4,1
1000328c:	18c00044 	addi	r3,r3,1
10003290:	10800044 	addi	r2,r2,1
10003294:	01440074 	movhi	r5,4097
10003298:	29468a04 	addi	r5,r5,6696
1000329c:	41000115 	stw	r4,4(r8)
100032a0:	41400015 	stw	r5,0(r8)
100032a4:	d8c12015 	stw	r3,1152(sp)
100032a8:	d8811f15 	stw	r2,1148(sp)
100032ac:	010001c4 	movi	r4,7
100032b0:	2082a316 	blt	r4,r2,10003d40 <___vfprintf_internal_r+0x19d0>
100032b4:	42000204 	addi	r8,r8,8
100032b8:	d8812617 	ldw	r2,1176(sp)
100032bc:	d9013517 	ldw	r4,1236(sp)
100032c0:	11000316 	blt	r2,r4,100032d0 <___vfprintf_internal_r+0xf60>
100032c4:	d9412a17 	ldw	r5,1192(sp)
100032c8:	2880004c 	andi	r2,r5,1
100032cc:	103e3826 	beq	r2,zero,10002bb0 <__alt_data_end+0xf8002bb0>
100032d0:	d8813817 	ldw	r2,1248(sp)
100032d4:	d9013417 	ldw	r4,1232(sp)
100032d8:	d9413817 	ldw	r5,1248(sp)
100032dc:	1887883a 	add	r3,r3,r2
100032e0:	d8811f17 	ldw	r2,1148(sp)
100032e4:	41000015 	stw	r4,0(r8)
100032e8:	41400115 	stw	r5,4(r8)
100032ec:	10800044 	addi	r2,r2,1
100032f0:	d8c12015 	stw	r3,1152(sp)
100032f4:	d8811f15 	stw	r2,1148(sp)
100032f8:	010001c4 	movi	r4,7
100032fc:	20831d16 	blt	r4,r2,10003f74 <___vfprintf_internal_r+0x1c04>
10003300:	42000204 	addi	r8,r8,8
10003304:	d8813517 	ldw	r2,1236(sp)
10003308:	143fffc4 	addi	r16,r2,-1
1000330c:	043e280e 	bge	zero,r16,10002bb0 <__alt_data_end+0xf8002bb0>
10003310:	04800404 	movi	r18,16
10003314:	d8811f17 	ldw	r2,1148(sp)
10003318:	05440074 	movhi	r21,4097
1000331c:	ad468a84 	addi	r21,r21,6698
10003320:	943fa50e 	bge	r18,r16,100031b8 <__alt_data_end+0xf80031b8>
10003324:	050001c4 	movi	r20,7
10003328:	dd812c17 	ldw	r22,1200(sp)
1000332c:	00000306 	br	1000333c <___vfprintf_internal_r+0xfcc>
10003330:	42000204 	addi	r8,r8,8
10003334:	843ffc04 	addi	r16,r16,-16
10003338:	943f9f0e 	bge	r18,r16,100031b8 <__alt_data_end+0xf80031b8>
1000333c:	18c00404 	addi	r3,r3,16
10003340:	10800044 	addi	r2,r2,1
10003344:	45c00015 	stw	r23,0(r8)
10003348:	44800115 	stw	r18,4(r8)
1000334c:	d8c12015 	stw	r3,1152(sp)
10003350:	d8811f15 	stw	r2,1148(sp)
10003354:	a0bff60e 	bge	r20,r2,10003330 <__alt_data_end+0xf8003330>
10003358:	b009883a 	mov	r4,r22
1000335c:	980b883a 	mov	r5,r19
10003360:	d9811e04 	addi	r6,sp,1144
10003364:	00096780 	call	10009678 <__sprint_r>
10003368:	103d1d1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
1000336c:	d8c12017 	ldw	r3,1152(sp)
10003370:	d8811f17 	ldw	r2,1148(sp)
10003374:	da000404 	addi	r8,sp,16
10003378:	003fee06 	br	10003334 <__alt_data_end+0xf8003334>
1000337c:	d9413017 	ldw	r5,1216(sp)
10003380:	d8812b17 	ldw	r2,1196(sp)
10003384:	28adc83a 	sub	r22,r5,r2
10003388:	05bdca0e 	bge	zero,r22,10002ab4 <__alt_data_end+0xf8002ab4>
1000338c:	07000404 	movi	fp,16
10003390:	d8811f17 	ldw	r2,1148(sp)
10003394:	05440074 	movhi	r21,4097
10003398:	ad468a84 	addi	r21,r21,6698
1000339c:	e580230e 	bge	fp,r22,1000342c <___vfprintf_internal_r+0x10bc>
100033a0:	a809883a 	mov	r4,r21
100033a4:	dc012d15 	stw	r16,1204(sp)
100033a8:	882b883a 	mov	r21,r17
100033ac:	01c001c4 	movi	r7,7
100033b0:	b023883a 	mov	r17,r22
100033b4:	dc012c17 	ldw	r16,1200(sp)
100033b8:	202d883a 	mov	r22,r4
100033bc:	00000306 	br	100033cc <___vfprintf_internal_r+0x105c>
100033c0:	8c7ffc04 	addi	r17,r17,-16
100033c4:	42000204 	addi	r8,r8,8
100033c8:	e440130e 	bge	fp,r17,10003418 <___vfprintf_internal_r+0x10a8>
100033cc:	18c00404 	addi	r3,r3,16
100033d0:	10800044 	addi	r2,r2,1
100033d4:	45c00015 	stw	r23,0(r8)
100033d8:	47000115 	stw	fp,4(r8)
100033dc:	d8c12015 	stw	r3,1152(sp)
100033e0:	d8811f15 	stw	r2,1148(sp)
100033e4:	38bff60e 	bge	r7,r2,100033c0 <__alt_data_end+0xf80033c0>
100033e8:	8009883a 	mov	r4,r16
100033ec:	980b883a 	mov	r5,r19
100033f0:	d9811e04 	addi	r6,sp,1144
100033f4:	d9c13e15 	stw	r7,1272(sp)
100033f8:	00096780 	call	10009678 <__sprint_r>
100033fc:	d9c13e17 	ldw	r7,1272(sp)
10003400:	103cf71e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003404:	8c7ffc04 	addi	r17,r17,-16
10003408:	d8c12017 	ldw	r3,1152(sp)
1000340c:	d8811f17 	ldw	r2,1148(sp)
10003410:	da000404 	addi	r8,sp,16
10003414:	e47fed16 	blt	fp,r17,100033cc <__alt_data_end+0xf80033cc>
10003418:	dc012d17 	ldw	r16,1204(sp)
1000341c:	b009883a 	mov	r4,r22
10003420:	882d883a 	mov	r22,r17
10003424:	a823883a 	mov	r17,r21
10003428:	202b883a 	mov	r21,r4
1000342c:	1d87883a 	add	r3,r3,r22
10003430:	10800044 	addi	r2,r2,1
10003434:	45400015 	stw	r21,0(r8)
10003438:	45800115 	stw	r22,4(r8)
1000343c:	d8c12015 	stw	r3,1152(sp)
10003440:	d8811f15 	stw	r2,1148(sp)
10003444:	010001c4 	movi	r4,7
10003448:	20817a16 	blt	r4,r2,10003a34 <___vfprintf_internal_r+0x16c4>
1000344c:	42000204 	addi	r8,r8,8
10003450:	003d9806 	br	10002ab4 <__alt_data_end+0xf8002ab4>
10003454:	d9013517 	ldw	r4,1236(sp)
10003458:	00800044 	movi	r2,1
1000345c:	1100340e 	bge	r2,r4,10003530 <___vfprintf_internal_r+0x11c0>
10003460:	dc811f17 	ldw	r18,1148(sp)
10003464:	00800044 	movi	r2,1
10003468:	18c00044 	addi	r3,r3,1
1000346c:	94800044 	addi	r18,r18,1
10003470:	40800115 	stw	r2,4(r8)
10003474:	44000015 	stw	r16,0(r8)
10003478:	d8c12015 	stw	r3,1152(sp)
1000347c:	dc811f15 	stw	r18,1148(sp)
10003480:	008001c4 	movi	r2,7
10003484:	14814e16 	blt	r2,r18,100039c0 <___vfprintf_internal_r+0x1650>
10003488:	42000204 	addi	r8,r8,8
1000348c:	d8813817 	ldw	r2,1248(sp)
10003490:	94800044 	addi	r18,r18,1
10003494:	dc811f15 	stw	r18,1148(sp)
10003498:	18ad883a 	add	r22,r3,r2
1000349c:	d8c13417 	ldw	r3,1232(sp)
100034a0:	40800115 	stw	r2,4(r8)
100034a4:	dd812015 	stw	r22,1152(sp)
100034a8:	40c00015 	stw	r3,0(r8)
100034ac:	008001c4 	movi	r2,7
100034b0:	14814c16 	blt	r2,r18,100039e4 <___vfprintf_internal_r+0x1674>
100034b4:	45000204 	addi	r20,r8,8
100034b8:	d9013717 	ldw	r4,1244(sp)
100034bc:	d9413917 	ldw	r5,1252(sp)
100034c0:	000d883a 	mov	r6,zero
100034c4:	000f883a 	mov	r7,zero
100034c8:	000d4f80 	call	1000d4f8 <__eqdf2>
100034cc:	1000cd26 	beq	r2,zero,10003804 <___vfprintf_internal_r+0x1494>
100034d0:	d9013517 	ldw	r4,1236(sp)
100034d4:	84000044 	addi	r16,r16,1
100034d8:	94800044 	addi	r18,r18,1
100034dc:	20bfffc4 	addi	r2,r4,-1
100034e0:	b0ad883a 	add	r22,r22,r2
100034e4:	a0800115 	stw	r2,4(r20)
100034e8:	a4000015 	stw	r16,0(r20)
100034ec:	dd812015 	stw	r22,1152(sp)
100034f0:	dc811f15 	stw	r18,1148(sp)
100034f4:	008001c4 	movi	r2,7
100034f8:	14801916 	blt	r2,r18,10003560 <___vfprintf_internal_r+0x11f0>
100034fc:	a5000204 	addi	r20,r20,8
10003500:	d9013a17 	ldw	r4,1256(sp)
10003504:	d88122c4 	addi	r2,sp,1163
10003508:	94800044 	addi	r18,r18,1
1000350c:	2587883a 	add	r3,r4,r22
10003510:	a0800015 	stw	r2,0(r20)
10003514:	a1000115 	stw	r4,4(r20)
10003518:	d8c12015 	stw	r3,1152(sp)
1000351c:	dc811f15 	stw	r18,1148(sp)
10003520:	008001c4 	movi	r2,7
10003524:	14bf2c16 	blt	r2,r18,100031d8 <__alt_data_end+0xf80031d8>
10003528:	a2000204 	addi	r8,r20,8
1000352c:	003da006 	br	10002bb0 <__alt_data_end+0xf8002bb0>
10003530:	d9412a17 	ldw	r5,1192(sp)
10003534:	2888703a 	and	r4,r5,r2
10003538:	203fc91e 	bne	r4,zero,10003460 <__alt_data_end+0xf8003460>
1000353c:	dc811f17 	ldw	r18,1148(sp)
10003540:	1d800044 	addi	r22,r3,1
10003544:	40800115 	stw	r2,4(r8)
10003548:	94800044 	addi	r18,r18,1
1000354c:	44000015 	stw	r16,0(r8)
10003550:	dd812015 	stw	r22,1152(sp)
10003554:	dc811f15 	stw	r18,1148(sp)
10003558:	008001c4 	movi	r2,7
1000355c:	1482740e 	bge	r2,r18,10003f30 <___vfprintf_internal_r+0x1bc0>
10003560:	d9012c17 	ldw	r4,1200(sp)
10003564:	980b883a 	mov	r5,r19
10003568:	d9811e04 	addi	r6,sp,1144
1000356c:	00096780 	call	10009678 <__sprint_r>
10003570:	103c9b1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003574:	dd812017 	ldw	r22,1152(sp)
10003578:	dc811f17 	ldw	r18,1148(sp)
1000357c:	dd000404 	addi	r20,sp,16
10003580:	003fdf06 	br	10003500 <__alt_data_end+0xf8003500>
10003584:	d9012c17 	ldw	r4,1200(sp)
10003588:	980b883a 	mov	r5,r19
1000358c:	d9811e04 	addi	r6,sp,1144
10003590:	00096780 	call	10009678 <__sprint_r>
10003594:	103dc326 	beq	r2,zero,10002ca4 <__alt_data_end+0xf8002ca4>
10003598:	003c9106 	br	100027e0 <__alt_data_end+0xf80027e0>
1000359c:	d8c10dc4 	addi	r3,sp,1079
100035a0:	a808d0fa 	srli	r4,r21,3
100035a4:	b00a977a 	slli	r5,r22,29
100035a8:	b02cd0fa 	srli	r22,r22,3
100035ac:	ad4001cc 	andi	r21,r21,7
100035b0:	a8800c04 	addi	r2,r21,48
100035b4:	292ab03a 	or	r21,r5,r4
100035b8:	18800005 	stb	r2,0(r3)
100035bc:	ad88b03a 	or	r4,r21,r22
100035c0:	1821883a 	mov	r16,r3
100035c4:	18ffffc4 	addi	r3,r3,-1
100035c8:	203ff51e 	bne	r4,zero,100035a0 <__alt_data_end+0xf80035a0>
100035cc:	d9412a17 	ldw	r5,1192(sp)
100035d0:	2900004c 	andi	r4,r5,1
100035d4:	800b883a 	mov	r5,r16
100035d8:	203f1a26 	beq	r4,zero,10003244 <__alt_data_end+0xf8003244>
100035dc:	10803fcc 	andi	r2,r2,255
100035e0:	1080201c 	xori	r2,r2,128
100035e4:	10bfe004 	addi	r2,r2,-128
100035e8:	01000c04 	movi	r4,48
100035ec:	113f1526 	beq	r2,r4,10003244 <__alt_data_end+0xf8003244>
100035f0:	1821883a 	mov	r16,r3
100035f4:	d8c12917 	ldw	r3,1188(sp)
100035f8:	293fffc5 	stb	r4,-1(r5)
100035fc:	1c07c83a 	sub	r3,r3,r16
10003600:	d8c12e15 	stw	r3,1208(sp)
10003604:	003cbe06 	br	10002900 <__alt_data_end+0xf8002900>
10003608:	d9012c17 	ldw	r4,1200(sp)
1000360c:	980b883a 	mov	r5,r19
10003610:	d9811e04 	addi	r6,sp,1144
10003614:	00096780 	call	10009678 <__sprint_r>
10003618:	103c711e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
1000361c:	d8c12017 	ldw	r3,1152(sp)
10003620:	da000404 	addi	r8,sp,16
10003624:	003d5306 	br	10002b74 <__alt_data_end+0xf8002b74>
10003628:	d9012c17 	ldw	r4,1200(sp)
1000362c:	980b883a 	mov	r5,r19
10003630:	d9811e04 	addi	r6,sp,1144
10003634:	00096780 	call	10009678 <__sprint_r>
10003638:	103c691e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
1000363c:	d8c12017 	ldw	r3,1152(sp)
10003640:	da000404 	addi	r8,sp,16
10003644:	003d0a06 	br	10002a70 <__alt_data_end+0xf8002a70>
10003648:	d9012c17 	ldw	r4,1200(sp)
1000364c:	980b883a 	mov	r5,r19
10003650:	d9811e04 	addi	r6,sp,1144
10003654:	00096780 	call	10009678 <__sprint_r>
10003658:	103c611e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
1000365c:	d8c12017 	ldw	r3,1152(sp)
10003660:	da000404 	addi	r8,sp,16
10003664:	003d1006 	br	10002aa8 <__alt_data_end+0xf8002aa8>
10003668:	b000021e 	bne	r22,zero,10003674 <___vfprintf_internal_r+0x1304>
1000366c:	00800244 	movi	r2,9
10003670:	15401c2e 	bgeu	r2,r21,100036e4 <___vfprintf_internal_r+0x1374>
10003674:	dc412b15 	stw	r17,1196(sp)
10003678:	d8810dc4 	addi	r2,sp,1079
1000367c:	b023883a 	mov	r17,r22
10003680:	402d883a 	mov	r22,r8
10003684:	a809883a 	mov	r4,r21
10003688:	880b883a 	mov	r5,r17
1000368c:	01800284 	movi	r6,10
10003690:	000f883a 	mov	r7,zero
10003694:	1021883a 	mov	r16,r2
10003698:	000bb700 	call	1000bb70 <__umoddi3>
1000369c:	10800c04 	addi	r2,r2,48
100036a0:	a809883a 	mov	r4,r21
100036a4:	880b883a 	mov	r5,r17
100036a8:	80800005 	stb	r2,0(r16)
100036ac:	01800284 	movi	r6,10
100036b0:	000f883a 	mov	r7,zero
100036b4:	000b51c0 	call	1000b51c <__udivdi3>
100036b8:	1823883a 	mov	r17,r3
100036bc:	10c6b03a 	or	r3,r2,r3
100036c0:	102b883a 	mov	r21,r2
100036c4:	80bfffc4 	addi	r2,r16,-1
100036c8:	183fee1e 	bne	r3,zero,10003684 <__alt_data_end+0xf8003684>
100036cc:	d8c12917 	ldw	r3,1188(sp)
100036d0:	b011883a 	mov	r8,r22
100036d4:	dc412b17 	ldw	r17,1196(sp)
100036d8:	1c07c83a 	sub	r3,r3,r16
100036dc:	d8c12e15 	stw	r3,1208(sp)
100036e0:	003c8706 	br	10002900 <__alt_data_end+0xf8002900>
100036e4:	d9013d17 	ldw	r4,1268(sp)
100036e8:	ad400c04 	addi	r21,r21,48
100036ec:	dd410dc5 	stb	r21,1079(sp)
100036f0:	d9012e15 	stw	r4,1208(sp)
100036f4:	dc010dc4 	addi	r16,sp,1079
100036f8:	003c8106 	br	10002900 <__alt_data_end+0xf8002900>
100036fc:	d8012e15 	stw	zero,1208(sp)
10003700:	dc010e04 	addi	r16,sp,1080
10003704:	003c7e06 	br	10002900 <__alt_data_end+0xf8002900>
10003708:	d8812617 	ldw	r2,1176(sp)
1000370c:	0081940e 	bge	zero,r2,10003d60 <___vfprintf_internal_r+0x19f0>
10003710:	d9413517 	ldw	r5,1236(sp)
10003714:	d8813317 	ldw	r2,1228(sp)
10003718:	8165883a 	add	r18,r16,r5
1000371c:	9429c83a 	sub	r20,r18,r16
10003720:	1500010e 	bge	r2,r20,10003728 <___vfprintf_internal_r+0x13b8>
10003724:	1029883a 	mov	r20,r2
10003728:	05000a0e 	bge	zero,r20,10003754 <___vfprintf_internal_r+0x13e4>
1000372c:	d8811f17 	ldw	r2,1148(sp)
10003730:	1d07883a 	add	r3,r3,r20
10003734:	44000015 	stw	r16,0(r8)
10003738:	10800044 	addi	r2,r2,1
1000373c:	45000115 	stw	r20,4(r8)
10003740:	d8c12015 	stw	r3,1152(sp)
10003744:	d8811f15 	stw	r2,1148(sp)
10003748:	010001c4 	movi	r4,7
1000374c:	20822b16 	blt	r4,r2,10003ffc <___vfprintf_internal_r+0x1c8c>
10003750:	42000204 	addi	r8,r8,8
10003754:	a0022716 	blt	r20,zero,10003ff4 <___vfprintf_internal_r+0x1c84>
10003758:	d9013317 	ldw	r4,1228(sp)
1000375c:	2529c83a 	sub	r20,r4,r20
10003760:	0500530e 	bge	zero,r20,100038b0 <___vfprintf_internal_r+0x1540>
10003764:	05800404 	movi	r22,16
10003768:	d8811f17 	ldw	r2,1148(sp)
1000376c:	05440074 	movhi	r21,4097
10003770:	ad468a84 	addi	r21,r21,6698
10003774:	b501680e 	bge	r22,r20,10003d18 <___vfprintf_internal_r+0x19a8>
10003778:	8809883a 	mov	r4,r17
1000377c:	dc012e15 	stw	r16,1208(sp)
10003780:	a023883a 	mov	r17,r20
10003784:	070001c4 	movi	fp,7
10003788:	dc012c17 	ldw	r16,1200(sp)
1000378c:	2029883a 	mov	r20,r4
10003790:	00000306 	br	100037a0 <___vfprintf_internal_r+0x1430>
10003794:	42000204 	addi	r8,r8,8
10003798:	8c7ffc04 	addi	r17,r17,-16
1000379c:	b4415a0e 	bge	r22,r17,10003d08 <___vfprintf_internal_r+0x1998>
100037a0:	18c00404 	addi	r3,r3,16
100037a4:	10800044 	addi	r2,r2,1
100037a8:	45c00015 	stw	r23,0(r8)
100037ac:	45800115 	stw	r22,4(r8)
100037b0:	d8c12015 	stw	r3,1152(sp)
100037b4:	d8811f15 	stw	r2,1148(sp)
100037b8:	e0bff60e 	bge	fp,r2,10003794 <__alt_data_end+0xf8003794>
100037bc:	8009883a 	mov	r4,r16
100037c0:	980b883a 	mov	r5,r19
100037c4:	d9811e04 	addi	r6,sp,1144
100037c8:	00096780 	call	10009678 <__sprint_r>
100037cc:	103c041e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100037d0:	d8c12017 	ldw	r3,1152(sp)
100037d4:	d8811f17 	ldw	r2,1148(sp)
100037d8:	da000404 	addi	r8,sp,16
100037dc:	003fee06 	br	10003798 <__alt_data_end+0xf8003798>
100037e0:	d9012c17 	ldw	r4,1200(sp)
100037e4:	980b883a 	mov	r5,r19
100037e8:	d9811e04 	addi	r6,sp,1144
100037ec:	00096780 	call	10009678 <__sprint_r>
100037f0:	103bfb1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100037f4:	d8c12017 	ldw	r3,1152(sp)
100037f8:	d8812787 	ldb	r2,1182(sp)
100037fc:	da000404 	addi	r8,sp,16
10003800:	003c8e06 	br	10002a3c <__alt_data_end+0xf8002a3c>
10003804:	d9413517 	ldw	r5,1236(sp)
10003808:	2c3fffc4 	addi	r16,r5,-1
1000380c:	043f3c0e 	bge	zero,r16,10003500 <__alt_data_end+0xf8003500>
10003810:	07000404 	movi	fp,16
10003814:	05440074 	movhi	r21,4097
10003818:	ad468a84 	addi	r21,r21,6698
1000381c:	e4007c0e 	bge	fp,r16,10003a10 <___vfprintf_internal_r+0x16a0>
10003820:	dc412e15 	stw	r17,1208(sp)
10003824:	00c001c4 	movi	r3,7
10003828:	8023883a 	mov	r17,r16
1000382c:	dc012c17 	ldw	r16,1200(sp)
10003830:	00000306 	br	10003840 <___vfprintf_internal_r+0x14d0>
10003834:	a5000204 	addi	r20,r20,8
10003838:	8c7ffc04 	addi	r17,r17,-16
1000383c:	e440720e 	bge	fp,r17,10003a08 <___vfprintf_internal_r+0x1698>
10003840:	b5800404 	addi	r22,r22,16
10003844:	94800044 	addi	r18,r18,1
10003848:	a5c00015 	stw	r23,0(r20)
1000384c:	a7000115 	stw	fp,4(r20)
10003850:	dd812015 	stw	r22,1152(sp)
10003854:	dc811f15 	stw	r18,1148(sp)
10003858:	1cbff60e 	bge	r3,r18,10003834 <__alt_data_end+0xf8003834>
1000385c:	8009883a 	mov	r4,r16
10003860:	980b883a 	mov	r5,r19
10003864:	d9811e04 	addi	r6,sp,1144
10003868:	d8c13e15 	stw	r3,1272(sp)
1000386c:	00096780 	call	10009678 <__sprint_r>
10003870:	d8c13e17 	ldw	r3,1272(sp)
10003874:	103bda1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003878:	dd812017 	ldw	r22,1152(sp)
1000387c:	dc811f17 	ldw	r18,1148(sp)
10003880:	dd000404 	addi	r20,sp,16
10003884:	003fec06 	br	10003838 <__alt_data_end+0xf8003838>
10003888:	00c00084 	movi	r3,2
1000388c:	ad84b03a 	or	r2,r21,r22
10003890:	003d5c06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003894:	d9012c17 	ldw	r4,1200(sp)
10003898:	980b883a 	mov	r5,r19
1000389c:	d9811e04 	addi	r6,sp,1144
100038a0:	00096780 	call	10009678 <__sprint_r>
100038a4:	103bce1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100038a8:	d8c12017 	ldw	r3,1152(sp)
100038ac:	da000404 	addi	r8,sp,16
100038b0:	d9413317 	ldw	r5,1228(sp)
100038b4:	d8812617 	ldw	r2,1176(sp)
100038b8:	d9013517 	ldw	r4,1236(sp)
100038bc:	8161883a 	add	r16,r16,r5
100038c0:	11000316 	blt	r2,r4,100038d0 <___vfprintf_internal_r+0x1560>
100038c4:	d9412a17 	ldw	r5,1192(sp)
100038c8:	2900004c 	andi	r4,r5,1
100038cc:	20000d26 	beq	r4,zero,10003904 <___vfprintf_internal_r+0x1594>
100038d0:	d9013817 	ldw	r4,1248(sp)
100038d4:	d9413417 	ldw	r5,1232(sp)
100038d8:	1907883a 	add	r3,r3,r4
100038dc:	d9011f17 	ldw	r4,1148(sp)
100038e0:	41400015 	stw	r5,0(r8)
100038e4:	d9413817 	ldw	r5,1248(sp)
100038e8:	21000044 	addi	r4,r4,1
100038ec:	d8c12015 	stw	r3,1152(sp)
100038f0:	41400115 	stw	r5,4(r8)
100038f4:	d9011f15 	stw	r4,1148(sp)
100038f8:	014001c4 	movi	r5,7
100038fc:	2901c716 	blt	r5,r4,1000401c <___vfprintf_internal_r+0x1cac>
10003900:	42000204 	addi	r8,r8,8
10003904:	d9013517 	ldw	r4,1236(sp)
10003908:	9425c83a 	sub	r18,r18,r16
1000390c:	2085c83a 	sub	r2,r4,r2
10003910:	1029883a 	mov	r20,r2
10003914:	9080010e 	bge	r18,r2,1000391c <___vfprintf_internal_r+0x15ac>
10003918:	9029883a 	mov	r20,r18
1000391c:	05000a0e 	bge	zero,r20,10003948 <___vfprintf_internal_r+0x15d8>
10003920:	d9011f17 	ldw	r4,1148(sp)
10003924:	1d07883a 	add	r3,r3,r20
10003928:	44000015 	stw	r16,0(r8)
1000392c:	21000044 	addi	r4,r4,1
10003930:	45000115 	stw	r20,4(r8)
10003934:	d8c12015 	stw	r3,1152(sp)
10003938:	d9011f15 	stw	r4,1148(sp)
1000393c:	014001c4 	movi	r5,7
10003940:	2901dd16 	blt	r5,r4,100040b8 <___vfprintf_internal_r+0x1d48>
10003944:	42000204 	addi	r8,r8,8
10003948:	a001d916 	blt	r20,zero,100040b0 <___vfprintf_internal_r+0x1d40>
1000394c:	1521c83a 	sub	r16,r2,r20
10003950:	043c970e 	bge	zero,r16,10002bb0 <__alt_data_end+0xf8002bb0>
10003954:	04800404 	movi	r18,16
10003958:	d8811f17 	ldw	r2,1148(sp)
1000395c:	05440074 	movhi	r21,4097
10003960:	ad468a84 	addi	r21,r21,6698
10003964:	943e140e 	bge	r18,r16,100031b8 <__alt_data_end+0xf80031b8>
10003968:	050001c4 	movi	r20,7
1000396c:	dd812c17 	ldw	r22,1200(sp)
10003970:	00000306 	br	10003980 <___vfprintf_internal_r+0x1610>
10003974:	42000204 	addi	r8,r8,8
10003978:	843ffc04 	addi	r16,r16,-16
1000397c:	943e0e0e 	bge	r18,r16,100031b8 <__alt_data_end+0xf80031b8>
10003980:	18c00404 	addi	r3,r3,16
10003984:	10800044 	addi	r2,r2,1
10003988:	45c00015 	stw	r23,0(r8)
1000398c:	44800115 	stw	r18,4(r8)
10003990:	d8c12015 	stw	r3,1152(sp)
10003994:	d8811f15 	stw	r2,1148(sp)
10003998:	a0bff60e 	bge	r20,r2,10003974 <__alt_data_end+0xf8003974>
1000399c:	b009883a 	mov	r4,r22
100039a0:	980b883a 	mov	r5,r19
100039a4:	d9811e04 	addi	r6,sp,1144
100039a8:	00096780 	call	10009678 <__sprint_r>
100039ac:	103b8c1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100039b0:	d8c12017 	ldw	r3,1152(sp)
100039b4:	d8811f17 	ldw	r2,1148(sp)
100039b8:	da000404 	addi	r8,sp,16
100039bc:	003fee06 	br	10003978 <__alt_data_end+0xf8003978>
100039c0:	d9012c17 	ldw	r4,1200(sp)
100039c4:	980b883a 	mov	r5,r19
100039c8:	d9811e04 	addi	r6,sp,1144
100039cc:	00096780 	call	10009678 <__sprint_r>
100039d0:	103b831e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100039d4:	d8c12017 	ldw	r3,1152(sp)
100039d8:	dc811f17 	ldw	r18,1148(sp)
100039dc:	da000404 	addi	r8,sp,16
100039e0:	003eaa06 	br	1000348c <__alt_data_end+0xf800348c>
100039e4:	d9012c17 	ldw	r4,1200(sp)
100039e8:	980b883a 	mov	r5,r19
100039ec:	d9811e04 	addi	r6,sp,1144
100039f0:	00096780 	call	10009678 <__sprint_r>
100039f4:	103b7a1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100039f8:	dd812017 	ldw	r22,1152(sp)
100039fc:	dc811f17 	ldw	r18,1148(sp)
10003a00:	dd000404 	addi	r20,sp,16
10003a04:	003eac06 	br	100034b8 <__alt_data_end+0xf80034b8>
10003a08:	8821883a 	mov	r16,r17
10003a0c:	dc412e17 	ldw	r17,1208(sp)
10003a10:	b42d883a 	add	r22,r22,r16
10003a14:	94800044 	addi	r18,r18,1
10003a18:	a5400015 	stw	r21,0(r20)
10003a1c:	a4000115 	stw	r16,4(r20)
10003a20:	dd812015 	stw	r22,1152(sp)
10003a24:	dc811f15 	stw	r18,1148(sp)
10003a28:	008001c4 	movi	r2,7
10003a2c:	14beb30e 	bge	r2,r18,100034fc <__alt_data_end+0xf80034fc>
10003a30:	003ecb06 	br	10003560 <__alt_data_end+0xf8003560>
10003a34:	d9012c17 	ldw	r4,1200(sp)
10003a38:	980b883a 	mov	r5,r19
10003a3c:	d9811e04 	addi	r6,sp,1144
10003a40:	00096780 	call	10009678 <__sprint_r>
10003a44:	103b661e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003a48:	d8c12017 	ldw	r3,1152(sp)
10003a4c:	da000404 	addi	r8,sp,16
10003a50:	003c1806 	br	10002ab4 <__alt_data_end+0xf8002ab4>
10003a54:	056bc83a 	sub	r21,zero,r21
10003a58:	a804c03a 	cmpne	r2,r21,zero
10003a5c:	05adc83a 	sub	r22,zero,r22
10003a60:	07000b44 	movi	fp,45
10003a64:	b0adc83a 	sub	r22,r22,r2
10003a68:	df012785 	stb	fp,1182(sp)
10003a6c:	00c00044 	movi	r3,1
10003a70:	ad84b03a 	or	r2,r21,r22
10003a74:	003b9106 	br	100028bc <__alt_data_end+0xf80028bc>
10003a78:	da013f15 	stw	r8,1276(sp)
10003a7c:	00092d00 	call	100092d0 <__fpclassifyd>
10003a80:	da013f17 	ldw	r8,1276(sp)
10003a84:	1000f226 	beq	r2,zero,10003e50 <___vfprintf_internal_r+0x1ae0>
10003a88:	05bff7c4 	movi	r22,-33
10003a8c:	00bfffc4 	movi	r2,-1
10003a90:	95ac703a 	and	r22,r18,r22
10003a94:	a0820b26 	beq	r20,r2,100042c4 <___vfprintf_internal_r+0x1f54>
10003a98:	008011c4 	movi	r2,71
10003a9c:	b081fc26 	beq	r22,r2,10004290 <___vfprintf_internal_r+0x1f20>
10003aa0:	d8c12a17 	ldw	r3,1192(sp)
10003aa4:	d9013917 	ldw	r4,1252(sp)
10003aa8:	18c04014 	ori	r3,r3,256
10003aac:	d8c12d15 	stw	r3,1204(sp)
10003ab0:	20020616 	blt	r4,zero,100042cc <___vfprintf_internal_r+0x1f5c>
10003ab4:	dd413917 	ldw	r21,1252(sp)
10003ab8:	d8012b05 	stb	zero,1196(sp)
10003abc:	00801984 	movi	r2,102
10003ac0:	9081a526 	beq	r18,r2,10004158 <___vfprintf_internal_r+0x1de8>
10003ac4:	00801184 	movi	r2,70
10003ac8:	9081a326 	beq	r18,r2,10004158 <___vfprintf_internal_r+0x1de8>
10003acc:	00801144 	movi	r2,69
10003ad0:	b0820226 	beq	r22,r2,100042dc <___vfprintf_internal_r+0x1f6c>
10003ad4:	a039883a 	mov	fp,r20
10003ad8:	d8812604 	addi	r2,sp,1176
10003adc:	d8800115 	stw	r2,4(sp)
10003ae0:	d9012c17 	ldw	r4,1200(sp)
10003ae4:	d8812504 	addi	r2,sp,1172
10003ae8:	d9413717 	ldw	r5,1244(sp)
10003aec:	d8800215 	stw	r2,8(sp)
10003af0:	d8812104 	addi	r2,sp,1156
10003af4:	df000015 	stw	fp,0(sp)
10003af8:	d8800315 	stw	r2,12(sp)
10003afc:	a80d883a 	mov	r6,r21
10003b00:	01c00084 	movi	r7,2
10003b04:	da013f15 	stw	r8,1276(sp)
10003b08:	00048480 	call	10004848 <_dtoa_r>
10003b0c:	1021883a 	mov	r16,r2
10003b10:	008019c4 	movi	r2,103
10003b14:	da013f17 	ldw	r8,1276(sp)
10003b18:	90800226 	beq	r18,r2,10003b24 <___vfprintf_internal_r+0x17b4>
10003b1c:	008011c4 	movi	r2,71
10003b20:	9080031e 	bne	r18,r2,10003b30 <___vfprintf_internal_r+0x17c0>
10003b24:	d9012a17 	ldw	r4,1192(sp)
10003b28:	2080004c 	andi	r2,r4,1
10003b2c:	1001fe26 	beq	r2,zero,10004328 <___vfprintf_internal_r+0x1fb8>
10003b30:	00801184 	movi	r2,70
10003b34:	8713883a 	add	r9,r16,fp
10003b38:	b0819f26 	beq	r22,r2,100041b8 <___vfprintf_internal_r+0x1e48>
10003b3c:	d9013717 	ldw	r4,1244(sp)
10003b40:	a80b883a 	mov	r5,r21
10003b44:	000d883a 	mov	r6,zero
10003b48:	000f883a 	mov	r7,zero
10003b4c:	da013f15 	stw	r8,1276(sp)
10003b50:	da413e15 	stw	r9,1272(sp)
10003b54:	000d4f80 	call	1000d4f8 <__eqdf2>
10003b58:	da013f17 	ldw	r8,1276(sp)
10003b5c:	da413e17 	ldw	r9,1272(sp)
10003b60:	10017b26 	beq	r2,zero,10004150 <___vfprintf_internal_r+0x1de0>
10003b64:	d8812117 	ldw	r2,1156(sp)
10003b68:	1240062e 	bgeu	r2,r9,10003b84 <___vfprintf_internal_r+0x1814>
10003b6c:	01000c04 	movi	r4,48
10003b70:	10c00044 	addi	r3,r2,1
10003b74:	d8c12115 	stw	r3,1156(sp)
10003b78:	11000005 	stb	r4,0(r2)
10003b7c:	d8812117 	ldw	r2,1156(sp)
10003b80:	127ffb36 	bltu	r2,r9,10003b70 <__alt_data_end+0xf8003b70>
10003b84:	1405c83a 	sub	r2,r2,r16
10003b88:	d8813515 	stw	r2,1236(sp)
10003b8c:	008011c4 	movi	r2,71
10003b90:	b0816926 	beq	r22,r2,10004138 <___vfprintf_internal_r+0x1dc8>
10003b94:	00801944 	movi	r2,101
10003b98:	14823f0e 	bge	r2,r18,10004498 <___vfprintf_internal_r+0x2128>
10003b9c:	d8c12617 	ldw	r3,1176(sp)
10003ba0:	00801984 	movi	r2,102
10003ba4:	d8c13315 	stw	r3,1228(sp)
10003ba8:	9081e126 	beq	r18,r2,10004330 <___vfprintf_internal_r+0x1fc0>
10003bac:	d8c13317 	ldw	r3,1228(sp)
10003bb0:	d9013517 	ldw	r4,1236(sp)
10003bb4:	1901cb16 	blt	r3,r4,100042e4 <___vfprintf_internal_r+0x1f74>
10003bb8:	d9412a17 	ldw	r5,1192(sp)
10003bbc:	2880004c 	andi	r2,r5,1
10003bc0:	1001d11e 	bne	r2,zero,10004308 <___vfprintf_internal_r+0x1f98>
10003bc4:	1805883a 	mov	r2,r3
10003bc8:	18023116 	blt	r3,zero,10004490 <___vfprintf_internal_r+0x2120>
10003bcc:	d8c13317 	ldw	r3,1228(sp)
10003bd0:	048019c4 	movi	r18,103
10003bd4:	d8c12e15 	stw	r3,1208(sp)
10003bd8:	df012b07 	ldb	fp,1196(sp)
10003bdc:	e0014e1e 	bne	fp,zero,10004118 <___vfprintf_internal_r+0x1da8>
10003be0:	d8c12d17 	ldw	r3,1204(sp)
10003be4:	df012783 	ldbu	fp,1182(sp)
10003be8:	d8812b15 	stw	r2,1196(sp)
10003bec:	d8c12a15 	stw	r3,1192(sp)
10003bf0:	0029883a 	mov	r20,zero
10003bf4:	003b4706 	br	10002914 <__alt_data_end+0xf8002914>
10003bf8:	d8c12f17 	ldw	r3,1212(sp)
10003bfc:	d9012f17 	ldw	r4,1212(sp)
10003c00:	d9412f17 	ldw	r5,1212(sp)
10003c04:	18c00017 	ldw	r3,0(r3)
10003c08:	21000117 	ldw	r4,4(r4)
10003c0c:	29400204 	addi	r5,r5,8
10003c10:	d8c13715 	stw	r3,1244(sp)
10003c14:	d9013915 	stw	r4,1252(sp)
10003c18:	d9412f15 	stw	r5,1212(sp)
10003c1c:	003c3606 	br	10002cf8 <__alt_data_end+0xf8002cf8>
10003c20:	d9412a17 	ldw	r5,1192(sp)
10003c24:	2880100c 	andi	r2,r5,64
10003c28:	1000b026 	beq	r2,zero,10003eec <___vfprintf_internal_r+0x1b7c>
10003c2c:	d8812f17 	ldw	r2,1212(sp)
10003c30:	002d883a 	mov	r22,zero
10003c34:	00c00044 	movi	r3,1
10003c38:	1540000b 	ldhu	r21,0(r2)
10003c3c:	10800104 	addi	r2,r2,4
10003c40:	d8812f15 	stw	r2,1212(sp)
10003c44:	a805883a 	mov	r2,r21
10003c48:	003c6e06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003c4c:	00c00084 	movi	r3,2
10003c50:	003c6c06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003c54:	d9412a17 	ldw	r5,1192(sp)
10003c58:	2880100c 	andi	r2,r5,64
10003c5c:	10009b26 	beq	r2,zero,10003ecc <___vfprintf_internal_r+0x1b5c>
10003c60:	d8812f17 	ldw	r2,1212(sp)
10003c64:	002d883a 	mov	r22,zero
10003c68:	0007883a 	mov	r3,zero
10003c6c:	1540000b 	ldhu	r21,0(r2)
10003c70:	10800104 	addi	r2,r2,4
10003c74:	d8812f15 	stw	r2,1212(sp)
10003c78:	a805883a 	mov	r2,r21
10003c7c:	003c6106 	br	10002e04 <__alt_data_end+0xf8002e04>
10003c80:	8c800007 	ldb	r18,0(r17)
10003c84:	003a1f06 	br	10002504 <__alt_data_end+0xf8002504>
10003c88:	d9412a17 	ldw	r5,1192(sp)
10003c8c:	2880100c 	andi	r2,r5,64
10003c90:	10009e26 	beq	r2,zero,10003f0c <___vfprintf_internal_r+0x1b9c>
10003c94:	d8812f17 	ldw	r2,1212(sp)
10003c98:	002d883a 	mov	r22,zero
10003c9c:	1540000b 	ldhu	r21,0(r2)
10003ca0:	10800104 	addi	r2,r2,4
10003ca4:	d8812f15 	stw	r2,1212(sp)
10003ca8:	003c9506 	br	10002f00 <__alt_data_end+0xf8002f00>
10003cac:	d9412a17 	ldw	r5,1192(sp)
10003cb0:	2880040c 	andi	r2,r5,16
10003cb4:	10007e1e 	bne	r2,zero,10003eb0 <___vfprintf_internal_r+0x1b40>
10003cb8:	d9412a17 	ldw	r5,1192(sp)
10003cbc:	2880100c 	andi	r2,r5,64
10003cc0:	10010826 	beq	r2,zero,100040e4 <___vfprintf_internal_r+0x1d74>
10003cc4:	d8c12f17 	ldw	r3,1212(sp)
10003cc8:	d9013117 	ldw	r4,1220(sp)
10003ccc:	18800017 	ldw	r2,0(r3)
10003cd0:	18c00104 	addi	r3,r3,4
10003cd4:	d8c12f15 	stw	r3,1212(sp)
10003cd8:	1100000d 	sth	r4,0(r2)
10003cdc:	0039e206 	br	10002468 <__alt_data_end+0xf8002468>
10003ce0:	d8c12a17 	ldw	r3,1192(sp)
10003ce4:	1880100c 	andi	r2,r3,64
10003ce8:	10006a26 	beq	r2,zero,10003e94 <___vfprintf_internal_r+0x1b24>
10003cec:	d9012f17 	ldw	r4,1212(sp)
10003cf0:	2540000f 	ldh	r21,0(r4)
10003cf4:	21000104 	addi	r4,r4,4
10003cf8:	d9012f15 	stw	r4,1212(sp)
10003cfc:	a82dd7fa 	srai	r22,r21,31
10003d00:	b005883a 	mov	r2,r22
10003d04:	003ae906 	br	100028ac <__alt_data_end+0xf80028ac>
10003d08:	dc012e17 	ldw	r16,1208(sp)
10003d0c:	a009883a 	mov	r4,r20
10003d10:	8829883a 	mov	r20,r17
10003d14:	2023883a 	mov	r17,r4
10003d18:	1d07883a 	add	r3,r3,r20
10003d1c:	10800044 	addi	r2,r2,1
10003d20:	45400015 	stw	r21,0(r8)
10003d24:	45000115 	stw	r20,4(r8)
10003d28:	d8c12015 	stw	r3,1152(sp)
10003d2c:	d8811f15 	stw	r2,1148(sp)
10003d30:	010001c4 	movi	r4,7
10003d34:	20bed716 	blt	r4,r2,10003894 <__alt_data_end+0xf8003894>
10003d38:	42000204 	addi	r8,r8,8
10003d3c:	003edc06 	br	100038b0 <__alt_data_end+0xf80038b0>
10003d40:	d9012c17 	ldw	r4,1200(sp)
10003d44:	980b883a 	mov	r5,r19
10003d48:	d9811e04 	addi	r6,sp,1144
10003d4c:	00096780 	call	10009678 <__sprint_r>
10003d50:	103aa31e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003d54:	d8c12017 	ldw	r3,1152(sp)
10003d58:	da000404 	addi	r8,sp,16
10003d5c:	003d5606 	br	100032b8 <__alt_data_end+0xf80032b8>
10003d60:	d9011f17 	ldw	r4,1148(sp)
10003d64:	01440074 	movhi	r5,4097
10003d68:	29468a04 	addi	r5,r5,6696
10003d6c:	18c00044 	addi	r3,r3,1
10003d70:	21000044 	addi	r4,r4,1
10003d74:	41400015 	stw	r5,0(r8)
10003d78:	01400044 	movi	r5,1
10003d7c:	41400115 	stw	r5,4(r8)
10003d80:	d8c12015 	stw	r3,1152(sp)
10003d84:	d9011f15 	stw	r4,1148(sp)
10003d88:	014001c4 	movi	r5,7
10003d8c:	29006a16 	blt	r5,r4,10003f38 <___vfprintf_internal_r+0x1bc8>
10003d90:	42000204 	addi	r8,r8,8
10003d94:	1025883a 	mov	r18,r2
10003d98:	9000051e 	bne	r18,zero,10003db0 <___vfprintf_internal_r+0x1a40>
10003d9c:	d8813517 	ldw	r2,1236(sp)
10003da0:	1000031e 	bne	r2,zero,10003db0 <___vfprintf_internal_r+0x1a40>
10003da4:	d9012a17 	ldw	r4,1192(sp)
10003da8:	2080004c 	andi	r2,r4,1
10003dac:	103b8026 	beq	r2,zero,10002bb0 <__alt_data_end+0xf8002bb0>
10003db0:	d8813417 	ldw	r2,1232(sp)
10003db4:	d9413817 	ldw	r5,1248(sp)
10003db8:	010001c4 	movi	r4,7
10003dbc:	40800015 	stw	r2,0(r8)
10003dc0:	d8811f17 	ldw	r2,1148(sp)
10003dc4:	1947883a 	add	r3,r3,r5
10003dc8:	41400115 	stw	r5,4(r8)
10003dcc:	10800044 	addi	r2,r2,1
10003dd0:	d8c12015 	stw	r3,1152(sp)
10003dd4:	d8811f15 	stw	r2,1148(sp)
10003dd8:	20813016 	blt	r4,r2,1000429c <___vfprintf_internal_r+0x1f2c>
10003ddc:	42000204 	addi	r8,r8,8
10003de0:	04a5c83a 	sub	r18,zero,r18
10003de4:	04807a0e 	bge	zero,r18,10003fd0 <___vfprintf_internal_r+0x1c60>
10003de8:	05000404 	movi	r20,16
10003dec:	05440074 	movhi	r21,4097
10003df0:	ad468a84 	addi	r21,r21,6698
10003df4:	a480920e 	bge	r20,r18,10004040 <___vfprintf_internal_r+0x1cd0>
10003df8:	058001c4 	movi	r22,7
10003dfc:	df012c17 	ldw	fp,1200(sp)
10003e00:	00000306 	br	10003e10 <___vfprintf_internal_r+0x1aa0>
10003e04:	42000204 	addi	r8,r8,8
10003e08:	94bffc04 	addi	r18,r18,-16
10003e0c:	a4808c0e 	bge	r20,r18,10004040 <___vfprintf_internal_r+0x1cd0>
10003e10:	18c00404 	addi	r3,r3,16
10003e14:	10800044 	addi	r2,r2,1
10003e18:	45c00015 	stw	r23,0(r8)
10003e1c:	45000115 	stw	r20,4(r8)
10003e20:	d8c12015 	stw	r3,1152(sp)
10003e24:	d8811f15 	stw	r2,1148(sp)
10003e28:	b0bff60e 	bge	r22,r2,10003e04 <__alt_data_end+0xf8003e04>
10003e2c:	e009883a 	mov	r4,fp
10003e30:	980b883a 	mov	r5,r19
10003e34:	d9811e04 	addi	r6,sp,1144
10003e38:	00096780 	call	10009678 <__sprint_r>
10003e3c:	103a681e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003e40:	d8c12017 	ldw	r3,1152(sp)
10003e44:	d8811f17 	ldw	r2,1148(sp)
10003e48:	da000404 	addi	r8,sp,16
10003e4c:	003fee06 	br	10003e08 <__alt_data_end+0xf8003e08>
10003e50:	008011c4 	movi	r2,71
10003e54:	1480ad16 	blt	r2,r18,1000410c <___vfprintf_internal_r+0x1d9c>
10003e58:	04040074 	movhi	r16,4097
10003e5c:	84067c04 	addi	r16,r16,6640
10003e60:	d9012a17 	ldw	r4,1192(sp)
10003e64:	00bfdfc4 	movi	r2,-129
10003e68:	00c000c4 	movi	r3,3
10003e6c:	2088703a 	and	r4,r4,r2
10003e70:	d8c12b15 	stw	r3,1196(sp)
10003e74:	d9012a15 	stw	r4,1192(sp)
10003e78:	df012783 	ldbu	fp,1182(sp)
10003e7c:	d8c12e15 	stw	r3,1208(sp)
10003e80:	0029883a 	mov	r20,zero
10003e84:	d8013315 	stw	zero,1228(sp)
10003e88:	003aa206 	br	10002914 <__alt_data_end+0xf8002914>
10003e8c:	dd012e15 	stw	r20,1208(sp)
10003e90:	003c8206 	br	1000309c <__alt_data_end+0xf800309c>
10003e94:	d9412f17 	ldw	r5,1212(sp)
10003e98:	2d400017 	ldw	r21,0(r5)
10003e9c:	29400104 	addi	r5,r5,4
10003ea0:	d9412f15 	stw	r5,1212(sp)
10003ea4:	a82dd7fa 	srai	r22,r21,31
10003ea8:	b005883a 	mov	r2,r22
10003eac:	003a7f06 	br	100028ac <__alt_data_end+0xf80028ac>
10003eb0:	d8c12f17 	ldw	r3,1212(sp)
10003eb4:	d9013117 	ldw	r4,1220(sp)
10003eb8:	18800017 	ldw	r2,0(r3)
10003ebc:	18c00104 	addi	r3,r3,4
10003ec0:	d8c12f15 	stw	r3,1212(sp)
10003ec4:	11000015 	stw	r4,0(r2)
10003ec8:	00396706 	br	10002468 <__alt_data_end+0xf8002468>
10003ecc:	d8c12f17 	ldw	r3,1212(sp)
10003ed0:	002d883a 	mov	r22,zero
10003ed4:	1d400017 	ldw	r21,0(r3)
10003ed8:	18c00104 	addi	r3,r3,4
10003edc:	d8c12f15 	stw	r3,1212(sp)
10003ee0:	a805883a 	mov	r2,r21
10003ee4:	0007883a 	mov	r3,zero
10003ee8:	003bc606 	br	10002e04 <__alt_data_end+0xf8002e04>
10003eec:	d8c12f17 	ldw	r3,1212(sp)
10003ef0:	002d883a 	mov	r22,zero
10003ef4:	1d400017 	ldw	r21,0(r3)
10003ef8:	18c00104 	addi	r3,r3,4
10003efc:	d8c12f15 	stw	r3,1212(sp)
10003f00:	a805883a 	mov	r2,r21
10003f04:	00c00044 	movi	r3,1
10003f08:	003bbe06 	br	10002e04 <__alt_data_end+0xf8002e04>
10003f0c:	d8c12f17 	ldw	r3,1212(sp)
10003f10:	002d883a 	mov	r22,zero
10003f14:	1d400017 	ldw	r21,0(r3)
10003f18:	18c00104 	addi	r3,r3,4
10003f1c:	d8c12f15 	stw	r3,1212(sp)
10003f20:	003bf706 	br	10002f00 <__alt_data_end+0xf8002f00>
10003f24:	04040074 	movhi	r16,4097
10003f28:	84067a04 	addi	r16,r16,6632
10003f2c:	003b8506 	br	10002d44 <__alt_data_end+0xf8002d44>
10003f30:	45000204 	addi	r20,r8,8
10003f34:	003d7206 	br	10003500 <__alt_data_end+0xf8003500>
10003f38:	d9012c17 	ldw	r4,1200(sp)
10003f3c:	980b883a 	mov	r5,r19
10003f40:	d9811e04 	addi	r6,sp,1144
10003f44:	00096780 	call	10009678 <__sprint_r>
10003f48:	103a251e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003f4c:	dc812617 	ldw	r18,1176(sp)
10003f50:	d8c12017 	ldw	r3,1152(sp)
10003f54:	da000404 	addi	r8,sp,16
10003f58:	003f8f06 	br	10003d98 <__alt_data_end+0xf8003d98>
10003f5c:	d9012a17 	ldw	r4,1192(sp)
10003f60:	8c400044 	addi	r17,r17,1
10003f64:	14800047 	ldb	r18,1(r2)
10003f68:	21000814 	ori	r4,r4,32
10003f6c:	d9012a15 	stw	r4,1192(sp)
10003f70:	00396406 	br	10002504 <__alt_data_end+0xf8002504>
10003f74:	d9012c17 	ldw	r4,1200(sp)
10003f78:	980b883a 	mov	r5,r19
10003f7c:	d9811e04 	addi	r6,sp,1144
10003f80:	00096780 	call	10009678 <__sprint_r>
10003f84:	103a161e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003f88:	d8c12017 	ldw	r3,1152(sp)
10003f8c:	da000404 	addi	r8,sp,16
10003f90:	003cdc06 	br	10003304 <__alt_data_end+0xf8003304>
10003f94:	df013f15 	stw	fp,1276(sp)
10003f98:	00022e40 	call	100022e4 <strlen>
10003f9c:	d8812e15 	stw	r2,1208(sp)
10003fa0:	da013f17 	ldw	r8,1276(sp)
10003fa4:	103c3f0e 	bge	r2,zero,100030a4 <__alt_data_end+0xf80030a4>
10003fa8:	0005883a 	mov	r2,zero
10003fac:	003c3d06 	br	100030a4 <__alt_data_end+0xf80030a4>
10003fb0:	d9012c17 	ldw	r4,1200(sp)
10003fb4:	980b883a 	mov	r5,r19
10003fb8:	d9811e04 	addi	r6,sp,1144
10003fbc:	00096780 	call	10009678 <__sprint_r>
10003fc0:	103a071e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10003fc4:	d8c12017 	ldw	r3,1152(sp)
10003fc8:	d8811f17 	ldw	r2,1148(sp)
10003fcc:	da000404 	addi	r8,sp,16
10003fd0:	d9013517 	ldw	r4,1236(sp)
10003fd4:	10800044 	addi	r2,r2,1
10003fd8:	44000015 	stw	r16,0(r8)
10003fdc:	20c7883a 	add	r3,r4,r3
10003fe0:	003aed06 	br	10002b98 <__alt_data_end+0xf8002b98>
10003fe4:	01040074 	movhi	r4,4097
10003fe8:	21068e84 	addi	r4,r4,6714
10003fec:	d9013615 	stw	r4,1240(sp)
10003ff0:	003a8706 	br	10002a10 <__alt_data_end+0xf8002a10>
10003ff4:	0029883a 	mov	r20,zero
10003ff8:	003dd706 	br	10003758 <__alt_data_end+0xf8003758>
10003ffc:	d9012c17 	ldw	r4,1200(sp)
10004000:	980b883a 	mov	r5,r19
10004004:	d9811e04 	addi	r6,sp,1144
10004008:	00096780 	call	10009678 <__sprint_r>
1000400c:	1039f41e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10004010:	d8c12017 	ldw	r3,1152(sp)
10004014:	da000404 	addi	r8,sp,16
10004018:	003dce06 	br	10003754 <__alt_data_end+0xf8003754>
1000401c:	d9012c17 	ldw	r4,1200(sp)
10004020:	980b883a 	mov	r5,r19
10004024:	d9811e04 	addi	r6,sp,1144
10004028:	00096780 	call	10009678 <__sprint_r>
1000402c:	1039ec1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
10004030:	d8812617 	ldw	r2,1176(sp)
10004034:	d8c12017 	ldw	r3,1152(sp)
10004038:	da000404 	addi	r8,sp,16
1000403c:	003e3106 	br	10003904 <__alt_data_end+0xf8003904>
10004040:	1c87883a 	add	r3,r3,r18
10004044:	10800044 	addi	r2,r2,1
10004048:	45400015 	stw	r21,0(r8)
1000404c:	44800115 	stw	r18,4(r8)
10004050:	d8c12015 	stw	r3,1152(sp)
10004054:	d8811f15 	stw	r2,1148(sp)
10004058:	010001c4 	movi	r4,7
1000405c:	20bfd416 	blt	r4,r2,10003fb0 <__alt_data_end+0xf8003fb0>
10004060:	42000204 	addi	r8,r8,8
10004064:	003fda06 	br	10003fd0 <__alt_data_end+0xf8003fd0>
10004068:	01440074 	movhi	r5,4097
1000406c:	29468e84 	addi	r5,r5,6714
10004070:	d9413615 	stw	r5,1240(sp)
10004074:	003af406 	br	10002c48 <__alt_data_end+0xf8002c48>
10004078:	00800184 	movi	r2,6
1000407c:	1500012e 	bgeu	r2,r20,10004084 <___vfprintf_internal_r+0x1d14>
10004080:	1029883a 	mov	r20,r2
10004084:	dd012e15 	stw	r20,1208(sp)
10004088:	a005883a 	mov	r2,r20
1000408c:	a000d216 	blt	r20,zero,100043d8 <___vfprintf_internal_r+0x2068>
10004090:	d8812b15 	stw	r2,1196(sp)
10004094:	dd412f15 	stw	r21,1212(sp)
10004098:	0029883a 	mov	r20,zero
1000409c:	d8013315 	stw	zero,1228(sp)
100040a0:	04040074 	movhi	r16,4097
100040a4:	84068804 	addi	r16,r16,6688
100040a8:	0005883a 	mov	r2,zero
100040ac:	003a2006 	br	10002930 <__alt_data_end+0xf8002930>
100040b0:	0029883a 	mov	r20,zero
100040b4:	003e2506 	br	1000394c <__alt_data_end+0xf800394c>
100040b8:	d9012c17 	ldw	r4,1200(sp)
100040bc:	980b883a 	mov	r5,r19
100040c0:	d9811e04 	addi	r6,sp,1144
100040c4:	00096780 	call	10009678 <__sprint_r>
100040c8:	1039c51e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100040cc:	d8812617 	ldw	r2,1176(sp)
100040d0:	d9413517 	ldw	r5,1236(sp)
100040d4:	d8c12017 	ldw	r3,1152(sp)
100040d8:	da000404 	addi	r8,sp,16
100040dc:	2885c83a 	sub	r2,r5,r2
100040e0:	003e1906 	br	10003948 <__alt_data_end+0xf8003948>
100040e4:	d9412f17 	ldw	r5,1212(sp)
100040e8:	d8c13117 	ldw	r3,1220(sp)
100040ec:	28800017 	ldw	r2,0(r5)
100040f0:	29400104 	addi	r5,r5,4
100040f4:	d9412f15 	stw	r5,1212(sp)
100040f8:	10c00015 	stw	r3,0(r2)
100040fc:	0038da06 	br	10002468 <__alt_data_end+0xf8002468>
10004100:	07000b44 	movi	fp,45
10004104:	df012785 	stb	fp,1182(sp)
10004108:	003b0a06 	br	10002d34 <__alt_data_end+0xf8002d34>
1000410c:	04040074 	movhi	r16,4097
10004110:	84067d04 	addi	r16,r16,6644
10004114:	003f5206 	br	10003e60 <__alt_data_end+0xf8003e60>
10004118:	00c00b44 	movi	r3,45
1000411c:	d8c12785 	stb	r3,1182(sp)
10004120:	d8c12d17 	ldw	r3,1204(sp)
10004124:	d8812b15 	stw	r2,1196(sp)
10004128:	0029883a 	mov	r20,zero
1000412c:	d8c12a15 	stw	r3,1192(sp)
10004130:	00800b44 	movi	r2,45
10004134:	0039fb06 	br	10002924 <__alt_data_end+0xf8002924>
10004138:	d8812617 	ldw	r2,1176(sp)
1000413c:	00ffff44 	movi	r3,-3
10004140:	10c03216 	blt	r2,r3,1000420c <___vfprintf_internal_r+0x1e9c>
10004144:	a0803116 	blt	r20,r2,1000420c <___vfprintf_internal_r+0x1e9c>
10004148:	d8813315 	stw	r2,1228(sp)
1000414c:	003e9706 	br	10003bac <__alt_data_end+0xf8003bac>
10004150:	4805883a 	mov	r2,r9
10004154:	003e8b06 	br	10003b84 <__alt_data_end+0xf8003b84>
10004158:	d8812604 	addi	r2,sp,1176
1000415c:	d8800115 	stw	r2,4(sp)
10004160:	d9012c17 	ldw	r4,1200(sp)
10004164:	d8812504 	addi	r2,sp,1172
10004168:	d9413717 	ldw	r5,1244(sp)
1000416c:	d8800215 	stw	r2,8(sp)
10004170:	d8812104 	addi	r2,sp,1156
10004174:	dd000015 	stw	r20,0(sp)
10004178:	d8800315 	stw	r2,12(sp)
1000417c:	a80d883a 	mov	r6,r21
10004180:	01c000c4 	movi	r7,3
10004184:	da013f15 	stw	r8,1276(sp)
10004188:	00048480 	call	10004848 <_dtoa_r>
1000418c:	1021883a 	mov	r16,r2
10004190:	a039883a 	mov	fp,r20
10004194:	da013f17 	ldw	r8,1276(sp)
10004198:	003e6506 	br	10003b30 <__alt_data_end+0xf8003b30>
1000419c:	dd012b15 	stw	r20,1196(sp)
100041a0:	dd012e15 	stw	r20,1208(sp)
100041a4:	df012783 	ldbu	fp,1182(sp)
100041a8:	dd412f15 	stw	r21,1212(sp)
100041ac:	0029883a 	mov	r20,zero
100041b0:	d8013315 	stw	zero,1228(sp)
100041b4:	0039d706 	br	10002914 <__alt_data_end+0xf8002914>
100041b8:	81000007 	ldb	r4,0(r16)
100041bc:	00800c04 	movi	r2,48
100041c0:	20800326 	beq	r4,r2,100041d0 <___vfprintf_internal_r+0x1e60>
100041c4:	d8c12617 	ldw	r3,1176(sp)
100041c8:	48d3883a 	add	r9,r9,r3
100041cc:	003e5b06 	br	10003b3c <__alt_data_end+0xf8003b3c>
100041d0:	d9013717 	ldw	r4,1244(sp)
100041d4:	a80b883a 	mov	r5,r21
100041d8:	000d883a 	mov	r6,zero
100041dc:	000f883a 	mov	r7,zero
100041e0:	da013f15 	stw	r8,1276(sp)
100041e4:	da413e15 	stw	r9,1272(sp)
100041e8:	000d4f80 	call	1000d4f8 <__eqdf2>
100041ec:	da013f17 	ldw	r8,1276(sp)
100041f0:	da413e17 	ldw	r9,1272(sp)
100041f4:	103ff326 	beq	r2,zero,100041c4 <__alt_data_end+0xf80041c4>
100041f8:	00800044 	movi	r2,1
100041fc:	1707c83a 	sub	r3,r2,fp
10004200:	d8c12615 	stw	r3,1176(sp)
10004204:	48d3883a 	add	r9,r9,r3
10004208:	003e4c06 	br	10003b3c <__alt_data_end+0xf8003b3c>
1000420c:	94bfff84 	addi	r18,r18,-2
10004210:	157fffc4 	addi	r21,r2,-1
10004214:	dd412615 	stw	r21,1176(sp)
10004218:	dc8122c5 	stb	r18,1163(sp)
1000421c:	a8009016 	blt	r21,zero,10004460 <___vfprintf_internal_r+0x20f0>
10004220:	00800ac4 	movi	r2,43
10004224:	d8812305 	stb	r2,1164(sp)
10004228:	05000244 	movi	r20,9
1000422c:	a5404a16 	blt	r20,r21,10004358 <___vfprintf_internal_r+0x1fe8>
10004230:	00800c04 	movi	r2,48
10004234:	ad400c04 	addi	r21,r21,48
10004238:	d8812345 	stb	r2,1165(sp)
1000423c:	dd412385 	stb	r21,1166(sp)
10004240:	d8c123c4 	addi	r3,sp,1167
10004244:	d88122c4 	addi	r2,sp,1163
10004248:	1885c83a 	sub	r2,r3,r2
1000424c:	d8c13517 	ldw	r3,1236(sp)
10004250:	d9013517 	ldw	r4,1236(sp)
10004254:	d8813a15 	stw	r2,1256(sp)
10004258:	1887883a 	add	r3,r3,r2
1000425c:	d8c12e15 	stw	r3,1208(sp)
10004260:	00800044 	movi	r2,1
10004264:	11007a0e 	bge	r2,r4,10004450 <___vfprintf_internal_r+0x20e0>
10004268:	d8c12e17 	ldw	r3,1208(sp)
1000426c:	18c00044 	addi	r3,r3,1
10004270:	d8c12e15 	stw	r3,1208(sp)
10004274:	1805883a 	mov	r2,r3
10004278:	18000216 	blt	r3,zero,10004284 <___vfprintf_internal_r+0x1f14>
1000427c:	d8013315 	stw	zero,1228(sp)
10004280:	003e5506 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004284:	0005883a 	mov	r2,zero
10004288:	d8013315 	stw	zero,1228(sp)
1000428c:	003e5206 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004290:	a03e031e 	bne	r20,zero,10003aa0 <__alt_data_end+0xf8003aa0>
10004294:	8029883a 	mov	r20,r16
10004298:	003e0106 	br	10003aa0 <__alt_data_end+0xf8003aa0>
1000429c:	d9012c17 	ldw	r4,1200(sp)
100042a0:	980b883a 	mov	r5,r19
100042a4:	d9811e04 	addi	r6,sp,1144
100042a8:	00096780 	call	10009678 <__sprint_r>
100042ac:	10394c1e 	bne	r2,zero,100027e0 <__alt_data_end+0xf80027e0>
100042b0:	dc812617 	ldw	r18,1176(sp)
100042b4:	d8c12017 	ldw	r3,1152(sp)
100042b8:	d8811f17 	ldw	r2,1148(sp)
100042bc:	da000404 	addi	r8,sp,16
100042c0:	003ec706 	br	10003de0 <__alt_data_end+0xf8003de0>
100042c4:	05000184 	movi	r20,6
100042c8:	003df506 	br	10003aa0 <__alt_data_end+0xf8003aa0>
100042cc:	00c00b44 	movi	r3,45
100042d0:	2560003c 	xorhi	r21,r4,32768
100042d4:	d8c12b05 	stb	r3,1196(sp)
100042d8:	003df806 	br	10003abc <__alt_data_end+0xf8003abc>
100042dc:	a7000044 	addi	fp,r20,1
100042e0:	003dfd06 	br	10003ad8 <__alt_data_end+0xf8003ad8>
100042e4:	d8c13317 	ldw	r3,1228(sp)
100042e8:	00c0610e 	bge	zero,r3,10004470 <___vfprintf_internal_r+0x2100>
100042ec:	00800044 	movi	r2,1
100042f0:	d9013517 	ldw	r4,1236(sp)
100042f4:	1105883a 	add	r2,r2,r4
100042f8:	d8812e15 	stw	r2,1208(sp)
100042fc:	10000716 	blt	r2,zero,1000431c <___vfprintf_internal_r+0x1fac>
10004300:	048019c4 	movi	r18,103
10004304:	003e3406 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004308:	d8c13317 	ldw	r3,1228(sp)
1000430c:	18c00044 	addi	r3,r3,1
10004310:	d8c12e15 	stw	r3,1208(sp)
10004314:	1805883a 	mov	r2,r3
10004318:	183ff90e 	bge	r3,zero,10004300 <__alt_data_end+0xf8004300>
1000431c:	0005883a 	mov	r2,zero
10004320:	048019c4 	movi	r18,103
10004324:	003e2c06 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004328:	d8812117 	ldw	r2,1156(sp)
1000432c:	003e1506 	br	10003b84 <__alt_data_end+0xf8003b84>
10004330:	00c0400e 	bge	zero,r3,10004434 <___vfprintf_internal_r+0x20c4>
10004334:	a0002a1e 	bne	r20,zero,100043e0 <___vfprintf_internal_r+0x2070>
10004338:	d9012a17 	ldw	r4,1192(sp)
1000433c:	2080004c 	andi	r2,r4,1
10004340:	1000271e 	bne	r2,zero,100043e0 <___vfprintf_internal_r+0x2070>
10004344:	1805883a 	mov	r2,r3
10004348:	18005a16 	blt	r3,zero,100044b4 <___vfprintf_internal_r+0x2144>
1000434c:	d8c13317 	ldw	r3,1228(sp)
10004350:	d8c12e15 	stw	r3,1208(sp)
10004354:	003e2006 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004358:	d8c12284 	addi	r3,sp,1162
1000435c:	4039883a 	mov	fp,r8
10004360:	a809883a 	mov	r4,r21
10004364:	01400284 	movi	r5,10
10004368:	182d883a 	mov	r22,r3
1000436c:	000c25c0 	call	1000c25c <__modsi3>
10004370:	10800c04 	addi	r2,r2,48
10004374:	a809883a 	mov	r4,r21
10004378:	b0800005 	stb	r2,0(r22)
1000437c:	01400284 	movi	r5,10
10004380:	000c2140 	call	1000c214 <__divsi3>
10004384:	102b883a 	mov	r21,r2
10004388:	b0ffffc4 	addi	r3,r22,-1
1000438c:	a0bff416 	blt	r20,r2,10004360 <__alt_data_end+0xf8004360>
10004390:	11400c04 	addi	r5,r2,48
10004394:	b17fffc5 	stb	r5,-1(r22)
10004398:	d88122c4 	addi	r2,sp,1163
1000439c:	e011883a 	mov	r8,fp
100043a0:	1880462e 	bgeu	r3,r2,100044bc <___vfprintf_internal_r+0x214c>
100043a4:	d9012344 	addi	r4,sp,1165
100043a8:	b007883a 	mov	r3,r22
100043ac:	00000206 	br	100043b8 <___vfprintf_internal_r+0x2048>
100043b0:	19400003 	ldbu	r5,0(r3)
100043b4:	18c00044 	addi	r3,r3,1
100043b8:	21400005 	stb	r5,0(r4)
100043bc:	21000044 	addi	r4,r4,1
100043c0:	10fffb1e 	bne	r2,r3,100043b0 <__alt_data_end+0xf80043b0>
100043c4:	d8c12304 	addi	r3,sp,1164
100043c8:	1d87c83a 	sub	r3,r3,r22
100043cc:	d9412344 	addi	r5,sp,1165
100043d0:	28c7883a 	add	r3,r5,r3
100043d4:	003f9c06 	br	10004248 <__alt_data_end+0xf8004248>
100043d8:	0005883a 	mov	r2,zero
100043dc:	003f2c06 	br	10004090 <__alt_data_end+0xf8004090>
100043e0:	d8c13317 	ldw	r3,1228(sp)
100043e4:	a5000044 	addi	r20,r20,1
100043e8:	1d29883a 	add	r20,r3,r20
100043ec:	dd012e15 	stw	r20,1208(sp)
100043f0:	a005883a 	mov	r2,r20
100043f4:	a03df80e 	bge	r20,zero,10003bd8 <__alt_data_end+0xf8003bd8>
100043f8:	0005883a 	mov	r2,zero
100043fc:	003df606 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004400:	043fffc4 	movi	r16,-1
10004404:	0038d406 	br	10002758 <__alt_data_end+0xf8002758>
10004408:	d9012f17 	ldw	r4,1212(sp)
1000440c:	8c800043 	ldbu	r18,1(r17)
10004410:	1023883a 	mov	r17,r2
10004414:	20c00017 	ldw	r3,0(r4)
10004418:	21000104 	addi	r4,r4,4
1000441c:	d9012f15 	stw	r4,1212(sp)
10004420:	18001f16 	blt	r3,zero,100044a0 <___vfprintf_internal_r+0x2130>
10004424:	94803fcc 	andi	r18,r18,255
10004428:	9480201c 	xori	r18,r18,128
1000442c:	94bfe004 	addi	r18,r18,-128
10004430:	00383406 	br	10002504 <__alt_data_end+0xf8002504>
10004434:	a000111e 	bne	r20,zero,1000447c <___vfprintf_internal_r+0x210c>
10004438:	d9012a17 	ldw	r4,1192(sp)
1000443c:	2080004c 	andi	r2,r4,1
10004440:	10000e1e 	bne	r2,zero,1000447c <___vfprintf_internal_r+0x210c>
10004444:	00800044 	movi	r2,1
10004448:	d8812e15 	stw	r2,1208(sp)
1000444c:	003de206 	br	10003bd8 <__alt_data_end+0xf8003bd8>
10004450:	d9412a17 	ldw	r5,1192(sp)
10004454:	2884703a 	and	r2,r5,r2
10004458:	103f831e 	bne	r2,zero,10004268 <__alt_data_end+0xf8004268>
1000445c:	003f8506 	br	10004274 <__alt_data_end+0xf8004274>
10004460:	00800b44 	movi	r2,45
10004464:	056bc83a 	sub	r21,zero,r21
10004468:	d8812305 	stb	r2,1164(sp)
1000446c:	003f6e06 	br	10004228 <__alt_data_end+0xf8004228>
10004470:	00800084 	movi	r2,2
10004474:	10c5c83a 	sub	r2,r2,r3
10004478:	003f9d06 	br	100042f0 <__alt_data_end+0xf80042f0>
1000447c:	a5000084 	addi	r20,r20,2
10004480:	dd012e15 	stw	r20,1208(sp)
10004484:	a005883a 	mov	r2,r20
10004488:	a03dd30e 	bge	r20,zero,10003bd8 <__alt_data_end+0xf8003bd8>
1000448c:	003fda06 	br	100043f8 <__alt_data_end+0xf80043f8>
10004490:	0005883a 	mov	r2,zero
10004494:	003dcd06 	br	10003bcc <__alt_data_end+0xf8003bcc>
10004498:	d8812617 	ldw	r2,1176(sp)
1000449c:	003f5c06 	br	10004210 <__alt_data_end+0xf8004210>
100044a0:	94803fcc 	andi	r18,r18,255
100044a4:	9480201c 	xori	r18,r18,128
100044a8:	00ffffc4 	movi	r3,-1
100044ac:	94bfe004 	addi	r18,r18,-128
100044b0:	00381406 	br	10002504 <__alt_data_end+0xf8002504>
100044b4:	0005883a 	mov	r2,zero
100044b8:	003fa406 	br	1000434c <__alt_data_end+0xf800434c>
100044bc:	d8c12344 	addi	r3,sp,1165
100044c0:	003f6106 	br	10004248 <__alt_data_end+0xf8004248>

100044c4 <__vfprintf_internal>:
100044c4:	00840074 	movhi	r2,4097
100044c8:	108de504 	addi	r2,r2,14228
100044cc:	2007883a 	mov	r3,r4
100044d0:	11000017 	ldw	r4,0(r2)
100044d4:	2805883a 	mov	r2,r5
100044d8:	300f883a 	mov	r7,r6
100044dc:	180b883a 	mov	r5,r3
100044e0:	100d883a 	mov	r6,r2
100044e4:	00023701 	jmpi	10002370 <___vfprintf_internal_r>

100044e8 <__swsetup_r>:
100044e8:	00840074 	movhi	r2,4097
100044ec:	108de504 	addi	r2,r2,14228
100044f0:	10800017 	ldw	r2,0(r2)
100044f4:	defffd04 	addi	sp,sp,-12
100044f8:	dc400115 	stw	r17,4(sp)
100044fc:	dc000015 	stw	r16,0(sp)
10004500:	dfc00215 	stw	ra,8(sp)
10004504:	2023883a 	mov	r17,r4
10004508:	2821883a 	mov	r16,r5
1000450c:	10000226 	beq	r2,zero,10004518 <__swsetup_r+0x30>
10004510:	10c00e17 	ldw	r3,56(r2)
10004514:	18002e26 	beq	r3,zero,100045d0 <__swsetup_r+0xe8>
10004518:	8080030b 	ldhu	r2,12(r16)
1000451c:	10c0020c 	andi	r3,r2,8
10004520:	100d883a 	mov	r6,r2
10004524:	18000f26 	beq	r3,zero,10004564 <__swsetup_r+0x7c>
10004528:	80c00417 	ldw	r3,16(r16)
1000452c:	18001526 	beq	r3,zero,10004584 <__swsetup_r+0x9c>
10004530:	1100004c 	andi	r4,r2,1
10004534:	20001c1e 	bne	r4,zero,100045a8 <__swsetup_r+0xc0>
10004538:	1080008c 	andi	r2,r2,2
1000453c:	1000271e 	bne	r2,zero,100045dc <__swsetup_r+0xf4>
10004540:	80800517 	ldw	r2,20(r16)
10004544:	80800215 	stw	r2,8(r16)
10004548:	18001c26 	beq	r3,zero,100045bc <__swsetup_r+0xd4>
1000454c:	0005883a 	mov	r2,zero
10004550:	dfc00217 	ldw	ra,8(sp)
10004554:	dc400117 	ldw	r17,4(sp)
10004558:	dc000017 	ldw	r16,0(sp)
1000455c:	dec00304 	addi	sp,sp,12
10004560:	f800283a 	ret
10004564:	3080040c 	andi	r2,r6,16
10004568:	10001726 	beq	r2,zero,100045c8 <__swsetup_r+0xe0>
1000456c:	3080010c 	andi	r2,r6,4
10004570:	10001d1e 	bne	r2,zero,100045e8 <__swsetup_r+0x100>
10004574:	80c00417 	ldw	r3,16(r16)
10004578:	30800214 	ori	r2,r6,8
1000457c:	8080030d 	sth	r2,12(r16)
10004580:	183feb1e 	bne	r3,zero,10004530 <__alt_data_end+0xf8004530>
10004584:	1140a00c 	andi	r5,r2,640
10004588:	01008004 	movi	r4,512
1000458c:	293fe826 	beq	r5,r4,10004530 <__alt_data_end+0xf8004530>
10004590:	8809883a 	mov	r4,r17
10004594:	800b883a 	mov	r5,r16
10004598:	0006f880 	call	10006f88 <__smakebuf_r>
1000459c:	8080030b 	ldhu	r2,12(r16)
100045a0:	80c00417 	ldw	r3,16(r16)
100045a4:	003fe206 	br	10004530 <__alt_data_end+0xf8004530>
100045a8:	80800517 	ldw	r2,20(r16)
100045ac:	80000215 	stw	zero,8(r16)
100045b0:	0085c83a 	sub	r2,zero,r2
100045b4:	80800615 	stw	r2,24(r16)
100045b8:	183fe41e 	bne	r3,zero,1000454c <__alt_data_end+0xf800454c>
100045bc:	8080030b 	ldhu	r2,12(r16)
100045c0:	1080200c 	andi	r2,r2,128
100045c4:	103fe226 	beq	r2,zero,10004550 <__alt_data_end+0xf8004550>
100045c8:	00bfffc4 	movi	r2,-1
100045cc:	003fe006 	br	10004550 <__alt_data_end+0xf8004550>
100045d0:	1009883a 	mov	r4,r2
100045d4:	00061a40 	call	100061a4 <__sinit>
100045d8:	003fcf06 	br	10004518 <__alt_data_end+0xf8004518>
100045dc:	0005883a 	mov	r2,zero
100045e0:	80800215 	stw	r2,8(r16)
100045e4:	003fd806 	br	10004548 <__alt_data_end+0xf8004548>
100045e8:	81400c17 	ldw	r5,48(r16)
100045ec:	28000626 	beq	r5,zero,10004608 <__swsetup_r+0x120>
100045f0:	80801004 	addi	r2,r16,64
100045f4:	28800326 	beq	r5,r2,10004604 <__swsetup_r+0x11c>
100045f8:	8809883a 	mov	r4,r17
100045fc:	00065d80 	call	100065d8 <_free_r>
10004600:	8180030b 	ldhu	r6,12(r16)
10004604:	80000c15 	stw	zero,48(r16)
10004608:	80c00417 	ldw	r3,16(r16)
1000460c:	00bff6c4 	movi	r2,-37
10004610:	118c703a 	and	r6,r2,r6
10004614:	80000115 	stw	zero,4(r16)
10004618:	80c00015 	stw	r3,0(r16)
1000461c:	003fd606 	br	10004578 <__alt_data_end+0xf8004578>

10004620 <quorem>:
10004620:	defff204 	addi	sp,sp,-56
10004624:	dd400915 	stw	r21,36(sp)
10004628:	20800417 	ldw	r2,16(r4)
1000462c:	2d400417 	ldw	r21,16(r5)
10004630:	dfc00d15 	stw	ra,52(sp)
10004634:	df000c15 	stw	fp,48(sp)
10004638:	ddc00b15 	stw	r23,44(sp)
1000463c:	dd800a15 	stw	r22,40(sp)
10004640:	dd000815 	stw	r20,32(sp)
10004644:	dcc00715 	stw	r19,28(sp)
10004648:	dc800615 	stw	r18,24(sp)
1000464c:	dc400515 	stw	r17,20(sp)
10004650:	dc000415 	stw	r16,16(sp)
10004654:	d9000015 	stw	r4,0(sp)
10004658:	d9400115 	stw	r5,4(sp)
1000465c:	15407816 	blt	r2,r21,10004840 <quorem+0x220>
10004660:	ad7fffc4 	addi	r21,r21,-1
10004664:	ad79883a 	add	fp,r21,r21
10004668:	28c00504 	addi	r3,r5,20
1000466c:	e739883a 	add	fp,fp,fp
10004670:	1f2f883a 	add	r23,r3,fp
10004674:	24400504 	addi	r17,r4,20
10004678:	8f39883a 	add	fp,r17,fp
1000467c:	b9400017 	ldw	r5,0(r23)
10004680:	e1000017 	ldw	r4,0(fp)
10004684:	d8c00215 	stw	r3,8(sp)
10004688:	29400044 	addi	r5,r5,1
1000468c:	df000315 	stw	fp,12(sp)
10004690:	000c2a80 	call	1000c2a8 <__udivsi3>
10004694:	1021883a 	mov	r16,r2
10004698:	10003026 	beq	r2,zero,1000475c <quorem+0x13c>
1000469c:	dcc00217 	ldw	r19,8(sp)
100046a0:	8829883a 	mov	r20,r17
100046a4:	002d883a 	mov	r22,zero
100046a8:	0039883a 	mov	fp,zero
100046ac:	9c800017 	ldw	r18,0(r19)
100046b0:	800b883a 	mov	r5,r16
100046b4:	9cc00104 	addi	r19,r19,4
100046b8:	913fffcc 	andi	r4,r18,65535
100046bc:	000c2b80 	call	1000c2b8 <__mulsi3>
100046c0:	9008d43a 	srli	r4,r18,16
100046c4:	800b883a 	mov	r5,r16
100046c8:	b0ad883a 	add	r22,r22,r2
100046cc:	000c2b80 	call	1000c2b8 <__mulsi3>
100046d0:	a1400017 	ldw	r5,0(r20)
100046d4:	b010d43a 	srli	r8,r22,16
100046d8:	b0ffffcc 	andi	r3,r22,65535
100046dc:	293fffcc 	andi	r4,r5,65535
100046e0:	2709883a 	add	r4,r4,fp
100046e4:	280cd43a 	srli	r6,r5,16
100046e8:	20c9c83a 	sub	r4,r4,r3
100046ec:	4085883a 	add	r2,r8,r2
100046f0:	2007d43a 	srai	r3,r4,16
100046f4:	117fffcc 	andi	r5,r2,65535
100046f8:	314bc83a 	sub	r5,r6,r5
100046fc:	28cb883a 	add	r5,r5,r3
10004700:	280c943a 	slli	r6,r5,16
10004704:	213fffcc 	andi	r4,r4,65535
10004708:	102cd43a 	srli	r22,r2,16
1000470c:	3108b03a 	or	r4,r6,r4
10004710:	a1000015 	stw	r4,0(r20)
10004714:	2839d43a 	srai	fp,r5,16
10004718:	a5000104 	addi	r20,r20,4
1000471c:	bcffe32e 	bgeu	r23,r19,100046ac <__alt_data_end+0xf80046ac>
10004720:	d8c00317 	ldw	r3,12(sp)
10004724:	18800017 	ldw	r2,0(r3)
10004728:	10000c1e 	bne	r2,zero,1000475c <quorem+0x13c>
1000472c:	18bfff04 	addi	r2,r3,-4
10004730:	8880082e 	bgeu	r17,r2,10004754 <quorem+0x134>
10004734:	18ffff17 	ldw	r3,-4(r3)
10004738:	18000326 	beq	r3,zero,10004748 <quorem+0x128>
1000473c:	00000506 	br	10004754 <quorem+0x134>
10004740:	10c00017 	ldw	r3,0(r2)
10004744:	1800031e 	bne	r3,zero,10004754 <quorem+0x134>
10004748:	10bfff04 	addi	r2,r2,-4
1000474c:	ad7fffc4 	addi	r21,r21,-1
10004750:	88bffb36 	bltu	r17,r2,10004740 <__alt_data_end+0xf8004740>
10004754:	d8c00017 	ldw	r3,0(sp)
10004758:	1d400415 	stw	r21,16(r3)
1000475c:	d9000017 	ldw	r4,0(sp)
10004760:	d9400117 	ldw	r5,4(sp)
10004764:	00086b40 	call	100086b4 <__mcmp>
10004768:	10002816 	blt	r2,zero,1000480c <quorem+0x1ec>
1000476c:	d8c00217 	ldw	r3,8(sp)
10004770:	84000044 	addi	r16,r16,1
10004774:	880d883a 	mov	r6,r17
10004778:	000f883a 	mov	r7,zero
1000477c:	32800017 	ldw	r10,0(r6)
10004780:	1a400017 	ldw	r9,0(r3)
10004784:	31800104 	addi	r6,r6,4
10004788:	523fffcc 	andi	r8,r10,65535
1000478c:	48bfffcc 	andi	r2,r9,65535
10004790:	41cf883a 	add	r7,r8,r7
10004794:	3891c83a 	sub	r8,r7,r2
10004798:	4812d43a 	srli	r9,r9,16
1000479c:	500ed43a 	srli	r7,r10,16
100047a0:	4005d43a 	srai	r2,r8,16
100047a4:	423fffcc 	andi	r8,r8,65535
100047a8:	3a4fc83a 	sub	r7,r7,r9
100047ac:	388f883a 	add	r7,r7,r2
100047b0:	3804943a 	slli	r2,r7,16
100047b4:	18c00104 	addi	r3,r3,4
100047b8:	380fd43a 	srai	r7,r7,16
100047bc:	1210b03a 	or	r8,r2,r8
100047c0:	323fff15 	stw	r8,-4(r6)
100047c4:	b8ffed2e 	bgeu	r23,r3,1000477c <__alt_data_end+0xf800477c>
100047c8:	ad45883a 	add	r2,r21,r21
100047cc:	1085883a 	add	r2,r2,r2
100047d0:	8887883a 	add	r3,r17,r2
100047d4:	18800017 	ldw	r2,0(r3)
100047d8:	10000c1e 	bne	r2,zero,1000480c <quorem+0x1ec>
100047dc:	18bfff04 	addi	r2,r3,-4
100047e0:	8880082e 	bgeu	r17,r2,10004804 <quorem+0x1e4>
100047e4:	18ffff17 	ldw	r3,-4(r3)
100047e8:	18000326 	beq	r3,zero,100047f8 <quorem+0x1d8>
100047ec:	00000506 	br	10004804 <quorem+0x1e4>
100047f0:	10c00017 	ldw	r3,0(r2)
100047f4:	1800031e 	bne	r3,zero,10004804 <quorem+0x1e4>
100047f8:	10bfff04 	addi	r2,r2,-4
100047fc:	ad7fffc4 	addi	r21,r21,-1
10004800:	88bffb36 	bltu	r17,r2,100047f0 <__alt_data_end+0xf80047f0>
10004804:	d8c00017 	ldw	r3,0(sp)
10004808:	1d400415 	stw	r21,16(r3)
1000480c:	8005883a 	mov	r2,r16
10004810:	dfc00d17 	ldw	ra,52(sp)
10004814:	df000c17 	ldw	fp,48(sp)
10004818:	ddc00b17 	ldw	r23,44(sp)
1000481c:	dd800a17 	ldw	r22,40(sp)
10004820:	dd400917 	ldw	r21,36(sp)
10004824:	dd000817 	ldw	r20,32(sp)
10004828:	dcc00717 	ldw	r19,28(sp)
1000482c:	dc800617 	ldw	r18,24(sp)
10004830:	dc400517 	ldw	r17,20(sp)
10004834:	dc000417 	ldw	r16,16(sp)
10004838:	dec00e04 	addi	sp,sp,56
1000483c:	f800283a 	ret
10004840:	0005883a 	mov	r2,zero
10004844:	003ff206 	br	10004810 <__alt_data_end+0xf8004810>

10004848 <_dtoa_r>:
10004848:	20801017 	ldw	r2,64(r4)
1000484c:	deffdf04 	addi	sp,sp,-132
10004850:	dcc01a15 	stw	r19,104(sp)
10004854:	dc801915 	stw	r18,100(sp)
10004858:	dc401815 	stw	r17,96(sp)
1000485c:	dc001715 	stw	r16,92(sp)
10004860:	dfc02015 	stw	ra,128(sp)
10004864:	df001f15 	stw	fp,124(sp)
10004868:	ddc01e15 	stw	r23,120(sp)
1000486c:	dd801d15 	stw	r22,116(sp)
10004870:	dd401c15 	stw	r21,112(sp)
10004874:	dd001b15 	stw	r20,108(sp)
10004878:	d9400315 	stw	r5,12(sp)
1000487c:	d9c00415 	stw	r7,16(sp)
10004880:	2021883a 	mov	r16,r4
10004884:	3023883a 	mov	r17,r6
10004888:	dcc02317 	ldw	r19,140(sp)
1000488c:	3025883a 	mov	r18,r6
10004890:	10000826 	beq	r2,zero,100048b4 <_dtoa_r+0x6c>
10004894:	20c01117 	ldw	r3,68(r4)
10004898:	01800044 	movi	r6,1
1000489c:	100b883a 	mov	r5,r2
100048a0:	30cc983a 	sll	r6,r6,r3
100048a4:	10c00115 	stw	r3,4(r2)
100048a8:	11800215 	stw	r6,8(r2)
100048ac:	0007dec0 	call	10007dec <_Bfree>
100048b0:	80001015 	stw	zero,64(r16)
100048b4:	88002e16 	blt	r17,zero,10004970 <_dtoa_r+0x128>
100048b8:	98000015 	stw	zero,0(r19)
100048bc:	88dffc2c 	andhi	r3,r17,32752
100048c0:	009ffc34 	movhi	r2,32752
100048c4:	18801b26 	beq	r3,r2,10004934 <_dtoa_r+0xec>
100048c8:	d9000317 	ldw	r4,12(sp)
100048cc:	900b883a 	mov	r5,r18
100048d0:	000d883a 	mov	r6,zero
100048d4:	000f883a 	mov	r7,zero
100048d8:	000d4f80 	call	1000d4f8 <__eqdf2>
100048dc:	10002b1e 	bne	r2,zero,1000498c <_dtoa_r+0x144>
100048e0:	d8c02217 	ldw	r3,136(sp)
100048e4:	d9002417 	ldw	r4,144(sp)
100048e8:	00800044 	movi	r2,1
100048ec:	18800015 	stw	r2,0(r3)
100048f0:	2001a026 	beq	r4,zero,10004f74 <_dtoa_r+0x72c>
100048f4:	00840074 	movhi	r2,4097
100048f8:	10868a44 	addi	r2,r2,6697
100048fc:	20800015 	stw	r2,0(r4)
10004900:	10bfffc4 	addi	r2,r2,-1
10004904:	dfc02017 	ldw	ra,128(sp)
10004908:	df001f17 	ldw	fp,124(sp)
1000490c:	ddc01e17 	ldw	r23,120(sp)
10004910:	dd801d17 	ldw	r22,116(sp)
10004914:	dd401c17 	ldw	r21,112(sp)
10004918:	dd001b17 	ldw	r20,108(sp)
1000491c:	dcc01a17 	ldw	r19,104(sp)
10004920:	dc801917 	ldw	r18,100(sp)
10004924:	dc401817 	ldw	r17,96(sp)
10004928:	dc001717 	ldw	r16,92(sp)
1000492c:	dec02104 	addi	sp,sp,132
10004930:	f800283a 	ret
10004934:	d8c02217 	ldw	r3,136(sp)
10004938:	d9000317 	ldw	r4,12(sp)
1000493c:	0089c3c4 	movi	r2,9999
10004940:	18800015 	stw	r2,0(r3)
10004944:	20017926 	beq	r4,zero,10004f2c <_dtoa_r+0x6e4>
10004948:	00840074 	movhi	r2,4097
1000494c:	10869604 	addi	r2,r2,6744
10004950:	d9802417 	ldw	r6,144(sp)
10004954:	303feb26 	beq	r6,zero,10004904 <__alt_data_end+0xf8004904>
10004958:	10c000c7 	ldb	r3,3(r2)
1000495c:	18017a1e 	bne	r3,zero,10004f48 <_dtoa_r+0x700>
10004960:	10c000c4 	addi	r3,r2,3
10004964:	d9c02417 	ldw	r7,144(sp)
10004968:	38c00015 	stw	r3,0(r7)
1000496c:	003fe506 	br	10004904 <__alt_data_end+0xf8004904>
10004970:	04a00034 	movhi	r18,32768
10004974:	94bfffc4 	addi	r18,r18,-1
10004978:	8ca4703a 	and	r18,r17,r18
1000497c:	00800044 	movi	r2,1
10004980:	98800015 	stw	r2,0(r19)
10004984:	9023883a 	mov	r17,r18
10004988:	003fcc06 	br	100048bc <__alt_data_end+0xf80048bc>
1000498c:	d9400317 	ldw	r5,12(sp)
10004990:	d8800204 	addi	r2,sp,8
10004994:	8828d53a 	srli	r20,r17,20
10004998:	d8800015 	stw	r2,0(sp)
1000499c:	8009883a 	mov	r4,r16
100049a0:	900d883a 	mov	r6,r18
100049a4:	d9c00104 	addi	r7,sp,4
100049a8:	0008a140 	call	10008a14 <__d2b>
100049ac:	1039883a 	mov	fp,r2
100049b0:	a001671e 	bne	r20,zero,10004f50 <_dtoa_r+0x708>
100049b4:	dd400217 	ldw	r21,8(sp)
100049b8:	dd000117 	ldw	r20,4(sp)
100049bc:	00befbc4 	movi	r2,-1041
100049c0:	ad29883a 	add	r20,r21,r20
100049c4:	a082d616 	blt	r20,r2,10005520 <_dtoa_r+0xcd8>
100049c8:	d9800317 	ldw	r6,12(sp)
100049cc:	013f0384 	movi	r4,-1010
100049d0:	2509c83a 	sub	r4,r4,r20
100049d4:	a0810484 	addi	r2,r20,1042
100049d8:	8922983a 	sll	r17,r17,r4
100049dc:	3084d83a 	srl	r2,r6,r2
100049e0:	8888b03a 	or	r4,r17,r2
100049e4:	000e9180 	call	1000e918 <__floatunsidf>
100049e8:	1009883a 	mov	r4,r2
100049ec:	017f8434 	movhi	r5,65040
100049f0:	00800044 	movi	r2,1
100049f4:	194b883a 	add	r5,r3,r5
100049f8:	a53fffc4 	addi	r20,r20,-1
100049fc:	d8800f15 	stw	r2,60(sp)
10004a00:	000d883a 	mov	r6,zero
10004a04:	01cffe34 	movhi	r7,16376
10004a08:	000df400 	call	1000df40 <__subdf3>
10004a0c:	1009883a 	mov	r4,r2
10004a10:	180b883a 	mov	r5,r3
10004a14:	0198dbf4 	movhi	r6,25455
10004a18:	3190d844 	addi	r6,r6,17249
10004a1c:	01cff4f4 	movhi	r7,16339
10004a20:	39e1e9c4 	addi	r7,r7,-30809
10004a24:	000d7400 	call	1000d740 <__muldf3>
10004a28:	180b883a 	mov	r5,r3
10004a2c:	01a2d874 	movhi	r6,35681
10004a30:	31b22cc4 	addi	r6,r6,-14157
10004a34:	01cff1f4 	movhi	r7,16327
10004a38:	39e28a04 	addi	r7,r7,-30168
10004a3c:	1009883a 	mov	r4,r2
10004a40:	000c2e00 	call	1000c2e0 <__adddf3>
10004a44:	a009883a 	mov	r4,r20
10004a48:	1027883a 	mov	r19,r2
10004a4c:	1823883a 	mov	r17,r3
10004a50:	000e8480 	call	1000e848 <__floatsidf>
10004a54:	1009883a 	mov	r4,r2
10004a58:	180b883a 	mov	r5,r3
10004a5c:	019427f4 	movhi	r6,20639
10004a60:	319e7ec4 	addi	r6,r6,31227
10004a64:	01cff4f4 	movhi	r7,16339
10004a68:	39d104c4 	addi	r7,r7,17427
10004a6c:	000d7400 	call	1000d740 <__muldf3>
10004a70:	9809883a 	mov	r4,r19
10004a74:	880b883a 	mov	r5,r17
10004a78:	100d883a 	mov	r6,r2
10004a7c:	180f883a 	mov	r7,r3
10004a80:	000c2e00 	call	1000c2e0 <__adddf3>
10004a84:	1009883a 	mov	r4,r2
10004a88:	180b883a 	mov	r5,r3
10004a8c:	1027883a 	mov	r19,r2
10004a90:	1823883a 	mov	r17,r3
10004a94:	000e7c80 	call	1000e7c8 <__fixdfsi>
10004a98:	9809883a 	mov	r4,r19
10004a9c:	880b883a 	mov	r5,r17
10004aa0:	000d883a 	mov	r6,zero
10004aa4:	000f883a 	mov	r7,zero
10004aa8:	d8800615 	stw	r2,24(sp)
10004aac:	000d6540 	call	1000d654 <__ledf2>
10004ab0:	10028416 	blt	r2,zero,100054c4 <_dtoa_r+0xc7c>
10004ab4:	d9000617 	ldw	r4,24(sp)
10004ab8:	00800584 	movi	r2,22
10004abc:	11027236 	bltu	r2,r4,10005488 <_dtoa_r+0xc40>
10004ac0:	200490fa 	slli	r2,r4,3
10004ac4:	00c40074 	movhi	r3,4097
10004ac8:	18c6b204 	addi	r3,r3,6856
10004acc:	d9800317 	ldw	r6,12(sp)
10004ad0:	1885883a 	add	r2,r3,r2
10004ad4:	11000017 	ldw	r4,0(r2)
10004ad8:	11400117 	ldw	r5,4(r2)
10004adc:	900f883a 	mov	r7,r18
10004ae0:	000d57c0 	call	1000d57c <__gedf2>
10004ae4:	0082930e 	bge	zero,r2,10005534 <_dtoa_r+0xcec>
10004ae8:	d9800617 	ldw	r6,24(sp)
10004aec:	d8000e15 	stw	zero,56(sp)
10004af0:	31bfffc4 	addi	r6,r6,-1
10004af4:	d9800615 	stw	r6,24(sp)
10004af8:	ad2bc83a 	sub	r21,r21,r20
10004afc:	ad7fffc4 	addi	r21,r21,-1
10004b00:	a8026c16 	blt	r21,zero,100054b4 <_dtoa_r+0xc6c>
10004b04:	d8000815 	stw	zero,32(sp)
10004b08:	d8800617 	ldw	r2,24(sp)
10004b0c:	10026116 	blt	r2,zero,10005494 <_dtoa_r+0xc4c>
10004b10:	a8ab883a 	add	r21,r21,r2
10004b14:	d8800b15 	stw	r2,44(sp)
10004b18:	d8000a15 	stw	zero,40(sp)
10004b1c:	d9c00417 	ldw	r7,16(sp)
10004b20:	00800244 	movi	r2,9
10004b24:	11c11636 	bltu	r2,r7,10004f80 <_dtoa_r+0x738>
10004b28:	00800144 	movi	r2,5
10004b2c:	11c4cc0e 	bge	r2,r7,10005e60 <_dtoa_r+0x1618>
10004b30:	39ffff04 	addi	r7,r7,-4
10004b34:	d9c00415 	stw	r7,16(sp)
10004b38:	0027883a 	mov	r19,zero
10004b3c:	d8c00417 	ldw	r3,16(sp)
10004b40:	008000c4 	movi	r2,3
10004b44:	1883aa26 	beq	r3,r2,100059f0 <_dtoa_r+0x11a8>
10004b48:	10c35b0e 	bge	r2,r3,100058b8 <_dtoa_r+0x1070>
10004b4c:	d9000417 	ldw	r4,16(sp)
10004b50:	00800104 	movi	r2,4
10004b54:	2082da26 	beq	r4,r2,100056c0 <_dtoa_r+0xe78>
10004b58:	00800144 	movi	r2,5
10004b5c:	2081091e 	bne	r4,r2,10004f84 <_dtoa_r+0x73c>
10004b60:	01c00044 	movi	r7,1
10004b64:	d9c00c15 	stw	r7,48(sp)
10004b68:	d8c02117 	ldw	r3,132(sp)
10004b6c:	d9000617 	ldw	r4,24(sp)
10004b70:	1907883a 	add	r3,r3,r4
10004b74:	19800044 	addi	r6,r3,1
10004b78:	d8c00d15 	stw	r3,52(sp)
10004b7c:	d9800915 	stw	r6,36(sp)
10004b80:	0183a90e 	bge	zero,r6,10005a28 <_dtoa_r+0x11e0>
10004b84:	d9800917 	ldw	r6,36(sp)
10004b88:	80001115 	stw	zero,68(r16)
10004b8c:	008005c4 	movi	r2,23
10004b90:	1184b52e 	bgeu	r2,r6,10005e68 <_dtoa_r+0x1620>
10004b94:	00c00044 	movi	r3,1
10004b98:	00800104 	movi	r2,4
10004b9c:	1085883a 	add	r2,r2,r2
10004ba0:	11000504 	addi	r4,r2,20
10004ba4:	180b883a 	mov	r5,r3
10004ba8:	18c00044 	addi	r3,r3,1
10004bac:	313ffb2e 	bgeu	r6,r4,10004b9c <__alt_data_end+0xf8004b9c>
10004bb0:	81401115 	stw	r5,68(r16)
10004bb4:	3023883a 	mov	r17,r6
10004bb8:	8009883a 	mov	r4,r16
10004bbc:	0007d440 	call	10007d44 <_Balloc>
10004bc0:	d8800715 	stw	r2,28(sp)
10004bc4:	80801015 	stw	r2,64(r16)
10004bc8:	00800384 	movi	r2,14
10004bcc:	1440f936 	bltu	r2,r17,10004fb4 <_dtoa_r+0x76c>
10004bd0:	9800f826 	beq	r19,zero,10004fb4 <_dtoa_r+0x76c>
10004bd4:	d9c00617 	ldw	r7,24(sp)
10004bd8:	01c39c0e 	bge	zero,r7,10005a4c <_dtoa_r+0x1204>
10004bdc:	388003cc 	andi	r2,r7,15
10004be0:	100490fa 	slli	r2,r2,3
10004be4:	382dd13a 	srai	r22,r7,4
10004be8:	00c40074 	movhi	r3,4097
10004bec:	18c6b204 	addi	r3,r3,6856
10004bf0:	1885883a 	add	r2,r3,r2
10004bf4:	b0c0040c 	andi	r3,r22,16
10004bf8:	12800017 	ldw	r10,0(r2)
10004bfc:	12400117 	ldw	r9,4(r2)
10004c00:	18038526 	beq	r3,zero,10005a18 <_dtoa_r+0x11d0>
10004c04:	00840074 	movhi	r2,4097
10004c08:	1086a804 	addi	r2,r2,6816
10004c0c:	11800817 	ldw	r6,32(r2)
10004c10:	11c00917 	ldw	r7,36(r2)
10004c14:	d9000317 	ldw	r4,12(sp)
10004c18:	900b883a 	mov	r5,r18
10004c1c:	da401515 	stw	r9,84(sp)
10004c20:	da801615 	stw	r10,88(sp)
10004c24:	000cb5c0 	call	1000cb5c <__divdf3>
10004c28:	da401517 	ldw	r9,84(sp)
10004c2c:	da801617 	ldw	r10,88(sp)
10004c30:	1027883a 	mov	r19,r2
10004c34:	1829883a 	mov	r20,r3
10004c38:	b58003cc 	andi	r22,r22,15
10004c3c:	044000c4 	movi	r17,3
10004c40:	b0001126 	beq	r22,zero,10004c88 <_dtoa_r+0x440>
10004c44:	05c40074 	movhi	r23,4097
10004c48:	bdc6a804 	addi	r23,r23,6816
10004c4c:	5005883a 	mov	r2,r10
10004c50:	4807883a 	mov	r3,r9
10004c54:	b180004c 	andi	r6,r22,1
10004c58:	1009883a 	mov	r4,r2
10004c5c:	b02dd07a 	srai	r22,r22,1
10004c60:	180b883a 	mov	r5,r3
10004c64:	30000426 	beq	r6,zero,10004c78 <_dtoa_r+0x430>
10004c68:	b9800017 	ldw	r6,0(r23)
10004c6c:	b9c00117 	ldw	r7,4(r23)
10004c70:	8c400044 	addi	r17,r17,1
10004c74:	000d7400 	call	1000d740 <__muldf3>
10004c78:	bdc00204 	addi	r23,r23,8
10004c7c:	b03ff51e 	bne	r22,zero,10004c54 <__alt_data_end+0xf8004c54>
10004c80:	1015883a 	mov	r10,r2
10004c84:	1813883a 	mov	r9,r3
10004c88:	9809883a 	mov	r4,r19
10004c8c:	a00b883a 	mov	r5,r20
10004c90:	500d883a 	mov	r6,r10
10004c94:	480f883a 	mov	r7,r9
10004c98:	000cb5c0 	call	1000cb5c <__divdf3>
10004c9c:	1027883a 	mov	r19,r2
10004ca0:	1829883a 	mov	r20,r3
10004ca4:	d8c00e17 	ldw	r3,56(sp)
10004ca8:	18000626 	beq	r3,zero,10004cc4 <_dtoa_r+0x47c>
10004cac:	9809883a 	mov	r4,r19
10004cb0:	a00b883a 	mov	r5,r20
10004cb4:	000d883a 	mov	r6,zero
10004cb8:	01cffc34 	movhi	r7,16368
10004cbc:	000d6540 	call	1000d654 <__ledf2>
10004cc0:	10041516 	blt	r2,zero,10005d18 <_dtoa_r+0x14d0>
10004cc4:	8809883a 	mov	r4,r17
10004cc8:	000e8480 	call	1000e848 <__floatsidf>
10004ccc:	1009883a 	mov	r4,r2
10004cd0:	180b883a 	mov	r5,r3
10004cd4:	980d883a 	mov	r6,r19
10004cd8:	a00f883a 	mov	r7,r20
10004cdc:	000d7400 	call	1000d740 <__muldf3>
10004ce0:	1009883a 	mov	r4,r2
10004ce4:	180b883a 	mov	r5,r3
10004ce8:	000d883a 	mov	r6,zero
10004cec:	01d00734 	movhi	r7,16412
10004cf0:	000c2e00 	call	1000c2e0 <__adddf3>
10004cf4:	1023883a 	mov	r17,r2
10004cf8:	d8800917 	ldw	r2,36(sp)
10004cfc:	05bf3034 	movhi	r22,64704
10004d00:	1daf883a 	add	r23,r3,r22
10004d04:	10031e26 	beq	r2,zero,10005980 <_dtoa_r+0x1138>
10004d08:	d8c00617 	ldw	r3,24(sp)
10004d0c:	dac00917 	ldw	r11,36(sp)
10004d10:	d8c01315 	stw	r3,76(sp)
10004d14:	d9000c17 	ldw	r4,48(sp)
10004d18:	20039626 	beq	r4,zero,10005b74 <_dtoa_r+0x132c>
10004d1c:	58bfffc4 	addi	r2,r11,-1
10004d20:	100490fa 	slli	r2,r2,3
10004d24:	00c40074 	movhi	r3,4097
10004d28:	18c6b204 	addi	r3,r3,6856
10004d2c:	0009883a 	mov	r4,zero
10004d30:	1885883a 	add	r2,r3,r2
10004d34:	11800017 	ldw	r6,0(r2)
10004d38:	11c00117 	ldw	r7,4(r2)
10004d3c:	d8800717 	ldw	r2,28(sp)
10004d40:	014ff834 	movhi	r5,16352
10004d44:	dac01615 	stw	r11,88(sp)
10004d48:	15800044 	addi	r22,r2,1
10004d4c:	000cb5c0 	call	1000cb5c <__divdf3>
10004d50:	880d883a 	mov	r6,r17
10004d54:	b80f883a 	mov	r7,r23
10004d58:	1009883a 	mov	r4,r2
10004d5c:	180b883a 	mov	r5,r3
10004d60:	000df400 	call	1000df40 <__subdf3>
10004d64:	a00b883a 	mov	r5,r20
10004d68:	9809883a 	mov	r4,r19
10004d6c:	102f883a 	mov	r23,r2
10004d70:	d8c01015 	stw	r3,64(sp)
10004d74:	000e7c80 	call	1000e7c8 <__fixdfsi>
10004d78:	1009883a 	mov	r4,r2
10004d7c:	d8801515 	stw	r2,84(sp)
10004d80:	000e8480 	call	1000e848 <__floatsidf>
10004d84:	9809883a 	mov	r4,r19
10004d88:	a00b883a 	mov	r5,r20
10004d8c:	100d883a 	mov	r6,r2
10004d90:	180f883a 	mov	r7,r3
10004d94:	000df400 	call	1000df40 <__subdf3>
10004d98:	da401517 	ldw	r9,84(sp)
10004d9c:	1827883a 	mov	r19,r3
10004da0:	d8c00717 	ldw	r3,28(sp)
10004da4:	d9401017 	ldw	r5,64(sp)
10004da8:	4a400c04 	addi	r9,r9,48
10004dac:	1023883a 	mov	r17,r2
10004db0:	1a400005 	stb	r9,0(r3)
10004db4:	b809883a 	mov	r4,r23
10004db8:	880d883a 	mov	r6,r17
10004dbc:	980f883a 	mov	r7,r19
10004dc0:	4829883a 	mov	r20,r9
10004dc4:	000d57c0 	call	1000d57c <__gedf2>
10004dc8:	00842216 	blt	zero,r2,10005e54 <_dtoa_r+0x160c>
10004dcc:	0009883a 	mov	r4,zero
10004dd0:	014ffc34 	movhi	r5,16368
10004dd4:	880d883a 	mov	r6,r17
10004dd8:	980f883a 	mov	r7,r19
10004ddc:	000df400 	call	1000df40 <__subdf3>
10004de0:	d9401017 	ldw	r5,64(sp)
10004de4:	b809883a 	mov	r4,r23
10004de8:	100d883a 	mov	r6,r2
10004dec:	180f883a 	mov	r7,r3
10004df0:	000d57c0 	call	1000d57c <__gedf2>
10004df4:	dac01617 	ldw	r11,88(sp)
10004df8:	00841316 	blt	zero,r2,10005e48 <_dtoa_r+0x1600>
10004dfc:	00800044 	movi	r2,1
10004e00:	12c06c0e 	bge	r2,r11,10004fb4 <_dtoa_r+0x76c>
10004e04:	d9000717 	ldw	r4,28(sp)
10004e08:	dd401215 	stw	r21,72(sp)
10004e0c:	dc001115 	stw	r16,68(sp)
10004e10:	22d7883a 	add	r11,r4,r11
10004e14:	dc801415 	stw	r18,80(sp)
10004e18:	582b883a 	mov	r21,r11
10004e1c:	b021883a 	mov	r16,r22
10004e20:	dc801017 	ldw	r18,64(sp)
10004e24:	00000906 	br	10004e4c <_dtoa_r+0x604>
10004e28:	000df400 	call	1000df40 <__subdf3>
10004e2c:	1009883a 	mov	r4,r2
10004e30:	180b883a 	mov	r5,r3
10004e34:	b80d883a 	mov	r6,r23
10004e38:	900f883a 	mov	r7,r18
10004e3c:	000d6540 	call	1000d654 <__ledf2>
10004e40:	1003ea16 	blt	r2,zero,10005dec <_dtoa_r+0x15a4>
10004e44:	b543ed26 	beq	r22,r21,10005dfc <_dtoa_r+0x15b4>
10004e48:	b021883a 	mov	r16,r22
10004e4c:	b809883a 	mov	r4,r23
10004e50:	900b883a 	mov	r5,r18
10004e54:	000d883a 	mov	r6,zero
10004e58:	01d00934 	movhi	r7,16420
10004e5c:	000d7400 	call	1000d740 <__muldf3>
10004e60:	000d883a 	mov	r6,zero
10004e64:	01d00934 	movhi	r7,16420
10004e68:	8809883a 	mov	r4,r17
10004e6c:	980b883a 	mov	r5,r19
10004e70:	102f883a 	mov	r23,r2
10004e74:	1825883a 	mov	r18,r3
10004e78:	000d7400 	call	1000d740 <__muldf3>
10004e7c:	180b883a 	mov	r5,r3
10004e80:	1009883a 	mov	r4,r2
10004e84:	1823883a 	mov	r17,r3
10004e88:	1027883a 	mov	r19,r2
10004e8c:	000e7c80 	call	1000e7c8 <__fixdfsi>
10004e90:	1009883a 	mov	r4,r2
10004e94:	1029883a 	mov	r20,r2
10004e98:	000e8480 	call	1000e848 <__floatsidf>
10004e9c:	9809883a 	mov	r4,r19
10004ea0:	880b883a 	mov	r5,r17
10004ea4:	100d883a 	mov	r6,r2
10004ea8:	180f883a 	mov	r7,r3
10004eac:	000df400 	call	1000df40 <__subdf3>
10004eb0:	a5000c04 	addi	r20,r20,48
10004eb4:	1009883a 	mov	r4,r2
10004eb8:	180b883a 	mov	r5,r3
10004ebc:	b80d883a 	mov	r6,r23
10004ec0:	900f883a 	mov	r7,r18
10004ec4:	85000005 	stb	r20,0(r16)
10004ec8:	1023883a 	mov	r17,r2
10004ecc:	1827883a 	mov	r19,r3
10004ed0:	000d6540 	call	1000d654 <__ledf2>
10004ed4:	b5800044 	addi	r22,r22,1
10004ed8:	0009883a 	mov	r4,zero
10004edc:	014ffc34 	movhi	r5,16368
10004ee0:	880d883a 	mov	r6,r17
10004ee4:	980f883a 	mov	r7,r19
10004ee8:	103fcf0e 	bge	r2,zero,10004e28 <__alt_data_end+0xf8004e28>
10004eec:	d8c01317 	ldw	r3,76(sp)
10004ef0:	dc001117 	ldw	r16,68(sp)
10004ef4:	d8c00615 	stw	r3,24(sp)
10004ef8:	8009883a 	mov	r4,r16
10004efc:	e00b883a 	mov	r5,fp
10004f00:	0007dec0 	call	10007dec <_Bfree>
10004f04:	d9800617 	ldw	r6,24(sp)
10004f08:	d9c02217 	ldw	r7,136(sp)
10004f0c:	b0000005 	stb	zero,0(r22)
10004f10:	30800044 	addi	r2,r6,1
10004f14:	38800015 	stw	r2,0(r7)
10004f18:	d8802417 	ldw	r2,144(sp)
10004f1c:	10026426 	beq	r2,zero,100058b0 <_dtoa_r+0x1068>
10004f20:	15800015 	stw	r22,0(r2)
10004f24:	d8800717 	ldw	r2,28(sp)
10004f28:	003e7606 	br	10004904 <__alt_data_end+0xf8004904>
10004f2c:	00800434 	movhi	r2,16
10004f30:	10bfffc4 	addi	r2,r2,-1
10004f34:	88a2703a 	and	r17,r17,r2
10004f38:	883e831e 	bne	r17,zero,10004948 <__alt_data_end+0xf8004948>
10004f3c:	00840074 	movhi	r2,4097
10004f40:	10869304 	addi	r2,r2,6732
10004f44:	003e8206 	br	10004950 <__alt_data_end+0xf8004950>
10004f48:	10c00204 	addi	r3,r2,8
10004f4c:	003e8506 	br	10004964 <__alt_data_end+0xf8004964>
10004f50:	01400434 	movhi	r5,16
10004f54:	297fffc4 	addi	r5,r5,-1
10004f58:	914a703a 	and	r5,r18,r5
10004f5c:	d9000317 	ldw	r4,12(sp)
10004f60:	294ffc34 	orhi	r5,r5,16368
10004f64:	a53f0044 	addi	r20,r20,-1023
10004f68:	dd400217 	ldw	r21,8(sp)
10004f6c:	d8000f15 	stw	zero,60(sp)
10004f70:	003ea306 	br	10004a00 <__alt_data_end+0xf8004a00>
10004f74:	00840074 	movhi	r2,4097
10004f78:	10868a04 	addi	r2,r2,6696
10004f7c:	003e6106 	br	10004904 <__alt_data_end+0xf8004904>
10004f80:	d8000415 	stw	zero,16(sp)
10004f84:	8009883a 	mov	r4,r16
10004f88:	80001115 	stw	zero,68(r16)
10004f8c:	000b883a 	mov	r5,zero
10004f90:	0007d440 	call	10007d44 <_Balloc>
10004f94:	00ffffc4 	movi	r3,-1
10004f98:	01000044 	movi	r4,1
10004f9c:	d8800715 	stw	r2,28(sp)
10004fa0:	d8c00d15 	stw	r3,52(sp)
10004fa4:	80801015 	stw	r2,64(r16)
10004fa8:	d8002115 	stw	zero,132(sp)
10004fac:	d8c00915 	stw	r3,36(sp)
10004fb0:	d9000c15 	stw	r4,48(sp)
10004fb4:	d8800117 	ldw	r2,4(sp)
10004fb8:	10008e16 	blt	r2,zero,100051f4 <_dtoa_r+0x9ac>
10004fbc:	d9000617 	ldw	r4,24(sp)
10004fc0:	00c00384 	movi	r3,14
10004fc4:	19008b16 	blt	r3,r4,100051f4 <_dtoa_r+0x9ac>
10004fc8:	200490fa 	slli	r2,r4,3
10004fcc:	d9802117 	ldw	r6,132(sp)
10004fd0:	00c40074 	movhi	r3,4097
10004fd4:	18c6b204 	addi	r3,r3,6856
10004fd8:	1885883a 	add	r2,r3,r2
10004fdc:	14400017 	ldw	r17,0(r2)
10004fe0:	14c00117 	ldw	r19,4(r2)
10004fe4:	3001be16 	blt	r6,zero,100056e0 <_dtoa_r+0xe98>
10004fe8:	d9000317 	ldw	r4,12(sp)
10004fec:	880d883a 	mov	r6,r17
10004ff0:	980f883a 	mov	r7,r19
10004ff4:	900b883a 	mov	r5,r18
10004ff8:	000cb5c0 	call	1000cb5c <__divdf3>
10004ffc:	180b883a 	mov	r5,r3
10005000:	1009883a 	mov	r4,r2
10005004:	000e7c80 	call	1000e7c8 <__fixdfsi>
10005008:	1009883a 	mov	r4,r2
1000500c:	102f883a 	mov	r23,r2
10005010:	000e8480 	call	1000e848 <__floatsidf>
10005014:	1009883a 	mov	r4,r2
10005018:	180b883a 	mov	r5,r3
1000501c:	880d883a 	mov	r6,r17
10005020:	980f883a 	mov	r7,r19
10005024:	000d7400 	call	1000d740 <__muldf3>
10005028:	d9000317 	ldw	r4,12(sp)
1000502c:	900b883a 	mov	r5,r18
10005030:	100d883a 	mov	r6,r2
10005034:	180f883a 	mov	r7,r3
10005038:	000df400 	call	1000df40 <__subdf3>
1000503c:	d9c00717 	ldw	r7,28(sp)
10005040:	1009883a 	mov	r4,r2
10005044:	b8800c04 	addi	r2,r23,48
10005048:	38800005 	stb	r2,0(r7)
1000504c:	3d800044 	addi	r22,r7,1
10005050:	d9c00917 	ldw	r7,36(sp)
10005054:	01800044 	movi	r6,1
10005058:	180b883a 	mov	r5,r3
1000505c:	2005883a 	mov	r2,r4
10005060:	39803e26 	beq	r7,r6,1000515c <_dtoa_r+0x914>
10005064:	000d883a 	mov	r6,zero
10005068:	01d00934 	movhi	r7,16420
1000506c:	000d7400 	call	1000d740 <__muldf3>
10005070:	1009883a 	mov	r4,r2
10005074:	180b883a 	mov	r5,r3
10005078:	000d883a 	mov	r6,zero
1000507c:	000f883a 	mov	r7,zero
10005080:	1029883a 	mov	r20,r2
10005084:	182b883a 	mov	r21,r3
10005088:	000d4f80 	call	1000d4f8 <__eqdf2>
1000508c:	103f9a26 	beq	r2,zero,10004ef8 <__alt_data_end+0xf8004ef8>
10005090:	d8c00717 	ldw	r3,28(sp)
10005094:	d9000917 	ldw	r4,36(sp)
10005098:	b025883a 	mov	r18,r22
1000509c:	df000415 	stw	fp,16(sp)
100050a0:	1905883a 	add	r2,r3,r4
100050a4:	15ffffc4 	addi	r23,r2,-1
100050a8:	dc000315 	stw	r16,12(sp)
100050ac:	00000a06 	br	100050d8 <_dtoa_r+0x890>
100050b0:	000d7400 	call	1000d740 <__muldf3>
100050b4:	1009883a 	mov	r4,r2
100050b8:	180b883a 	mov	r5,r3
100050bc:	000d883a 	mov	r6,zero
100050c0:	000f883a 	mov	r7,zero
100050c4:	1029883a 	mov	r20,r2
100050c8:	182b883a 	mov	r21,r3
100050cc:	000d4f80 	call	1000d4f8 <__eqdf2>
100050d0:	10021926 	beq	r2,zero,10005938 <_dtoa_r+0x10f0>
100050d4:	e025883a 	mov	r18,fp
100050d8:	880d883a 	mov	r6,r17
100050dc:	980f883a 	mov	r7,r19
100050e0:	a009883a 	mov	r4,r20
100050e4:	a80b883a 	mov	r5,r21
100050e8:	000cb5c0 	call	1000cb5c <__divdf3>
100050ec:	180b883a 	mov	r5,r3
100050f0:	1009883a 	mov	r4,r2
100050f4:	000e7c80 	call	1000e7c8 <__fixdfsi>
100050f8:	1009883a 	mov	r4,r2
100050fc:	1021883a 	mov	r16,r2
10005100:	000e8480 	call	1000e848 <__floatsidf>
10005104:	1009883a 	mov	r4,r2
10005108:	180b883a 	mov	r5,r3
1000510c:	880d883a 	mov	r6,r17
10005110:	980f883a 	mov	r7,r19
10005114:	000d7400 	call	1000d740 <__muldf3>
10005118:	a009883a 	mov	r4,r20
1000511c:	a80b883a 	mov	r5,r21
10005120:	100d883a 	mov	r6,r2
10005124:	180f883a 	mov	r7,r3
10005128:	000df400 	call	1000df40 <__subdf3>
1000512c:	82800c04 	addi	r10,r16,48
10005130:	97000044 	addi	fp,r18,1
10005134:	92800005 	stb	r10,0(r18)
10005138:	000d883a 	mov	r6,zero
1000513c:	01d00934 	movhi	r7,16420
10005140:	1009883a 	mov	r4,r2
10005144:	180b883a 	mov	r5,r3
10005148:	e02d883a 	mov	r22,fp
1000514c:	95ffd81e 	bne	r18,r23,100050b0 <__alt_data_end+0xf80050b0>
10005150:	802f883a 	mov	r23,r16
10005154:	df000417 	ldw	fp,16(sp)
10005158:	dc000317 	ldw	r16,12(sp)
1000515c:	1009883a 	mov	r4,r2
10005160:	180b883a 	mov	r5,r3
10005164:	100d883a 	mov	r6,r2
10005168:	180f883a 	mov	r7,r3
1000516c:	000c2e00 	call	1000c2e0 <__adddf3>
10005170:	8809883a 	mov	r4,r17
10005174:	980b883a 	mov	r5,r19
10005178:	100d883a 	mov	r6,r2
1000517c:	180f883a 	mov	r7,r3
10005180:	1025883a 	mov	r18,r2
10005184:	1829883a 	mov	r20,r3
10005188:	000d6540 	call	1000d654 <__ledf2>
1000518c:	10000816 	blt	r2,zero,100051b0 <_dtoa_r+0x968>
10005190:	8809883a 	mov	r4,r17
10005194:	980b883a 	mov	r5,r19
10005198:	900d883a 	mov	r6,r18
1000519c:	a00f883a 	mov	r7,r20
100051a0:	000d4f80 	call	1000d4f8 <__eqdf2>
100051a4:	103f541e 	bne	r2,zero,10004ef8 <__alt_data_end+0xf8004ef8>
100051a8:	bdc0004c 	andi	r23,r23,1
100051ac:	b83f5226 	beq	r23,zero,10004ef8 <__alt_data_end+0xf8004ef8>
100051b0:	b53fffc3 	ldbu	r20,-1(r22)
100051b4:	b0ffff84 	addi	r3,r22,-2
100051b8:	01400e44 	movi	r5,57
100051bc:	d9800717 	ldw	r6,28(sp)
100051c0:	00000406 	br	100051d4 <_dtoa_r+0x98c>
100051c4:	30824326 	beq	r6,r2,10005ad4 <_dtoa_r+0x128c>
100051c8:	1d000003 	ldbu	r20,0(r3)
100051cc:	102d883a 	mov	r22,r2
100051d0:	18ffffc4 	addi	r3,r3,-1
100051d4:	a1003fcc 	andi	r4,r20,255
100051d8:	2100201c 	xori	r4,r4,128
100051dc:	213fe004 	addi	r4,r4,-128
100051e0:	b0bfffc4 	addi	r2,r22,-1
100051e4:	217ff726 	beq	r4,r5,100051c4 <__alt_data_end+0xf80051c4>
100051e8:	a2400044 	addi	r9,r20,1
100051ec:	12400005 	stb	r9,0(r2)
100051f0:	003f4106 	br	10004ef8 <__alt_data_end+0xf8004ef8>
100051f4:	d9000c17 	ldw	r4,48(sp)
100051f8:	2000be26 	beq	r4,zero,100054f4 <_dtoa_r+0xcac>
100051fc:	d9800417 	ldw	r6,16(sp)
10005200:	00c00044 	movi	r3,1
10005204:	19815e0e 	bge	r3,r6,10005780 <_dtoa_r+0xf38>
10005208:	d8800917 	ldw	r2,36(sp)
1000520c:	d8c00a17 	ldw	r3,40(sp)
10005210:	153fffc4 	addi	r20,r2,-1
10005214:	1d01f816 	blt	r3,r20,100059f8 <_dtoa_r+0x11b0>
10005218:	1d29c83a 	sub	r20,r3,r20
1000521c:	d9c00917 	ldw	r7,36(sp)
10005220:	3802ad16 	blt	r7,zero,10005cd8 <_dtoa_r+0x1490>
10005224:	dcc00817 	ldw	r19,32(sp)
10005228:	d8800917 	ldw	r2,36(sp)
1000522c:	d8c00817 	ldw	r3,32(sp)
10005230:	8009883a 	mov	r4,r16
10005234:	01400044 	movi	r5,1
10005238:	1887883a 	add	r3,r3,r2
1000523c:	d8c00815 	stw	r3,32(sp)
10005240:	a8ab883a 	add	r21,r21,r2
10005244:	00081740 	call	10008174 <__i2b>
10005248:	1023883a 	mov	r17,r2
1000524c:	98000826 	beq	r19,zero,10005270 <_dtoa_r+0xa28>
10005250:	0540070e 	bge	zero,r21,10005270 <_dtoa_r+0xa28>
10005254:	a805883a 	mov	r2,r21
10005258:	9d411716 	blt	r19,r21,100056b8 <_dtoa_r+0xe70>
1000525c:	d9000817 	ldw	r4,32(sp)
10005260:	98a7c83a 	sub	r19,r19,r2
10005264:	a8abc83a 	sub	r21,r21,r2
10005268:	2089c83a 	sub	r4,r4,r2
1000526c:	d9000815 	stw	r4,32(sp)
10005270:	d9800a17 	ldw	r6,40(sp)
10005274:	0180140e 	bge	zero,r6,100052c8 <_dtoa_r+0xa80>
10005278:	d9c00c17 	ldw	r7,48(sp)
1000527c:	3801d626 	beq	r7,zero,100059d8 <_dtoa_r+0x1190>
10005280:	05000e0e 	bge	zero,r20,100052bc <_dtoa_r+0xa74>
10005284:	880b883a 	mov	r5,r17
10005288:	8009883a 	mov	r4,r16
1000528c:	a00d883a 	mov	r6,r20
10005290:	000841c0 	call	1000841c <__pow5mult>
10005294:	e00d883a 	mov	r6,fp
10005298:	8009883a 	mov	r4,r16
1000529c:	100b883a 	mov	r5,r2
100052a0:	1023883a 	mov	r17,r2
100052a4:	00081b00 	call	100081b0 <__multiply>
100052a8:	102d883a 	mov	r22,r2
100052ac:	e00b883a 	mov	r5,fp
100052b0:	8009883a 	mov	r4,r16
100052b4:	0007dec0 	call	10007dec <_Bfree>
100052b8:	b039883a 	mov	fp,r22
100052bc:	d8800a17 	ldw	r2,40(sp)
100052c0:	150dc83a 	sub	r6,r2,r20
100052c4:	30011f1e 	bne	r6,zero,10005744 <_dtoa_r+0xefc>
100052c8:	8009883a 	mov	r4,r16
100052cc:	01400044 	movi	r5,1
100052d0:	00081740 	call	10008174 <__i2b>
100052d4:	d8c00b17 	ldw	r3,44(sp)
100052d8:	1029883a 	mov	r20,r2
100052dc:	00c0050e 	bge	zero,r3,100052f4 <_dtoa_r+0xaac>
100052e0:	8009883a 	mov	r4,r16
100052e4:	100b883a 	mov	r5,r2
100052e8:	180d883a 	mov	r6,r3
100052ec:	000841c0 	call	1000841c <__pow5mult>
100052f0:	1029883a 	mov	r20,r2
100052f4:	d9000417 	ldw	r4,16(sp)
100052f8:	00800044 	movi	r2,1
100052fc:	1100e00e 	bge	r2,r4,10005680 <_dtoa_r+0xe38>
10005300:	0025883a 	mov	r18,zero
10005304:	d8800b17 	ldw	r2,44(sp)
10005308:	10015f1e 	bne	r2,zero,10005888 <_dtoa_r+0x1040>
1000530c:	00800044 	movi	r2,1
10005310:	1545883a 	add	r2,r2,r21
10005314:	108007cc 	andi	r2,r2,31
10005318:	10007a26 	beq	r2,zero,10005504 <_dtoa_r+0xcbc>
1000531c:	01000804 	movi	r4,32
10005320:	2089c83a 	sub	r4,r4,r2
10005324:	00c00104 	movi	r3,4
10005328:	1902d20e 	bge	r3,r4,10005e74 <_dtoa_r+0x162c>
1000532c:	00c00704 	movi	r3,28
10005330:	1885c83a 	sub	r2,r3,r2
10005334:	d8c00817 	ldw	r3,32(sp)
10005338:	98a7883a 	add	r19,r19,r2
1000533c:	a8ab883a 	add	r21,r21,r2
10005340:	1887883a 	add	r3,r3,r2
10005344:	d8c00815 	stw	r3,32(sp)
10005348:	d9800817 	ldw	r6,32(sp)
1000534c:	0180040e 	bge	zero,r6,10005360 <_dtoa_r+0xb18>
10005350:	e00b883a 	mov	r5,fp
10005354:	8009883a 	mov	r4,r16
10005358:	00085640 	call	10008564 <__lshift>
1000535c:	1039883a 	mov	fp,r2
10005360:	0540050e 	bge	zero,r21,10005378 <_dtoa_r+0xb30>
10005364:	a00b883a 	mov	r5,r20
10005368:	8009883a 	mov	r4,r16
1000536c:	a80d883a 	mov	r6,r21
10005370:	00085640 	call	10008564 <__lshift>
10005374:	1029883a 	mov	r20,r2
10005378:	d9c00e17 	ldw	r7,56(sp)
1000537c:	3801301e 	bne	r7,zero,10005840 <_dtoa_r+0xff8>
10005380:	d9c00917 	ldw	r7,36(sp)
10005384:	01c1500e 	bge	zero,r7,100058c8 <_dtoa_r+0x1080>
10005388:	d8800c17 	ldw	r2,48(sp)
1000538c:	10006b1e 	bne	r2,zero,1000553c <_dtoa_r+0xcf4>
10005390:	dc800717 	ldw	r18,28(sp)
10005394:	dcc00917 	ldw	r19,36(sp)
10005398:	902b883a 	mov	r21,r18
1000539c:	00000206 	br	100053a8 <_dtoa_r+0xb60>
100053a0:	0007e140 	call	10007e14 <__multadd>
100053a4:	1039883a 	mov	fp,r2
100053a8:	e009883a 	mov	r4,fp
100053ac:	a00b883a 	mov	r5,r20
100053b0:	00046200 	call	10004620 <quorem>
100053b4:	10800c04 	addi	r2,r2,48
100053b8:	90800005 	stb	r2,0(r18)
100053bc:	94800044 	addi	r18,r18,1
100053c0:	9547c83a 	sub	r3,r18,r21
100053c4:	8009883a 	mov	r4,r16
100053c8:	e00b883a 	mov	r5,fp
100053cc:	01800284 	movi	r6,10
100053d0:	000f883a 	mov	r7,zero
100053d4:	1cfff216 	blt	r3,r19,100053a0 <__alt_data_end+0xf80053a0>
100053d8:	102f883a 	mov	r23,r2
100053dc:	d8800917 	ldw	r2,36(sp)
100053e0:	0082410e 	bge	zero,r2,10005ce8 <_dtoa_r+0x14a0>
100053e4:	d9000717 	ldw	r4,28(sp)
100053e8:	002b883a 	mov	r21,zero
100053ec:	20ad883a 	add	r22,r4,r2
100053f0:	e00b883a 	mov	r5,fp
100053f4:	8009883a 	mov	r4,r16
100053f8:	01800044 	movi	r6,1
100053fc:	00085640 	call	10008564 <__lshift>
10005400:	1009883a 	mov	r4,r2
10005404:	a00b883a 	mov	r5,r20
10005408:	1039883a 	mov	fp,r2
1000540c:	00086b40 	call	100086b4 <__mcmp>
10005410:	0080d10e 	bge	zero,r2,10005758 <_dtoa_r+0xf10>
10005414:	b13fffc3 	ldbu	r4,-1(r22)
10005418:	b0ffff84 	addi	r3,r22,-2
1000541c:	01800e44 	movi	r6,57
10005420:	d9c00717 	ldw	r7,28(sp)
10005424:	00000406 	br	10005438 <_dtoa_r+0xbf0>
10005428:	38813c26 	beq	r7,r2,1000591c <_dtoa_r+0x10d4>
1000542c:	19000003 	ldbu	r4,0(r3)
10005430:	102d883a 	mov	r22,r2
10005434:	18ffffc4 	addi	r3,r3,-1
10005438:	21403fcc 	andi	r5,r4,255
1000543c:	2940201c 	xori	r5,r5,128
10005440:	297fe004 	addi	r5,r5,-128
10005444:	b0bfffc4 	addi	r2,r22,-1
10005448:	29bff726 	beq	r5,r6,10005428 <__alt_data_end+0xf8005428>
1000544c:	21000044 	addi	r4,r4,1
10005450:	11000005 	stb	r4,0(r2)
10005454:	8009883a 	mov	r4,r16
10005458:	a00b883a 	mov	r5,r20
1000545c:	0007dec0 	call	10007dec <_Bfree>
10005460:	883ea526 	beq	r17,zero,10004ef8 <__alt_data_end+0xf8004ef8>
10005464:	a8000426 	beq	r21,zero,10005478 <_dtoa_r+0xc30>
10005468:	ac400326 	beq	r21,r17,10005478 <_dtoa_r+0xc30>
1000546c:	8009883a 	mov	r4,r16
10005470:	a80b883a 	mov	r5,r21
10005474:	0007dec0 	call	10007dec <_Bfree>
10005478:	8009883a 	mov	r4,r16
1000547c:	880b883a 	mov	r5,r17
10005480:	0007dec0 	call	10007dec <_Bfree>
10005484:	003e9c06 	br	10004ef8 <__alt_data_end+0xf8004ef8>
10005488:	01c00044 	movi	r7,1
1000548c:	d9c00e15 	stw	r7,56(sp)
10005490:	003d9906 	br	10004af8 <__alt_data_end+0xf8004af8>
10005494:	d8c00817 	ldw	r3,32(sp)
10005498:	d9000617 	ldw	r4,24(sp)
1000549c:	d8000b15 	stw	zero,44(sp)
100054a0:	1907c83a 	sub	r3,r3,r4
100054a4:	010dc83a 	sub	r6,zero,r4
100054a8:	d8c00815 	stw	r3,32(sp)
100054ac:	d9800a15 	stw	r6,40(sp)
100054b0:	003d9a06 	br	10004b1c <__alt_data_end+0xf8004b1c>
100054b4:	056bc83a 	sub	r21,zero,r21
100054b8:	dd400815 	stw	r21,32(sp)
100054bc:	002b883a 	mov	r21,zero
100054c0:	003d9106 	br	10004b08 <__alt_data_end+0xf8004b08>
100054c4:	d9000617 	ldw	r4,24(sp)
100054c8:	000e8480 	call	1000e848 <__floatsidf>
100054cc:	1009883a 	mov	r4,r2
100054d0:	180b883a 	mov	r5,r3
100054d4:	980d883a 	mov	r6,r19
100054d8:	880f883a 	mov	r7,r17
100054dc:	000d4f80 	call	1000d4f8 <__eqdf2>
100054e0:	103d7426 	beq	r2,zero,10004ab4 <__alt_data_end+0xf8004ab4>
100054e4:	d8c00617 	ldw	r3,24(sp)
100054e8:	18ffffc4 	addi	r3,r3,-1
100054ec:	d8c00615 	stw	r3,24(sp)
100054f0:	003d7006 	br	10004ab4 <__alt_data_end+0xf8004ab4>
100054f4:	dd000a17 	ldw	r20,40(sp)
100054f8:	dcc00817 	ldw	r19,32(sp)
100054fc:	0023883a 	mov	r17,zero
10005500:	003f5206 	br	1000524c <__alt_data_end+0xf800524c>
10005504:	00800704 	movi	r2,28
10005508:	d9000817 	ldw	r4,32(sp)
1000550c:	98a7883a 	add	r19,r19,r2
10005510:	a8ab883a 	add	r21,r21,r2
10005514:	2089883a 	add	r4,r4,r2
10005518:	d9000815 	stw	r4,32(sp)
1000551c:	003f8a06 	br	10005348 <__alt_data_end+0xf8005348>
10005520:	d9c00317 	ldw	r7,12(sp)
10005524:	013efb84 	movi	r4,-1042
10005528:	2509c83a 	sub	r4,r4,r20
1000552c:	3908983a 	sll	r4,r7,r4
10005530:	003d2c06 	br	100049e4 <__alt_data_end+0xf80049e4>
10005534:	d8000e15 	stw	zero,56(sp)
10005538:	003d6f06 	br	10004af8 <__alt_data_end+0xf8004af8>
1000553c:	04c0050e 	bge	zero,r19,10005554 <_dtoa_r+0xd0c>
10005540:	880b883a 	mov	r5,r17
10005544:	8009883a 	mov	r4,r16
10005548:	980d883a 	mov	r6,r19
1000554c:	00085640 	call	10008564 <__lshift>
10005550:	1023883a 	mov	r17,r2
10005554:	9001681e 	bne	r18,zero,10005af8 <_dtoa_r+0x12b0>
10005558:	8827883a 	mov	r19,r17
1000555c:	d8c00717 	ldw	r3,28(sp)
10005560:	d9000917 	ldw	r4,36(sp)
10005564:	1dffffc4 	addi	r23,r3,-1
10005568:	1825883a 	mov	r18,r3
1000556c:	d8c00317 	ldw	r3,12(sp)
10005570:	b92f883a 	add	r23,r23,r4
10005574:	ddc00515 	stw	r23,20(sp)
10005578:	18c0004c 	andi	r3,r3,1
1000557c:	d8c00315 	stw	r3,12(sp)
10005580:	e009883a 	mov	r4,fp
10005584:	a00b883a 	mov	r5,r20
10005588:	00046200 	call	10004620 <quorem>
1000558c:	e009883a 	mov	r4,fp
10005590:	880b883a 	mov	r5,r17
10005594:	102d883a 	mov	r22,r2
10005598:	00086b40 	call	100086b4 <__mcmp>
1000559c:	8009883a 	mov	r4,r16
100055a0:	a00b883a 	mov	r5,r20
100055a4:	980d883a 	mov	r6,r19
100055a8:	102b883a 	mov	r21,r2
100055ac:	00087140 	call	10008714 <__mdiff>
100055b0:	1007883a 	mov	r3,r2
100055b4:	10800317 	ldw	r2,12(r2)
100055b8:	b5c00c04 	addi	r23,r22,48
100055bc:	10009b1e 	bne	r2,zero,1000582c <_dtoa_r+0xfe4>
100055c0:	180b883a 	mov	r5,r3
100055c4:	e009883a 	mov	r4,fp
100055c8:	d8c01515 	stw	r3,84(sp)
100055cc:	00086b40 	call	100086b4 <__mcmp>
100055d0:	d8c01517 	ldw	r3,84(sp)
100055d4:	8009883a 	mov	r4,r16
100055d8:	d8801515 	stw	r2,84(sp)
100055dc:	180b883a 	mov	r5,r3
100055e0:	0007dec0 	call	10007dec <_Bfree>
100055e4:	d8801517 	ldw	r2,84(sp)
100055e8:	1000041e 	bne	r2,zero,100055fc <_dtoa_r+0xdb4>
100055ec:	d9000417 	ldw	r4,16(sp)
100055f0:	2000021e 	bne	r4,zero,100055fc <_dtoa_r+0xdb4>
100055f4:	d8c00317 	ldw	r3,12(sp)
100055f8:	18007926 	beq	r3,zero,100057e0 <_dtoa_r+0xf98>
100055fc:	a8006616 	blt	r21,zero,10005798 <_dtoa_r+0xf50>
10005600:	a800041e 	bne	r21,zero,10005614 <_dtoa_r+0xdcc>
10005604:	d9000417 	ldw	r4,16(sp)
10005608:	2000021e 	bne	r4,zero,10005614 <_dtoa_r+0xdcc>
1000560c:	d8c00317 	ldw	r3,12(sp)
10005610:	18006126 	beq	r3,zero,10005798 <_dtoa_r+0xf50>
10005614:	00814916 	blt	zero,r2,10005b3c <_dtoa_r+0x12f4>
10005618:	d8c00517 	ldw	r3,20(sp)
1000561c:	95400044 	addi	r21,r18,1
10005620:	95c00005 	stb	r23,0(r18)
10005624:	a82d883a 	mov	r22,r21
10005628:	90c14c26 	beq	r18,r3,10005b5c <_dtoa_r+0x1314>
1000562c:	e00b883a 	mov	r5,fp
10005630:	8009883a 	mov	r4,r16
10005634:	01800284 	movi	r6,10
10005638:	000f883a 	mov	r7,zero
1000563c:	0007e140 	call	10007e14 <__multadd>
10005640:	1039883a 	mov	fp,r2
10005644:	8cc07026 	beq	r17,r19,10005808 <_dtoa_r+0xfc0>
10005648:	880b883a 	mov	r5,r17
1000564c:	01800284 	movi	r6,10
10005650:	000f883a 	mov	r7,zero
10005654:	8009883a 	mov	r4,r16
10005658:	0007e140 	call	10007e14 <__multadd>
1000565c:	980b883a 	mov	r5,r19
10005660:	8009883a 	mov	r4,r16
10005664:	01800284 	movi	r6,10
10005668:	000f883a 	mov	r7,zero
1000566c:	1023883a 	mov	r17,r2
10005670:	0007e140 	call	10007e14 <__multadd>
10005674:	1027883a 	mov	r19,r2
10005678:	a825883a 	mov	r18,r21
1000567c:	003fc006 	br	10005580 <__alt_data_end+0xf8005580>
10005680:	d9800317 	ldw	r6,12(sp)
10005684:	303f1e1e 	bne	r6,zero,10005300 <__alt_data_end+0xf8005300>
10005688:	00c00434 	movhi	r3,16
1000568c:	18ffffc4 	addi	r3,r3,-1
10005690:	90c6703a 	and	r3,r18,r3
10005694:	183f1a1e 	bne	r3,zero,10005300 <__alt_data_end+0xf8005300>
10005698:	949ffc2c 	andhi	r18,r18,32752
1000569c:	903f1826 	beq	r18,zero,10005300 <__alt_data_end+0xf8005300>
100056a0:	d9c00817 	ldw	r7,32(sp)
100056a4:	a8ab883a 	add	r21,r21,r2
100056a8:	1025883a 	mov	r18,r2
100056ac:	388f883a 	add	r7,r7,r2
100056b0:	d9c00815 	stw	r7,32(sp)
100056b4:	003f1306 	br	10005304 <__alt_data_end+0xf8005304>
100056b8:	9805883a 	mov	r2,r19
100056bc:	003ee706 	br	1000525c <__alt_data_end+0xf800525c>
100056c0:	01800044 	movi	r6,1
100056c4:	d9800c15 	stw	r6,48(sp)
100056c8:	d8802117 	ldw	r2,132(sp)
100056cc:	0080da0e 	bge	zero,r2,10005a38 <_dtoa_r+0x11f0>
100056d0:	100d883a 	mov	r6,r2
100056d4:	d8800d15 	stw	r2,52(sp)
100056d8:	d8800915 	stw	r2,36(sp)
100056dc:	003d2a06 	br	10004b88 <__alt_data_end+0xf8004b88>
100056e0:	d8800917 	ldw	r2,36(sp)
100056e4:	00be4016 	blt	zero,r2,10004fe8 <__alt_data_end+0xf8004fe8>
100056e8:	1000b81e 	bne	r2,zero,100059cc <_dtoa_r+0x1184>
100056ec:	8809883a 	mov	r4,r17
100056f0:	980b883a 	mov	r5,r19
100056f4:	000d883a 	mov	r6,zero
100056f8:	01d00534 	movhi	r7,16404
100056fc:	000d7400 	call	1000d740 <__muldf3>
10005700:	d9800317 	ldw	r6,12(sp)
10005704:	1009883a 	mov	r4,r2
10005708:	180b883a 	mov	r5,r3
1000570c:	900f883a 	mov	r7,r18
10005710:	000d57c0 	call	1000d57c <__gedf2>
10005714:	0029883a 	mov	r20,zero
10005718:	0023883a 	mov	r17,zero
1000571c:	10007716 	blt	r2,zero,100058fc <_dtoa_r+0x10b4>
10005720:	d9002117 	ldw	r4,132(sp)
10005724:	dd800717 	ldw	r22,28(sp)
10005728:	0108303a 	nor	r4,zero,r4
1000572c:	d9000615 	stw	r4,24(sp)
10005730:	8009883a 	mov	r4,r16
10005734:	a00b883a 	mov	r5,r20
10005738:	0007dec0 	call	10007dec <_Bfree>
1000573c:	883f4e1e 	bne	r17,zero,10005478 <__alt_data_end+0xf8005478>
10005740:	003ded06 	br	10004ef8 <__alt_data_end+0xf8004ef8>
10005744:	e00b883a 	mov	r5,fp
10005748:	8009883a 	mov	r4,r16
1000574c:	000841c0 	call	1000841c <__pow5mult>
10005750:	1039883a 	mov	fp,r2
10005754:	003edc06 	br	100052c8 <__alt_data_end+0xf80052c8>
10005758:	1000021e 	bne	r2,zero,10005764 <_dtoa_r+0xf1c>
1000575c:	ba40004c 	andi	r9,r23,1
10005760:	483f2c1e 	bne	r9,zero,10005414 <__alt_data_end+0xf8005414>
10005764:	01000c04 	movi	r4,48
10005768:	00000106 	br	10005770 <_dtoa_r+0xf28>
1000576c:	102d883a 	mov	r22,r2
10005770:	b0bfffc4 	addi	r2,r22,-1
10005774:	10c00007 	ldb	r3,0(r2)
10005778:	193ffc26 	beq	r3,r4,1000576c <__alt_data_end+0xf800576c>
1000577c:	003f3506 	br	10005454 <__alt_data_end+0xf8005454>
10005780:	d9c00f17 	ldw	r7,60(sp)
10005784:	38015a26 	beq	r7,zero,10005cf0 <_dtoa_r+0x14a8>
10005788:	10810cc4 	addi	r2,r2,1075
1000578c:	dd000a17 	ldw	r20,40(sp)
10005790:	dcc00817 	ldw	r19,32(sp)
10005794:	003ea506 	br	1000522c <__alt_data_end+0xf800522c>
10005798:	00800c0e 	bge	zero,r2,100057cc <_dtoa_r+0xf84>
1000579c:	e00b883a 	mov	r5,fp
100057a0:	8009883a 	mov	r4,r16
100057a4:	01800044 	movi	r6,1
100057a8:	00085640 	call	10008564 <__lshift>
100057ac:	1009883a 	mov	r4,r2
100057b0:	a00b883a 	mov	r5,r20
100057b4:	1039883a 	mov	fp,r2
100057b8:	00086b40 	call	100086b4 <__mcmp>
100057bc:	0081930e 	bge	zero,r2,10005e0c <_dtoa_r+0x15c4>
100057c0:	00800e44 	movi	r2,57
100057c4:	b8800a26 	beq	r23,r2,100057f0 <_dtoa_r+0xfa8>
100057c8:	b5c00c44 	addi	r23,r22,49
100057cc:	882b883a 	mov	r21,r17
100057d0:	95800044 	addi	r22,r18,1
100057d4:	95c00005 	stb	r23,0(r18)
100057d8:	9823883a 	mov	r17,r19
100057dc:	003f1d06 	br	10005454 <__alt_data_end+0xf8005454>
100057e0:	00800e44 	movi	r2,57
100057e4:	b8800226 	beq	r23,r2,100057f0 <_dtoa_r+0xfa8>
100057e8:	057ff716 	blt	zero,r21,100057c8 <__alt_data_end+0xf80057c8>
100057ec:	003ff706 	br	100057cc <__alt_data_end+0xf80057cc>
100057f0:	01000e44 	movi	r4,57
100057f4:	882b883a 	mov	r21,r17
100057f8:	95800044 	addi	r22,r18,1
100057fc:	91000005 	stb	r4,0(r18)
10005800:	9823883a 	mov	r17,r19
10005804:	003f0406 	br	10005418 <__alt_data_end+0xf8005418>
10005808:	880b883a 	mov	r5,r17
1000580c:	8009883a 	mov	r4,r16
10005810:	01800284 	movi	r6,10
10005814:	000f883a 	mov	r7,zero
10005818:	0007e140 	call	10007e14 <__multadd>
1000581c:	1023883a 	mov	r17,r2
10005820:	1027883a 	mov	r19,r2
10005824:	a825883a 	mov	r18,r21
10005828:	003f5506 	br	10005580 <__alt_data_end+0xf8005580>
1000582c:	8009883a 	mov	r4,r16
10005830:	180b883a 	mov	r5,r3
10005834:	0007dec0 	call	10007dec <_Bfree>
10005838:	00800044 	movi	r2,1
1000583c:	003f6f06 	br	100055fc <__alt_data_end+0xf80055fc>
10005840:	e009883a 	mov	r4,fp
10005844:	a00b883a 	mov	r5,r20
10005848:	00086b40 	call	100086b4 <__mcmp>
1000584c:	103ecc0e 	bge	r2,zero,10005380 <__alt_data_end+0xf8005380>
10005850:	e00b883a 	mov	r5,fp
10005854:	8009883a 	mov	r4,r16
10005858:	01800284 	movi	r6,10
1000585c:	000f883a 	mov	r7,zero
10005860:	0007e140 	call	10007e14 <__multadd>
10005864:	1039883a 	mov	fp,r2
10005868:	d8800617 	ldw	r2,24(sp)
1000586c:	d8c00c17 	ldw	r3,48(sp)
10005870:	10bfffc4 	addi	r2,r2,-1
10005874:	d8800615 	stw	r2,24(sp)
10005878:	1801681e 	bne	r3,zero,10005e1c <_dtoa_r+0x15d4>
1000587c:	d9800d17 	ldw	r6,52(sp)
10005880:	d9800915 	stw	r6,36(sp)
10005884:	003ebe06 	br	10005380 <__alt_data_end+0xf8005380>
10005888:	a0800417 	ldw	r2,16(r20)
1000588c:	10800104 	addi	r2,r2,4
10005890:	1085883a 	add	r2,r2,r2
10005894:	1085883a 	add	r2,r2,r2
10005898:	a085883a 	add	r2,r20,r2
1000589c:	11000017 	ldw	r4,0(r2)
100058a0:	000805c0 	call	1000805c <__hi0bits>
100058a4:	00c00804 	movi	r3,32
100058a8:	1885c83a 	sub	r2,r3,r2
100058ac:	003e9806 	br	10005310 <__alt_data_end+0xf8005310>
100058b0:	d8800717 	ldw	r2,28(sp)
100058b4:	003c1306 	br	10004904 <__alt_data_end+0xf8004904>
100058b8:	00800084 	movi	r2,2
100058bc:	18bdb11e 	bne	r3,r2,10004f84 <__alt_data_end+0xf8004f84>
100058c0:	d8000c15 	stw	zero,48(sp)
100058c4:	003f8006 	br	100056c8 <__alt_data_end+0xf80056c8>
100058c8:	d8c00417 	ldw	r3,16(sp)
100058cc:	00800084 	movi	r2,2
100058d0:	10fead0e 	bge	r2,r3,10005388 <__alt_data_end+0xf8005388>
100058d4:	383f921e 	bne	r7,zero,10005720 <__alt_data_end+0xf8005720>
100058d8:	a00b883a 	mov	r5,r20
100058dc:	8009883a 	mov	r4,r16
100058e0:	01800144 	movi	r6,5
100058e4:	0007e140 	call	10007e14 <__multadd>
100058e8:	e009883a 	mov	r4,fp
100058ec:	100b883a 	mov	r5,r2
100058f0:	1029883a 	mov	r20,r2
100058f4:	00086b40 	call	100086b4 <__mcmp>
100058f8:	00bf890e 	bge	zero,r2,10005720 <__alt_data_end+0xf8005720>
100058fc:	d9c00617 	ldw	r7,24(sp)
10005900:	d9800717 	ldw	r6,28(sp)
10005904:	00800c44 	movi	r2,49
10005908:	39c00044 	addi	r7,r7,1
1000590c:	35800044 	addi	r22,r6,1
10005910:	30800005 	stb	r2,0(r6)
10005914:	d9c00615 	stw	r7,24(sp)
10005918:	003f8506 	br	10005730 <__alt_data_end+0xf8005730>
1000591c:	d9800617 	ldw	r6,24(sp)
10005920:	d9c00717 	ldw	r7,28(sp)
10005924:	00800c44 	movi	r2,49
10005928:	31800044 	addi	r6,r6,1
1000592c:	d9800615 	stw	r6,24(sp)
10005930:	38800005 	stb	r2,0(r7)
10005934:	003ec706 	br	10005454 <__alt_data_end+0xf8005454>
10005938:	df000417 	ldw	fp,16(sp)
1000593c:	dc000317 	ldw	r16,12(sp)
10005940:	003d6d06 	br	10004ef8 <__alt_data_end+0xf8004ef8>
10005944:	8809883a 	mov	r4,r17
10005948:	000e8480 	call	1000e848 <__floatsidf>
1000594c:	9809883a 	mov	r4,r19
10005950:	a00b883a 	mov	r5,r20
10005954:	100d883a 	mov	r6,r2
10005958:	180f883a 	mov	r7,r3
1000595c:	000d7400 	call	1000d740 <__muldf3>
10005960:	1009883a 	mov	r4,r2
10005964:	180b883a 	mov	r5,r3
10005968:	000d883a 	mov	r6,zero
1000596c:	01d00734 	movhi	r7,16412
10005970:	000c2e00 	call	1000c2e0 <__adddf3>
10005974:	05bf3034 	movhi	r22,64704
10005978:	1023883a 	mov	r17,r2
1000597c:	1daf883a 	add	r23,r3,r22
10005980:	9809883a 	mov	r4,r19
10005984:	a00b883a 	mov	r5,r20
10005988:	000d883a 	mov	r6,zero
1000598c:	01d00534 	movhi	r7,16404
10005990:	000df400 	call	1000df40 <__subdf3>
10005994:	1009883a 	mov	r4,r2
10005998:	180b883a 	mov	r5,r3
1000599c:	880d883a 	mov	r6,r17
100059a0:	b80f883a 	mov	r7,r23
100059a4:	1027883a 	mov	r19,r2
100059a8:	1829883a 	mov	r20,r3
100059ac:	000d57c0 	call	1000d57c <__gedf2>
100059b0:	00806d16 	blt	zero,r2,10005b68 <_dtoa_r+0x1320>
100059b4:	b9e0003c 	xorhi	r7,r23,32768
100059b8:	9809883a 	mov	r4,r19
100059bc:	a00b883a 	mov	r5,r20
100059c0:	880d883a 	mov	r6,r17
100059c4:	000d6540 	call	1000d654 <__ledf2>
100059c8:	103d7a0e 	bge	r2,zero,10004fb4 <__alt_data_end+0xf8004fb4>
100059cc:	0029883a 	mov	r20,zero
100059d0:	0023883a 	mov	r17,zero
100059d4:	003f5206 	br	10005720 <__alt_data_end+0xf8005720>
100059d8:	d9800a17 	ldw	r6,40(sp)
100059dc:	e00b883a 	mov	r5,fp
100059e0:	8009883a 	mov	r4,r16
100059e4:	000841c0 	call	1000841c <__pow5mult>
100059e8:	1039883a 	mov	fp,r2
100059ec:	003e3606 	br	100052c8 <__alt_data_end+0xf80052c8>
100059f0:	d8000c15 	stw	zero,48(sp)
100059f4:	003c5c06 	br	10004b68 <__alt_data_end+0xf8004b68>
100059f8:	d9000a17 	ldw	r4,40(sp)
100059fc:	d9800b17 	ldw	r6,44(sp)
10005a00:	dd000a15 	stw	r20,40(sp)
10005a04:	a105c83a 	sub	r2,r20,r4
10005a08:	308d883a 	add	r6,r6,r2
10005a0c:	d9800b15 	stw	r6,44(sp)
10005a10:	0029883a 	mov	r20,zero
10005a14:	003e0106 	br	1000521c <__alt_data_end+0xf800521c>
10005a18:	dcc00317 	ldw	r19,12(sp)
10005a1c:	9029883a 	mov	r20,r18
10005a20:	04400084 	movi	r17,2
10005a24:	003c8606 	br	10004c40 <__alt_data_end+0xf8004c40>
10005a28:	3023883a 	mov	r17,r6
10005a2c:	80001115 	stw	zero,68(r16)
10005a30:	000b883a 	mov	r5,zero
10005a34:	003c6006 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10005a38:	04400044 	movi	r17,1
10005a3c:	dc400d15 	stw	r17,52(sp)
10005a40:	dc400915 	stw	r17,36(sp)
10005a44:	dc402115 	stw	r17,132(sp)
10005a48:	003ff806 	br	10005a2c <__alt_data_end+0xf8005a2c>
10005a4c:	d8800617 	ldw	r2,24(sp)
10005a50:	00adc83a 	sub	r22,zero,r2
10005a54:	b000ac26 	beq	r22,zero,10005d08 <_dtoa_r+0x14c0>
10005a58:	b08003cc 	andi	r2,r22,15
10005a5c:	100490fa 	slli	r2,r2,3
10005a60:	00c40074 	movhi	r3,4097
10005a64:	18c6b204 	addi	r3,r3,6856
10005a68:	d9000317 	ldw	r4,12(sp)
10005a6c:	1885883a 	add	r2,r3,r2
10005a70:	11800017 	ldw	r6,0(r2)
10005a74:	11c00117 	ldw	r7,4(r2)
10005a78:	b02dd13a 	srai	r22,r22,4
10005a7c:	900b883a 	mov	r5,r18
10005a80:	000d7400 	call	1000d740 <__muldf3>
10005a84:	1027883a 	mov	r19,r2
10005a88:	1829883a 	mov	r20,r3
10005a8c:	b000ec26 	beq	r22,zero,10005e40 <_dtoa_r+0x15f8>
10005a90:	05c40074 	movhi	r23,4097
10005a94:	bdc6a804 	addi	r23,r23,6816
10005a98:	04400084 	movi	r17,2
10005a9c:	b180004c 	andi	r6,r22,1
10005aa0:	1009883a 	mov	r4,r2
10005aa4:	b02dd07a 	srai	r22,r22,1
10005aa8:	180b883a 	mov	r5,r3
10005aac:	30000426 	beq	r6,zero,10005ac0 <_dtoa_r+0x1278>
10005ab0:	b9800017 	ldw	r6,0(r23)
10005ab4:	b9c00117 	ldw	r7,4(r23)
10005ab8:	8c400044 	addi	r17,r17,1
10005abc:	000d7400 	call	1000d740 <__muldf3>
10005ac0:	bdc00204 	addi	r23,r23,8
10005ac4:	b03ff51e 	bne	r22,zero,10005a9c <__alt_data_end+0xf8005a9c>
10005ac8:	1027883a 	mov	r19,r2
10005acc:	1829883a 	mov	r20,r3
10005ad0:	003c7406 	br	10004ca4 <__alt_data_end+0xf8004ca4>
10005ad4:	d9800617 	ldw	r6,24(sp)
10005ad8:	d9c00717 	ldw	r7,28(sp)
10005adc:	00c00c04 	movi	r3,48
10005ae0:	31800044 	addi	r6,r6,1
10005ae4:	38c00005 	stb	r3,0(r7)
10005ae8:	02400c44 	movi	r9,49
10005aec:	d9800615 	stw	r6,24(sp)
10005af0:	12400005 	stb	r9,0(r2)
10005af4:	003d0006 	br	10004ef8 <__alt_data_end+0xf8004ef8>
10005af8:	89400117 	ldw	r5,4(r17)
10005afc:	8009883a 	mov	r4,r16
10005b00:	0007d440 	call	10007d44 <_Balloc>
10005b04:	89800417 	ldw	r6,16(r17)
10005b08:	11000304 	addi	r4,r2,12
10005b0c:	89400304 	addi	r5,r17,12
10005b10:	31800084 	addi	r6,r6,2
10005b14:	318d883a 	add	r6,r6,r6
10005b18:	318d883a 	add	r6,r6,r6
10005b1c:	1025883a 	mov	r18,r2
10005b20:	00079e80 	call	100079e8 <memcpy>
10005b24:	8009883a 	mov	r4,r16
10005b28:	900b883a 	mov	r5,r18
10005b2c:	01800044 	movi	r6,1
10005b30:	00085640 	call	10008564 <__lshift>
10005b34:	1027883a 	mov	r19,r2
10005b38:	003e8806 	br	1000555c <__alt_data_end+0xf800555c>
10005b3c:	00800e44 	movi	r2,57
10005b40:	b8bf2b26 	beq	r23,r2,100057f0 <__alt_data_end+0xf80057f0>
10005b44:	ba400044 	addi	r9,r23,1
10005b48:	882b883a 	mov	r21,r17
10005b4c:	95800044 	addi	r22,r18,1
10005b50:	92400005 	stb	r9,0(r18)
10005b54:	9823883a 	mov	r17,r19
10005b58:	003e3e06 	br	10005454 <__alt_data_end+0xf8005454>
10005b5c:	882b883a 	mov	r21,r17
10005b60:	9823883a 	mov	r17,r19
10005b64:	003e2206 	br	100053f0 <__alt_data_end+0xf80053f0>
10005b68:	0029883a 	mov	r20,zero
10005b6c:	0023883a 	mov	r17,zero
10005b70:	003f6206 	br	100058fc <__alt_data_end+0xf80058fc>
10005b74:	59bfffc4 	addi	r6,r11,-1
10005b78:	300490fa 	slli	r2,r6,3
10005b7c:	00c40074 	movhi	r3,4097
10005b80:	18c6b204 	addi	r3,r3,6856
10005b84:	b80f883a 	mov	r7,r23
10005b88:	1885883a 	add	r2,r3,r2
10005b8c:	11000017 	ldw	r4,0(r2)
10005b90:	11400117 	ldw	r5,4(r2)
10005b94:	d8800717 	ldw	r2,28(sp)
10005b98:	d9801015 	stw	r6,64(sp)
10005b9c:	880d883a 	mov	r6,r17
10005ba0:	dac01615 	stw	r11,88(sp)
10005ba4:	15800044 	addi	r22,r2,1
10005ba8:	000d7400 	call	1000d740 <__muldf3>
10005bac:	a00b883a 	mov	r5,r20
10005bb0:	9809883a 	mov	r4,r19
10005bb4:	d8c01215 	stw	r3,72(sp)
10005bb8:	d8801115 	stw	r2,68(sp)
10005bbc:	000e7c80 	call	1000e7c8 <__fixdfsi>
10005bc0:	1009883a 	mov	r4,r2
10005bc4:	1023883a 	mov	r17,r2
10005bc8:	000e8480 	call	1000e848 <__floatsidf>
10005bcc:	9809883a 	mov	r4,r19
10005bd0:	a00b883a 	mov	r5,r20
10005bd4:	100d883a 	mov	r6,r2
10005bd8:	180f883a 	mov	r7,r3
10005bdc:	000df400 	call	1000df40 <__subdf3>
10005be0:	1815883a 	mov	r10,r3
10005be4:	d8c00717 	ldw	r3,28(sp)
10005be8:	8c400c04 	addi	r17,r17,48
10005bec:	102f883a 	mov	r23,r2
10005bf0:	1c400005 	stb	r17,0(r3)
10005bf4:	dac01617 	ldw	r11,88(sp)
10005bf8:	00800044 	movi	r2,1
10005bfc:	58802426 	beq	r11,r2,10005c90 <_dtoa_r+0x1448>
10005c00:	d9800717 	ldw	r6,28(sp)
10005c04:	dc001415 	stw	r16,80(sp)
10005c08:	b805883a 	mov	r2,r23
10005c0c:	32d7883a 	add	r11,r6,r11
10005c10:	b027883a 	mov	r19,r22
10005c14:	5821883a 	mov	r16,r11
10005c18:	5007883a 	mov	r3,r10
10005c1c:	902f883a 	mov	r23,r18
10005c20:	000d883a 	mov	r6,zero
10005c24:	01d00934 	movhi	r7,16420
10005c28:	1009883a 	mov	r4,r2
10005c2c:	180b883a 	mov	r5,r3
10005c30:	000d7400 	call	1000d740 <__muldf3>
10005c34:	180b883a 	mov	r5,r3
10005c38:	1009883a 	mov	r4,r2
10005c3c:	1829883a 	mov	r20,r3
10005c40:	1025883a 	mov	r18,r2
10005c44:	000e7c80 	call	1000e7c8 <__fixdfsi>
10005c48:	1009883a 	mov	r4,r2
10005c4c:	1023883a 	mov	r17,r2
10005c50:	000e8480 	call	1000e848 <__floatsidf>
10005c54:	9009883a 	mov	r4,r18
10005c58:	a00b883a 	mov	r5,r20
10005c5c:	100d883a 	mov	r6,r2
10005c60:	180f883a 	mov	r7,r3
10005c64:	8c400c04 	addi	r17,r17,48
10005c68:	000df400 	call	1000df40 <__subdf3>
10005c6c:	9cc00044 	addi	r19,r19,1
10005c70:	9c7fffc5 	stb	r17,-1(r19)
10005c74:	9c3fea1e 	bne	r19,r16,10005c20 <__alt_data_end+0xf8005c20>
10005c78:	d9c01017 	ldw	r7,64(sp)
10005c7c:	dc001417 	ldw	r16,80(sp)
10005c80:	b825883a 	mov	r18,r23
10005c84:	1815883a 	mov	r10,r3
10005c88:	102f883a 	mov	r23,r2
10005c8c:	b1ed883a 	add	r22,r22,r7
10005c90:	d9001117 	ldw	r4,68(sp)
10005c94:	d9401217 	ldw	r5,72(sp)
10005c98:	000d883a 	mov	r6,zero
10005c9c:	01cff834 	movhi	r7,16352
10005ca0:	da801615 	stw	r10,88(sp)
10005ca4:	000c2e00 	call	1000c2e0 <__adddf3>
10005ca8:	da801617 	ldw	r10,88(sp)
10005cac:	1009883a 	mov	r4,r2
10005cb0:	180b883a 	mov	r5,r3
10005cb4:	500f883a 	mov	r7,r10
10005cb8:	b80d883a 	mov	r6,r23
10005cbc:	000d6540 	call	1000d654 <__ledf2>
10005cc0:	da801617 	ldw	r10,88(sp)
10005cc4:	1000330e 	bge	r2,zero,10005d94 <_dtoa_r+0x154c>
10005cc8:	d9001317 	ldw	r4,76(sp)
10005ccc:	b53fffc3 	ldbu	r20,-1(r22)
10005cd0:	d9000615 	stw	r4,24(sp)
10005cd4:	003d3706 	br	100051b4 <__alt_data_end+0xf80051b4>
10005cd8:	d8800817 	ldw	r2,32(sp)
10005cdc:	11e7c83a 	sub	r19,r2,r7
10005ce0:	0005883a 	mov	r2,zero
10005ce4:	003d5106 	br	1000522c <__alt_data_end+0xf800522c>
10005ce8:	00800044 	movi	r2,1
10005cec:	003dbd06 	br	100053e4 <__alt_data_end+0xf80053e4>
10005cf0:	d8800217 	ldw	r2,8(sp)
10005cf4:	00c00d84 	movi	r3,54
10005cf8:	dd000a17 	ldw	r20,40(sp)
10005cfc:	1885c83a 	sub	r2,r3,r2
10005d00:	dcc00817 	ldw	r19,32(sp)
10005d04:	003d4906 	br	1000522c <__alt_data_end+0xf800522c>
10005d08:	dcc00317 	ldw	r19,12(sp)
10005d0c:	9029883a 	mov	r20,r18
10005d10:	04400084 	movi	r17,2
10005d14:	003be306 	br	10004ca4 <__alt_data_end+0xf8004ca4>
10005d18:	d9000917 	ldw	r4,36(sp)
10005d1c:	203f0926 	beq	r4,zero,10005944 <__alt_data_end+0xf8005944>
10005d20:	d9800d17 	ldw	r6,52(sp)
10005d24:	01bca30e 	bge	zero,r6,10004fb4 <__alt_data_end+0xf8004fb4>
10005d28:	a00b883a 	mov	r5,r20
10005d2c:	9809883a 	mov	r4,r19
10005d30:	000d883a 	mov	r6,zero
10005d34:	01d00934 	movhi	r7,16420
10005d38:	000d7400 	call	1000d740 <__muldf3>
10005d3c:	89000044 	addi	r4,r17,1
10005d40:	1027883a 	mov	r19,r2
10005d44:	1829883a 	mov	r20,r3
10005d48:	000e8480 	call	1000e848 <__floatsidf>
10005d4c:	9809883a 	mov	r4,r19
10005d50:	a00b883a 	mov	r5,r20
10005d54:	100d883a 	mov	r6,r2
10005d58:	180f883a 	mov	r7,r3
10005d5c:	000d7400 	call	1000d740 <__muldf3>
10005d60:	01d00734 	movhi	r7,16412
10005d64:	1009883a 	mov	r4,r2
10005d68:	180b883a 	mov	r5,r3
10005d6c:	000d883a 	mov	r6,zero
10005d70:	000c2e00 	call	1000c2e0 <__adddf3>
10005d74:	d9c00617 	ldw	r7,24(sp)
10005d78:	05bf3034 	movhi	r22,64704
10005d7c:	1023883a 	mov	r17,r2
10005d80:	39ffffc4 	addi	r7,r7,-1
10005d84:	d9c01315 	stw	r7,76(sp)
10005d88:	1daf883a 	add	r23,r3,r22
10005d8c:	dac00d17 	ldw	r11,52(sp)
10005d90:	003be006 	br	10004d14 <__alt_data_end+0xf8004d14>
10005d94:	d9801117 	ldw	r6,68(sp)
10005d98:	d9c01217 	ldw	r7,72(sp)
10005d9c:	0009883a 	mov	r4,zero
10005da0:	014ff834 	movhi	r5,16352
10005da4:	da801615 	stw	r10,88(sp)
10005da8:	000df400 	call	1000df40 <__subdf3>
10005dac:	da801617 	ldw	r10,88(sp)
10005db0:	1009883a 	mov	r4,r2
10005db4:	180b883a 	mov	r5,r3
10005db8:	b80d883a 	mov	r6,r23
10005dbc:	500f883a 	mov	r7,r10
10005dc0:	000d57c0 	call	1000d57c <__gedf2>
10005dc4:	00bc7b0e 	bge	zero,r2,10004fb4 <__alt_data_end+0xf8004fb4>
10005dc8:	01000c04 	movi	r4,48
10005dcc:	00000106 	br	10005dd4 <_dtoa_r+0x158c>
10005dd0:	102d883a 	mov	r22,r2
10005dd4:	b0bfffc4 	addi	r2,r22,-1
10005dd8:	10c00007 	ldb	r3,0(r2)
10005ddc:	193ffc26 	beq	r3,r4,10005dd0 <__alt_data_end+0xf8005dd0>
10005de0:	d9001317 	ldw	r4,76(sp)
10005de4:	d9000615 	stw	r4,24(sp)
10005de8:	003c4306 	br	10004ef8 <__alt_data_end+0xf8004ef8>
10005dec:	d8c01317 	ldw	r3,76(sp)
10005df0:	dc001117 	ldw	r16,68(sp)
10005df4:	d8c00615 	stw	r3,24(sp)
10005df8:	003cee06 	br	100051b4 <__alt_data_end+0xf80051b4>
10005dfc:	dd401217 	ldw	r21,72(sp)
10005e00:	dc001117 	ldw	r16,68(sp)
10005e04:	dc801417 	ldw	r18,80(sp)
10005e08:	003c6a06 	br	10004fb4 <__alt_data_end+0xf8004fb4>
10005e0c:	103e6f1e 	bne	r2,zero,100057cc <__alt_data_end+0xf80057cc>
10005e10:	b880004c 	andi	r2,r23,1
10005e14:	103e6d26 	beq	r2,zero,100057cc <__alt_data_end+0xf80057cc>
10005e18:	003e6906 	br	100057c0 <__alt_data_end+0xf80057c0>
10005e1c:	8009883a 	mov	r4,r16
10005e20:	880b883a 	mov	r5,r17
10005e24:	01800284 	movi	r6,10
10005e28:	000f883a 	mov	r7,zero
10005e2c:	0007e140 	call	10007e14 <__multadd>
10005e30:	d9000d17 	ldw	r4,52(sp)
10005e34:	1023883a 	mov	r17,r2
10005e38:	d9000915 	stw	r4,36(sp)
10005e3c:	003d5006 	br	10005380 <__alt_data_end+0xf8005380>
10005e40:	04400084 	movi	r17,2
10005e44:	003b9706 	br	10004ca4 <__alt_data_end+0xf8004ca4>
10005e48:	d8801317 	ldw	r2,76(sp)
10005e4c:	d8800615 	stw	r2,24(sp)
10005e50:	003cd806 	br	100051b4 <__alt_data_end+0xf80051b4>
10005e54:	d8801317 	ldw	r2,76(sp)
10005e58:	d8800615 	stw	r2,24(sp)
10005e5c:	003c2606 	br	10004ef8 <__alt_data_end+0xf8004ef8>
10005e60:	04c00044 	movi	r19,1
10005e64:	003b3506 	br	10004b3c <__alt_data_end+0xf8004b3c>
10005e68:	3023883a 	mov	r17,r6
10005e6c:	000b883a 	mov	r5,zero
10005e70:	003b5106 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10005e74:	20fd3426 	beq	r4,r3,10005348 <__alt_data_end+0xf8005348>
10005e78:	00c00f04 	movi	r3,60
10005e7c:	1885c83a 	sub	r2,r3,r2
10005e80:	003da106 	br	10005508 <__alt_data_end+0xf8005508>

10005e84 <_fflush_r>:
10005e84:	defffb04 	addi	sp,sp,-20
10005e88:	dcc00315 	stw	r19,12(sp)
10005e8c:	dc400115 	stw	r17,4(sp)
10005e90:	dfc00415 	stw	ra,16(sp)
10005e94:	dc800215 	stw	r18,8(sp)
10005e98:	dc000015 	stw	r16,0(sp)
10005e9c:	2027883a 	mov	r19,r4
10005ea0:	2823883a 	mov	r17,r5
10005ea4:	20000226 	beq	r4,zero,10005eb0 <_fflush_r+0x2c>
10005ea8:	20800e17 	ldw	r2,56(r4)
10005eac:	10005826 	beq	r2,zero,10006010 <_fflush_r+0x18c>
10005eb0:	8880030b 	ldhu	r2,12(r17)
10005eb4:	10ffffcc 	andi	r3,r2,65535
10005eb8:	18e0001c 	xori	r3,r3,32768
10005ebc:	18e00004 	addi	r3,r3,-32768
10005ec0:	18002b26 	beq	r3,zero,10005f70 <_fflush_r+0xec>
10005ec4:	10c0020c 	andi	r3,r2,8
10005ec8:	1800311e 	bne	r3,zero,10005f90 <_fflush_r+0x10c>
10005ecc:	88c00117 	ldw	r3,4(r17)
10005ed0:	10820014 	ori	r2,r2,2048
10005ed4:	8880030d 	sth	r2,12(r17)
10005ed8:	00c05c0e 	bge	zero,r3,1000604c <_fflush_r+0x1c8>
10005edc:	88c00a17 	ldw	r3,40(r17)
10005ee0:	18002326 	beq	r3,zero,10005f70 <_fflush_r+0xec>
10005ee4:	9c000017 	ldw	r16,0(r19)
10005ee8:	1104000c 	andi	r4,r2,4096
10005eec:	98000015 	stw	zero,0(r19)
10005ef0:	20004b26 	beq	r4,zero,10006020 <_fflush_r+0x19c>
10005ef4:	89801417 	ldw	r6,80(r17)
10005ef8:	1080010c 	andi	r2,r2,4
10005efc:	10000626 	beq	r2,zero,10005f18 <_fflush_r+0x94>
10005f00:	89000117 	ldw	r4,4(r17)
10005f04:	88800c17 	ldw	r2,48(r17)
10005f08:	310dc83a 	sub	r6,r6,r4
10005f0c:	10000226 	beq	r2,zero,10005f18 <_fflush_r+0x94>
10005f10:	88800f17 	ldw	r2,60(r17)
10005f14:	308dc83a 	sub	r6,r6,r2
10005f18:	89400717 	ldw	r5,28(r17)
10005f1c:	9809883a 	mov	r4,r19
10005f20:	000f883a 	mov	r7,zero
10005f24:	183ee83a 	callr	r3
10005f28:	00ffffc4 	movi	r3,-1
10005f2c:	10c04a26 	beq	r2,r3,10006058 <_fflush_r+0x1d4>
10005f30:	88c0030b 	ldhu	r3,12(r17)
10005f34:	89000417 	ldw	r4,16(r17)
10005f38:	88000115 	stw	zero,4(r17)
10005f3c:	197dffcc 	andi	r5,r3,63487
10005f40:	8940030d 	sth	r5,12(r17)
10005f44:	89000015 	stw	r4,0(r17)
10005f48:	18c4000c 	andi	r3,r3,4096
10005f4c:	1800581e 	bne	r3,zero,100060b0 <_fflush_r+0x22c>
10005f50:	89400c17 	ldw	r5,48(r17)
10005f54:	9c000015 	stw	r16,0(r19)
10005f58:	28000526 	beq	r5,zero,10005f70 <_fflush_r+0xec>
10005f5c:	88801004 	addi	r2,r17,64
10005f60:	28800226 	beq	r5,r2,10005f6c <_fflush_r+0xe8>
10005f64:	9809883a 	mov	r4,r19
10005f68:	00065d80 	call	100065d8 <_free_r>
10005f6c:	88000c15 	stw	zero,48(r17)
10005f70:	0005883a 	mov	r2,zero
10005f74:	dfc00417 	ldw	ra,16(sp)
10005f78:	dcc00317 	ldw	r19,12(sp)
10005f7c:	dc800217 	ldw	r18,8(sp)
10005f80:	dc400117 	ldw	r17,4(sp)
10005f84:	dc000017 	ldw	r16,0(sp)
10005f88:	dec00504 	addi	sp,sp,20
10005f8c:	f800283a 	ret
10005f90:	8c800417 	ldw	r18,16(r17)
10005f94:	903ff626 	beq	r18,zero,10005f70 <__alt_data_end+0xf8005f70>
10005f98:	8c000017 	ldw	r16,0(r17)
10005f9c:	108000cc 	andi	r2,r2,3
10005fa0:	8c800015 	stw	r18,0(r17)
10005fa4:	84a1c83a 	sub	r16,r16,r18
10005fa8:	10001b26 	beq	r2,zero,10006018 <_fflush_r+0x194>
10005fac:	0005883a 	mov	r2,zero
10005fb0:	88800215 	stw	r2,8(r17)
10005fb4:	04000316 	blt	zero,r16,10005fc4 <_fflush_r+0x140>
10005fb8:	003fed06 	br	10005f70 <__alt_data_end+0xf8005f70>
10005fbc:	90a5883a 	add	r18,r18,r2
10005fc0:	043feb0e 	bge	zero,r16,10005f70 <__alt_data_end+0xf8005f70>
10005fc4:	88800917 	ldw	r2,36(r17)
10005fc8:	89400717 	ldw	r5,28(r17)
10005fcc:	800f883a 	mov	r7,r16
10005fd0:	900d883a 	mov	r6,r18
10005fd4:	9809883a 	mov	r4,r19
10005fd8:	103ee83a 	callr	r2
10005fdc:	80a1c83a 	sub	r16,r16,r2
10005fe0:	00bff616 	blt	zero,r2,10005fbc <__alt_data_end+0xf8005fbc>
10005fe4:	88c0030b 	ldhu	r3,12(r17)
10005fe8:	00bfffc4 	movi	r2,-1
10005fec:	18c01014 	ori	r3,r3,64
10005ff0:	88c0030d 	sth	r3,12(r17)
10005ff4:	dfc00417 	ldw	ra,16(sp)
10005ff8:	dcc00317 	ldw	r19,12(sp)
10005ffc:	dc800217 	ldw	r18,8(sp)
10006000:	dc400117 	ldw	r17,4(sp)
10006004:	dc000017 	ldw	r16,0(sp)
10006008:	dec00504 	addi	sp,sp,20
1000600c:	f800283a 	ret
10006010:	00061a40 	call	100061a4 <__sinit>
10006014:	003fa606 	br	10005eb0 <__alt_data_end+0xf8005eb0>
10006018:	88800517 	ldw	r2,20(r17)
1000601c:	003fe406 	br	10005fb0 <__alt_data_end+0xf8005fb0>
10006020:	89400717 	ldw	r5,28(r17)
10006024:	000d883a 	mov	r6,zero
10006028:	9809883a 	mov	r4,r19
1000602c:	01c00044 	movi	r7,1
10006030:	183ee83a 	callr	r3
10006034:	100d883a 	mov	r6,r2
10006038:	00bfffc4 	movi	r2,-1
1000603c:	30801326 	beq	r6,r2,1000608c <_fflush_r+0x208>
10006040:	8880030b 	ldhu	r2,12(r17)
10006044:	88c00a17 	ldw	r3,40(r17)
10006048:	003fab06 	br	10005ef8 <__alt_data_end+0xf8005ef8>
1000604c:	88c00f17 	ldw	r3,60(r17)
10006050:	00ffa216 	blt	zero,r3,10005edc <__alt_data_end+0xf8005edc>
10006054:	003fc606 	br	10005f70 <__alt_data_end+0xf8005f70>
10006058:	98c00017 	ldw	r3,0(r19)
1000605c:	183fb426 	beq	r3,zero,10005f30 <__alt_data_end+0xf8005f30>
10006060:	01000744 	movi	r4,29
10006064:	19000226 	beq	r3,r4,10006070 <_fflush_r+0x1ec>
10006068:	01000584 	movi	r4,22
1000606c:	1900121e 	bne	r3,r4,100060b8 <_fflush_r+0x234>
10006070:	88c0030b 	ldhu	r3,12(r17)
10006074:	88800417 	ldw	r2,16(r17)
10006078:	88000115 	stw	zero,4(r17)
1000607c:	18fdffcc 	andi	r3,r3,63487
10006080:	88c0030d 	sth	r3,12(r17)
10006084:	88800015 	stw	r2,0(r17)
10006088:	003fb106 	br	10005f50 <__alt_data_end+0xf8005f50>
1000608c:	98800017 	ldw	r2,0(r19)
10006090:	103feb26 	beq	r2,zero,10006040 <__alt_data_end+0xf8006040>
10006094:	00c00744 	movi	r3,29
10006098:	10c00226 	beq	r2,r3,100060a4 <_fflush_r+0x220>
1000609c:	00c00584 	movi	r3,22
100060a0:	10ffd01e 	bne	r2,r3,10005fe4 <__alt_data_end+0xf8005fe4>
100060a4:	9c000015 	stw	r16,0(r19)
100060a8:	0005883a 	mov	r2,zero
100060ac:	003fb106 	br	10005f74 <__alt_data_end+0xf8005f74>
100060b0:	88801415 	stw	r2,80(r17)
100060b4:	003fa606 	br	10005f50 <__alt_data_end+0xf8005f50>
100060b8:	88c0030b 	ldhu	r3,12(r17)
100060bc:	18c01014 	ori	r3,r3,64
100060c0:	88c0030d 	sth	r3,12(r17)
100060c4:	003fab06 	br	10005f74 <__alt_data_end+0xf8005f74>

100060c8 <fflush>:
100060c8:	200b883a 	mov	r5,r4
100060cc:	20000426 	beq	r4,zero,100060e0 <fflush+0x18>
100060d0:	00840074 	movhi	r2,4097
100060d4:	108de504 	addi	r2,r2,14228
100060d8:	11000017 	ldw	r4,0(r2)
100060dc:	0005e841 	jmpi	10005e84 <_fflush_r>
100060e0:	00840074 	movhi	r2,4097
100060e4:	108de404 	addi	r2,r2,14224
100060e8:	11000017 	ldw	r4,0(r2)
100060ec:	01440034 	movhi	r5,4096
100060f0:	2957a104 	addi	r5,r5,24196
100060f4:	0006dfc1 	jmpi	10006dfc <_fwalk_reent>

100060f8 <__fp_lock>:
100060f8:	0005883a 	mov	r2,zero
100060fc:	f800283a 	ret

10006100 <__fp_unlock>:
10006100:	0005883a 	mov	r2,zero
10006104:	f800283a 	ret

10006108 <_cleanup_r>:
10006108:	01440074 	movhi	r5,4097
1000610c:	296b7304 	addi	r5,r5,-21044
10006110:	0006d541 	jmpi	10006d54 <_fwalk>

10006114 <__sfmoreglue>:
10006114:	defffc04 	addi	sp,sp,-16
10006118:	dc800215 	stw	r18,8(sp)
1000611c:	2825883a 	mov	r18,r5
10006120:	dc000015 	stw	r16,0(sp)
10006124:	01401a04 	movi	r5,104
10006128:	2021883a 	mov	r16,r4
1000612c:	9009883a 	mov	r4,r18
10006130:	dfc00315 	stw	ra,12(sp)
10006134:	dc400115 	stw	r17,4(sp)
10006138:	000c2b80 	call	1000c2b8 <__mulsi3>
1000613c:	8009883a 	mov	r4,r16
10006140:	11400304 	addi	r5,r2,12
10006144:	1023883a 	mov	r17,r2
10006148:	000713c0 	call	1000713c <_malloc_r>
1000614c:	1021883a 	mov	r16,r2
10006150:	10000726 	beq	r2,zero,10006170 <__sfmoreglue+0x5c>
10006154:	11000304 	addi	r4,r2,12
10006158:	10000015 	stw	zero,0(r2)
1000615c:	14800115 	stw	r18,4(r2)
10006160:	11000215 	stw	r4,8(r2)
10006164:	000b883a 	mov	r5,zero
10006168:	880d883a 	mov	r6,r17
1000616c:	0007c300 	call	10007c30 <memset>
10006170:	8005883a 	mov	r2,r16
10006174:	dfc00317 	ldw	ra,12(sp)
10006178:	dc800217 	ldw	r18,8(sp)
1000617c:	dc400117 	ldw	r17,4(sp)
10006180:	dc000017 	ldw	r16,0(sp)
10006184:	dec00404 	addi	sp,sp,16
10006188:	f800283a 	ret

1000618c <_cleanup>:
1000618c:	00840074 	movhi	r2,4097
10006190:	108de404 	addi	r2,r2,14224
10006194:	11000017 	ldw	r4,0(r2)
10006198:	01440074 	movhi	r5,4097
1000619c:	296b7304 	addi	r5,r5,-21044
100061a0:	0006d541 	jmpi	10006d54 <_fwalk>

100061a4 <__sinit>:
100061a4:	20800e17 	ldw	r2,56(r4)
100061a8:	defff704 	addi	sp,sp,-36
100061ac:	dc800215 	stw	r18,8(sp)
100061b0:	dfc00815 	stw	ra,32(sp)
100061b4:	ddc00715 	stw	r23,28(sp)
100061b8:	dd800615 	stw	r22,24(sp)
100061bc:	dd400515 	stw	r21,20(sp)
100061c0:	dd000415 	stw	r20,16(sp)
100061c4:	dcc00315 	stw	r19,12(sp)
100061c8:	dc400115 	stw	r17,4(sp)
100061cc:	dc000015 	stw	r16,0(sp)
100061d0:	2025883a 	mov	r18,r4
100061d4:	10004f1e 	bne	r2,zero,10006314 <__sinit+0x170>
100061d8:	24000117 	ldw	r16,4(r4)
100061dc:	00c40034 	movhi	r3,4096
100061e0:	18d84204 	addi	r3,r3,24840
100061e4:	20c00f15 	stw	r3,60(r4)
100061e8:	2080bb04 	addi	r2,r4,748
100061ec:	00c000c4 	movi	r3,3
100061f0:	05c00044 	movi	r23,1
100061f4:	20c0b915 	stw	r3,740(r4)
100061f8:	2080ba15 	stw	r2,744(r4)
100061fc:	25c00e15 	stw	r23,56(r4)
10006200:	2000b815 	stw	zero,736(r4)
10006204:	00800104 	movi	r2,4
10006208:	81001704 	addi	r4,r16,92
1000620c:	000b883a 	mov	r5,zero
10006210:	01800204 	movi	r6,8
10006214:	80000015 	stw	zero,0(r16)
10006218:	80000115 	stw	zero,4(r16)
1000621c:	80000215 	stw	zero,8(r16)
10006220:	8080030d 	sth	r2,12(r16)
10006224:	80001915 	stw	zero,100(r16)
10006228:	8000038d 	sth	zero,14(r16)
1000622c:	80000415 	stw	zero,16(r16)
10006230:	80000515 	stw	zero,20(r16)
10006234:	80000615 	stw	zero,24(r16)
10006238:	0007c300 	call	10007c30 <memset>
1000623c:	94400217 	ldw	r17,8(r18)
10006240:	05840074 	movhi	r22,4097
10006244:	b5a4e704 	addi	r22,r22,-27748
10006248:	05440074 	movhi	r21,4097
1000624c:	ad64fe04 	addi	r21,r21,-27656
10006250:	05040074 	movhi	r20,4097
10006254:	a5251d04 	addi	r20,r20,-27532
10006258:	04c40074 	movhi	r19,4097
1000625c:	9ce53404 	addi	r19,r19,-27440
10006260:	84000715 	stw	r16,28(r16)
10006264:	85800815 	stw	r22,32(r16)
10006268:	85400915 	stw	r21,36(r16)
1000626c:	85000a15 	stw	r20,40(r16)
10006270:	84c00b15 	stw	r19,44(r16)
10006274:	00800284 	movi	r2,10
10006278:	89001704 	addi	r4,r17,92
1000627c:	000b883a 	mov	r5,zero
10006280:	01800204 	movi	r6,8
10006284:	88000015 	stw	zero,0(r17)
10006288:	88000115 	stw	zero,4(r17)
1000628c:	88000215 	stw	zero,8(r17)
10006290:	8880030d 	sth	r2,12(r17)
10006294:	88001915 	stw	zero,100(r17)
10006298:	8dc0038d 	sth	r23,14(r17)
1000629c:	88000415 	stw	zero,16(r17)
100062a0:	88000515 	stw	zero,20(r17)
100062a4:	88000615 	stw	zero,24(r17)
100062a8:	0007c300 	call	10007c30 <memset>
100062ac:	94000317 	ldw	r16,12(r18)
100062b0:	00800484 	movi	r2,18
100062b4:	8c400715 	stw	r17,28(r17)
100062b8:	8d800815 	stw	r22,32(r17)
100062bc:	8d400915 	stw	r21,36(r17)
100062c0:	8d000a15 	stw	r20,40(r17)
100062c4:	8cc00b15 	stw	r19,44(r17)
100062c8:	8080030d 	sth	r2,12(r16)
100062cc:	00800084 	movi	r2,2
100062d0:	80000015 	stw	zero,0(r16)
100062d4:	80000115 	stw	zero,4(r16)
100062d8:	80000215 	stw	zero,8(r16)
100062dc:	80001915 	stw	zero,100(r16)
100062e0:	8080038d 	sth	r2,14(r16)
100062e4:	80000415 	stw	zero,16(r16)
100062e8:	80000515 	stw	zero,20(r16)
100062ec:	80000615 	stw	zero,24(r16)
100062f0:	81001704 	addi	r4,r16,92
100062f4:	000b883a 	mov	r5,zero
100062f8:	01800204 	movi	r6,8
100062fc:	0007c300 	call	10007c30 <memset>
10006300:	84000715 	stw	r16,28(r16)
10006304:	85800815 	stw	r22,32(r16)
10006308:	85400915 	stw	r21,36(r16)
1000630c:	85000a15 	stw	r20,40(r16)
10006310:	84c00b15 	stw	r19,44(r16)
10006314:	dfc00817 	ldw	ra,32(sp)
10006318:	ddc00717 	ldw	r23,28(sp)
1000631c:	dd800617 	ldw	r22,24(sp)
10006320:	dd400517 	ldw	r21,20(sp)
10006324:	dd000417 	ldw	r20,16(sp)
10006328:	dcc00317 	ldw	r19,12(sp)
1000632c:	dc800217 	ldw	r18,8(sp)
10006330:	dc400117 	ldw	r17,4(sp)
10006334:	dc000017 	ldw	r16,0(sp)
10006338:	dec00904 	addi	sp,sp,36
1000633c:	f800283a 	ret

10006340 <__sfp>:
10006340:	defffb04 	addi	sp,sp,-20
10006344:	00840074 	movhi	r2,4097
10006348:	108de404 	addi	r2,r2,14224
1000634c:	dc800215 	stw	r18,8(sp)
10006350:	14800017 	ldw	r18,0(r2)
10006354:	dcc00315 	stw	r19,12(sp)
10006358:	dfc00415 	stw	ra,16(sp)
1000635c:	90800e17 	ldw	r2,56(r18)
10006360:	dc400115 	stw	r17,4(sp)
10006364:	dc000015 	stw	r16,0(sp)
10006368:	2027883a 	mov	r19,r4
1000636c:	10002f26 	beq	r2,zero,1000642c <__sfp+0xec>
10006370:	9480b804 	addi	r18,r18,736
10006374:	047fffc4 	movi	r17,-1
10006378:	91400117 	ldw	r5,4(r18)
1000637c:	94000217 	ldw	r16,8(r18)
10006380:	297fffc4 	addi	r5,r5,-1
10006384:	28000a16 	blt	r5,zero,100063b0 <__sfp+0x70>
10006388:	8080030f 	ldh	r2,12(r16)
1000638c:	10000c26 	beq	r2,zero,100063c0 <__sfp+0x80>
10006390:	80c01d04 	addi	r3,r16,116
10006394:	00000206 	br	100063a0 <__sfp+0x60>
10006398:	18bfe60f 	ldh	r2,-104(r3)
1000639c:	10000826 	beq	r2,zero,100063c0 <__sfp+0x80>
100063a0:	297fffc4 	addi	r5,r5,-1
100063a4:	1c3ffd04 	addi	r16,r3,-12
100063a8:	18c01a04 	addi	r3,r3,104
100063ac:	2c7ffa1e 	bne	r5,r17,10006398 <__alt_data_end+0xf8006398>
100063b0:	90800017 	ldw	r2,0(r18)
100063b4:	10002026 	beq	r2,zero,10006438 <__sfp+0xf8>
100063b8:	1025883a 	mov	r18,r2
100063bc:	003fee06 	br	10006378 <__alt_data_end+0xf8006378>
100063c0:	00bfffc4 	movi	r2,-1
100063c4:	8080038d 	sth	r2,14(r16)
100063c8:	00800044 	movi	r2,1
100063cc:	8080030d 	sth	r2,12(r16)
100063d0:	80001915 	stw	zero,100(r16)
100063d4:	80000015 	stw	zero,0(r16)
100063d8:	80000215 	stw	zero,8(r16)
100063dc:	80000115 	stw	zero,4(r16)
100063e0:	80000415 	stw	zero,16(r16)
100063e4:	80000515 	stw	zero,20(r16)
100063e8:	80000615 	stw	zero,24(r16)
100063ec:	81001704 	addi	r4,r16,92
100063f0:	000b883a 	mov	r5,zero
100063f4:	01800204 	movi	r6,8
100063f8:	0007c300 	call	10007c30 <memset>
100063fc:	8005883a 	mov	r2,r16
10006400:	80000c15 	stw	zero,48(r16)
10006404:	80000d15 	stw	zero,52(r16)
10006408:	80001115 	stw	zero,68(r16)
1000640c:	80001215 	stw	zero,72(r16)
10006410:	dfc00417 	ldw	ra,16(sp)
10006414:	dcc00317 	ldw	r19,12(sp)
10006418:	dc800217 	ldw	r18,8(sp)
1000641c:	dc400117 	ldw	r17,4(sp)
10006420:	dc000017 	ldw	r16,0(sp)
10006424:	dec00504 	addi	sp,sp,20
10006428:	f800283a 	ret
1000642c:	9009883a 	mov	r4,r18
10006430:	00061a40 	call	100061a4 <__sinit>
10006434:	003fce06 	br	10006370 <__alt_data_end+0xf8006370>
10006438:	9809883a 	mov	r4,r19
1000643c:	01400104 	movi	r5,4
10006440:	00061140 	call	10006114 <__sfmoreglue>
10006444:	90800015 	stw	r2,0(r18)
10006448:	103fdb1e 	bne	r2,zero,100063b8 <__alt_data_end+0xf80063b8>
1000644c:	00800304 	movi	r2,12
10006450:	98800015 	stw	r2,0(r19)
10006454:	0005883a 	mov	r2,zero
10006458:	003fed06 	br	10006410 <__alt_data_end+0xf8006410>

1000645c <__sfp_lock_acquire>:
1000645c:	f800283a 	ret

10006460 <__sfp_lock_release>:
10006460:	f800283a 	ret

10006464 <__sinit_lock_acquire>:
10006464:	f800283a 	ret

10006468 <__sinit_lock_release>:
10006468:	f800283a 	ret

1000646c <__fp_lock_all>:
1000646c:	00840074 	movhi	r2,4097
10006470:	108de504 	addi	r2,r2,14228
10006474:	11000017 	ldw	r4,0(r2)
10006478:	01440034 	movhi	r5,4096
1000647c:	29583e04 	addi	r5,r5,24824
10006480:	0006d541 	jmpi	10006d54 <_fwalk>

10006484 <__fp_unlock_all>:
10006484:	00840074 	movhi	r2,4097
10006488:	108de504 	addi	r2,r2,14228
1000648c:	11000017 	ldw	r4,0(r2)
10006490:	01440034 	movhi	r5,4096
10006494:	29584004 	addi	r5,r5,24832
10006498:	0006d541 	jmpi	10006d54 <_fwalk>

1000649c <_malloc_trim_r>:
1000649c:	defffb04 	addi	sp,sp,-20
100064a0:	dcc00315 	stw	r19,12(sp)
100064a4:	dc800215 	stw	r18,8(sp)
100064a8:	dc400115 	stw	r17,4(sp)
100064ac:	dc000015 	stw	r16,0(sp)
100064b0:	2827883a 	mov	r19,r5
100064b4:	dfc00415 	stw	ra,16(sp)
100064b8:	04440074 	movhi	r17,4097
100064bc:	8c486004 	addi	r17,r17,8576
100064c0:	2021883a 	mov	r16,r4
100064c4:	000f0300 	call	1000f030 <__malloc_lock>
100064c8:	88800217 	ldw	r2,8(r17)
100064cc:	14800117 	ldw	r18,4(r2)
100064d0:	00bfff04 	movi	r2,-4
100064d4:	90a4703a 	and	r18,r18,r2
100064d8:	94e7c83a 	sub	r19,r18,r19
100064dc:	9cc3fbc4 	addi	r19,r19,4079
100064e0:	9826d33a 	srli	r19,r19,12
100064e4:	0083ffc4 	movi	r2,4095
100064e8:	9cffffc4 	addi	r19,r19,-1
100064ec:	9826933a 	slli	r19,r19,12
100064f0:	14c0060e 	bge	r2,r19,1000650c <_malloc_trim_r+0x70>
100064f4:	8009883a 	mov	r4,r16
100064f8:	000b883a 	mov	r5,zero
100064fc:	00093380 	call	10009338 <_sbrk_r>
10006500:	88c00217 	ldw	r3,8(r17)
10006504:	1c87883a 	add	r3,r3,r18
10006508:	10c00a26 	beq	r2,r3,10006534 <_malloc_trim_r+0x98>
1000650c:	8009883a 	mov	r4,r16
10006510:	000f0500 	call	1000f050 <__malloc_unlock>
10006514:	0005883a 	mov	r2,zero
10006518:	dfc00417 	ldw	ra,16(sp)
1000651c:	dcc00317 	ldw	r19,12(sp)
10006520:	dc800217 	ldw	r18,8(sp)
10006524:	dc400117 	ldw	r17,4(sp)
10006528:	dc000017 	ldw	r16,0(sp)
1000652c:	dec00504 	addi	sp,sp,20
10006530:	f800283a 	ret
10006534:	8009883a 	mov	r4,r16
10006538:	04cbc83a 	sub	r5,zero,r19
1000653c:	00093380 	call	10009338 <_sbrk_r>
10006540:	00ffffc4 	movi	r3,-1
10006544:	10c01326 	beq	r2,r3,10006594 <_malloc_trim_r+0xf8>
10006548:	00840074 	movhi	r2,4097
1000654c:	1094bd04 	addi	r2,r2,21236
10006550:	11000017 	ldw	r4,0(r2)
10006554:	88c00217 	ldw	r3,8(r17)
10006558:	94e5c83a 	sub	r18,r18,r19
1000655c:	94800054 	ori	r18,r18,1
10006560:	24e7c83a 	sub	r19,r4,r19
10006564:	1c800115 	stw	r18,4(r3)
10006568:	8009883a 	mov	r4,r16
1000656c:	14c00015 	stw	r19,0(r2)
10006570:	000f0500 	call	1000f050 <__malloc_unlock>
10006574:	00800044 	movi	r2,1
10006578:	dfc00417 	ldw	ra,16(sp)
1000657c:	dcc00317 	ldw	r19,12(sp)
10006580:	dc800217 	ldw	r18,8(sp)
10006584:	dc400117 	ldw	r17,4(sp)
10006588:	dc000017 	ldw	r16,0(sp)
1000658c:	dec00504 	addi	sp,sp,20
10006590:	f800283a 	ret
10006594:	8009883a 	mov	r4,r16
10006598:	000b883a 	mov	r5,zero
1000659c:	00093380 	call	10009338 <_sbrk_r>
100065a0:	88c00217 	ldw	r3,8(r17)
100065a4:	014003c4 	movi	r5,15
100065a8:	10c9c83a 	sub	r4,r2,r3
100065ac:	293fd70e 	bge	r5,r4,1000650c <__alt_data_end+0xf800650c>
100065b0:	01440074 	movhi	r5,4097
100065b4:	294de704 	addi	r5,r5,14236
100065b8:	29400017 	ldw	r5,0(r5)
100065bc:	21000054 	ori	r4,r4,1
100065c0:	19000115 	stw	r4,4(r3)
100065c4:	1145c83a 	sub	r2,r2,r5
100065c8:	01440074 	movhi	r5,4097
100065cc:	2954bd04 	addi	r5,r5,21236
100065d0:	28800015 	stw	r2,0(r5)
100065d4:	003fcd06 	br	1000650c <__alt_data_end+0xf800650c>

100065d8 <_free_r>:
100065d8:	defffd04 	addi	sp,sp,-12
100065dc:	dc000015 	stw	r16,0(sp)
100065e0:	dfc00215 	stw	ra,8(sp)
100065e4:	dc400115 	stw	r17,4(sp)
100065e8:	2821883a 	mov	r16,r5
100065ec:	28004c26 	beq	r5,zero,10006720 <_free_r+0x148>
100065f0:	2023883a 	mov	r17,r4
100065f4:	000f0300 	call	1000f030 <__malloc_lock>
100065f8:	823fff17 	ldw	r8,-4(r16)
100065fc:	00bfff84 	movi	r2,-2
10006600:	81bffe04 	addi	r6,r16,-8
10006604:	4084703a 	and	r2,r8,r2
10006608:	3087883a 	add	r3,r6,r2
1000660c:	01440074 	movhi	r5,4097
10006610:	29486004 	addi	r5,r5,8576
10006614:	1a400117 	ldw	r9,4(r3)
10006618:	29000217 	ldw	r4,8(r5)
1000661c:	01ffff04 	movi	r7,-4
10006620:	49ce703a 	and	r7,r9,r7
10006624:	20c06526 	beq	r4,r3,100067bc <_free_r+0x1e4>
10006628:	19c00115 	stw	r7,4(r3)
1000662c:	4200004c 	andi	r8,r8,1
10006630:	40003026 	beq	r8,zero,100066f4 <_free_r+0x11c>
10006634:	0009883a 	mov	r4,zero
10006638:	19d1883a 	add	r8,r3,r7
1000663c:	42000117 	ldw	r8,4(r8)
10006640:	4200004c 	andi	r8,r8,1
10006644:	4000061e 	bne	r8,zero,10006660 <_free_r+0x88>
10006648:	11c5883a 	add	r2,r2,r7
1000664c:	19c00217 	ldw	r7,8(r3)
10006650:	20004e26 	beq	r4,zero,1000678c <_free_r+0x1b4>
10006654:	18c00317 	ldw	r3,12(r3)
10006658:	38c00315 	stw	r3,12(r7)
1000665c:	19c00215 	stw	r7,8(r3)
10006660:	10c00054 	ori	r3,r2,1
10006664:	30c00115 	stw	r3,4(r6)
10006668:	3087883a 	add	r3,r6,r2
1000666c:	18800015 	stw	r2,0(r3)
10006670:	20001a1e 	bne	r4,zero,100066dc <_free_r+0x104>
10006674:	00c07fc4 	movi	r3,511
10006678:	18802e2e 	bgeu	r3,r2,10006734 <_free_r+0x15c>
1000667c:	1006d27a 	srli	r3,r2,9
10006680:	01000104 	movi	r4,4
10006684:	20c06636 	bltu	r4,r3,10006820 <_free_r+0x248>
10006688:	1008d1ba 	srli	r4,r2,6
1000668c:	21000e04 	addi	r4,r4,56
10006690:	210f883a 	add	r7,r4,r4
10006694:	39cf883a 	add	r7,r7,r7
10006698:	39cf883a 	add	r7,r7,r7
1000669c:	29cf883a 	add	r7,r5,r7
100066a0:	38c00217 	ldw	r3,8(r7)
100066a4:	01440074 	movhi	r5,4097
100066a8:	29486004 	addi	r5,r5,8576
100066ac:	19c06126 	beq	r3,r7,10006834 <_free_r+0x25c>
100066b0:	013fff04 	movi	r4,-4
100066b4:	19400117 	ldw	r5,4(r3)
100066b8:	290a703a 	and	r5,r5,r4
100066bc:	1140022e 	bgeu	r2,r5,100066c8 <_free_r+0xf0>
100066c0:	18c00217 	ldw	r3,8(r3)
100066c4:	38fffb1e 	bne	r7,r3,100066b4 <__alt_data_end+0xf80066b4>
100066c8:	18800317 	ldw	r2,12(r3)
100066cc:	30800315 	stw	r2,12(r6)
100066d0:	30c00215 	stw	r3,8(r6)
100066d4:	11800215 	stw	r6,8(r2)
100066d8:	19800315 	stw	r6,12(r3)
100066dc:	8809883a 	mov	r4,r17
100066e0:	dfc00217 	ldw	ra,8(sp)
100066e4:	dc400117 	ldw	r17,4(sp)
100066e8:	dc000017 	ldw	r16,0(sp)
100066ec:	dec00304 	addi	sp,sp,12
100066f0:	000f0501 	jmpi	1000f050 <__malloc_unlock>
100066f4:	813ffe17 	ldw	r4,-8(r16)
100066f8:	2a400204 	addi	r9,r5,8
100066fc:	310dc83a 	sub	r6,r6,r4
10006700:	32000217 	ldw	r8,8(r6)
10006704:	1105883a 	add	r2,r2,r4
10006708:	42404326 	beq	r8,r9,10006818 <_free_r+0x240>
1000670c:	32400317 	ldw	r9,12(r6)
10006710:	0009883a 	mov	r4,zero
10006714:	42400315 	stw	r9,12(r8)
10006718:	4a000215 	stw	r8,8(r9)
1000671c:	003fc606 	br	10006638 <__alt_data_end+0xf8006638>
10006720:	dfc00217 	ldw	ra,8(sp)
10006724:	dc400117 	ldw	r17,4(sp)
10006728:	dc000017 	ldw	r16,0(sp)
1000672c:	dec00304 	addi	sp,sp,12
10006730:	f800283a 	ret
10006734:	1004d0fa 	srli	r2,r2,3
10006738:	02000044 	movi	r8,1
1000673c:	29c00117 	ldw	r7,4(r5)
10006740:	1087883a 	add	r3,r2,r2
10006744:	18c7883a 	add	r3,r3,r3
10006748:	18c7883a 	add	r3,r3,r3
1000674c:	28c7883a 	add	r3,r5,r3
10006750:	1005d0ba 	srai	r2,r2,2
10006754:	19000217 	ldw	r4,8(r3)
10006758:	30c00315 	stw	r3,12(r6)
1000675c:	4084983a 	sll	r2,r8,r2
10006760:	31000215 	stw	r4,8(r6)
10006764:	19800215 	stw	r6,8(r3)
10006768:	11c4b03a 	or	r2,r2,r7
1000676c:	21800315 	stw	r6,12(r4)
10006770:	8809883a 	mov	r4,r17
10006774:	28800115 	stw	r2,4(r5)
10006778:	dfc00217 	ldw	ra,8(sp)
1000677c:	dc400117 	ldw	r17,4(sp)
10006780:	dc000017 	ldw	r16,0(sp)
10006784:	dec00304 	addi	sp,sp,12
10006788:	000f0501 	jmpi	1000f050 <__malloc_unlock>
1000678c:	02040074 	movhi	r8,4097
10006790:	42086204 	addi	r8,r8,8584
10006794:	3a3faf1e 	bne	r7,r8,10006654 <__alt_data_end+0xf8006654>
10006798:	29800515 	stw	r6,20(r5)
1000679c:	29800415 	stw	r6,16(r5)
100067a0:	10c00054 	ori	r3,r2,1
100067a4:	31c00315 	stw	r7,12(r6)
100067a8:	31c00215 	stw	r7,8(r6)
100067ac:	30c00115 	stw	r3,4(r6)
100067b0:	308d883a 	add	r6,r6,r2
100067b4:	30800015 	stw	r2,0(r6)
100067b8:	003fc806 	br	100066dc <__alt_data_end+0xf80066dc>
100067bc:	4200004c 	andi	r8,r8,1
100067c0:	3885883a 	add	r2,r7,r2
100067c4:	4000071e 	bne	r8,zero,100067e4 <_free_r+0x20c>
100067c8:	81fffe17 	ldw	r7,-8(r16)
100067cc:	31cdc83a 	sub	r6,r6,r7
100067d0:	30c00317 	ldw	r3,12(r6)
100067d4:	31000217 	ldw	r4,8(r6)
100067d8:	11c5883a 	add	r2,r2,r7
100067dc:	20c00315 	stw	r3,12(r4)
100067e0:	19000215 	stw	r4,8(r3)
100067e4:	00c40074 	movhi	r3,4097
100067e8:	18cde804 	addi	r3,r3,14240
100067ec:	11000054 	ori	r4,r2,1
100067f0:	18c00017 	ldw	r3,0(r3)
100067f4:	31000115 	stw	r4,4(r6)
100067f8:	29800215 	stw	r6,8(r5)
100067fc:	10ffb736 	bltu	r2,r3,100066dc <__alt_data_end+0xf80066dc>
10006800:	00840074 	movhi	r2,4097
10006804:	1094b504 	addi	r2,r2,21204
10006808:	11400017 	ldw	r5,0(r2)
1000680c:	8809883a 	mov	r4,r17
10006810:	000649c0 	call	1000649c <_malloc_trim_r>
10006814:	003fb106 	br	100066dc <__alt_data_end+0xf80066dc>
10006818:	01000044 	movi	r4,1
1000681c:	003f8606 	br	10006638 <__alt_data_end+0xf8006638>
10006820:	01000504 	movi	r4,20
10006824:	20c00b36 	bltu	r4,r3,10006854 <_free_r+0x27c>
10006828:	190016c4 	addi	r4,r3,91
1000682c:	210f883a 	add	r7,r4,r4
10006830:	003f9806 	br	10006694 <__alt_data_end+0xf8006694>
10006834:	2009d0ba 	srai	r4,r4,2
10006838:	00800044 	movi	r2,1
1000683c:	29c00117 	ldw	r7,4(r5)
10006840:	1108983a 	sll	r4,r2,r4
10006844:	1805883a 	mov	r2,r3
10006848:	21c8b03a 	or	r4,r4,r7
1000684c:	29000115 	stw	r4,4(r5)
10006850:	003f9e06 	br	100066cc <__alt_data_end+0xf80066cc>
10006854:	01001504 	movi	r4,84
10006858:	20c00436 	bltu	r4,r3,1000686c <_free_r+0x294>
1000685c:	1008d33a 	srli	r4,r2,12
10006860:	21001b84 	addi	r4,r4,110
10006864:	210f883a 	add	r7,r4,r4
10006868:	003f8a06 	br	10006694 <__alt_data_end+0xf8006694>
1000686c:	01005504 	movi	r4,340
10006870:	20c00436 	bltu	r4,r3,10006884 <_free_r+0x2ac>
10006874:	1008d3fa 	srli	r4,r2,15
10006878:	21001dc4 	addi	r4,r4,119
1000687c:	210f883a 	add	r7,r4,r4
10006880:	003f8406 	br	10006694 <__alt_data_end+0xf8006694>
10006884:	01015504 	movi	r4,1364
10006888:	20c00436 	bltu	r4,r3,1000689c <_free_r+0x2c4>
1000688c:	1008d4ba 	srli	r4,r2,18
10006890:	21001f04 	addi	r4,r4,124
10006894:	210f883a 	add	r7,r4,r4
10006898:	003f7e06 	br	10006694 <__alt_data_end+0xf8006694>
1000689c:	01c03f04 	movi	r7,252
100068a0:	01001f84 	movi	r4,126
100068a4:	003f7b06 	br	10006694 <__alt_data_end+0xf8006694>

100068a8 <__sfvwrite_r>:
100068a8:	30800217 	ldw	r2,8(r6)
100068ac:	defff404 	addi	sp,sp,-48
100068b0:	dcc00515 	stw	r19,20(sp)
100068b4:	dfc00b15 	stw	ra,44(sp)
100068b8:	df000a15 	stw	fp,40(sp)
100068bc:	ddc00915 	stw	r23,36(sp)
100068c0:	dd800815 	stw	r22,32(sp)
100068c4:	dd400715 	stw	r21,28(sp)
100068c8:	dd000615 	stw	r20,24(sp)
100068cc:	dc800415 	stw	r18,16(sp)
100068d0:	dc400315 	stw	r17,12(sp)
100068d4:	dc000215 	stw	r16,8(sp)
100068d8:	3027883a 	mov	r19,r6
100068dc:	10001d26 	beq	r2,zero,10006954 <__sfvwrite_r+0xac>
100068e0:	2880030b 	ldhu	r2,12(r5)
100068e4:	202b883a 	mov	r21,r4
100068e8:	2821883a 	mov	r16,r5
100068ec:	10c0020c 	andi	r3,r2,8
100068f0:	18002526 	beq	r3,zero,10006988 <__sfvwrite_r+0xe0>
100068f4:	28c00417 	ldw	r3,16(r5)
100068f8:	18002326 	beq	r3,zero,10006988 <__sfvwrite_r+0xe0>
100068fc:	10c0008c 	andi	r3,r2,2
10006900:	9c400017 	ldw	r17,0(r19)
10006904:	18002826 	beq	r3,zero,100069a8 <__sfvwrite_r+0x100>
10006908:	0029883a 	mov	r20,zero
1000690c:	0025883a 	mov	r18,zero
10006910:	05810004 	movi	r22,1024
10006914:	a00d883a 	mov	r6,r20
10006918:	a809883a 	mov	r4,r21
1000691c:	90004726 	beq	r18,zero,10006a3c <__sfvwrite_r+0x194>
10006920:	900f883a 	mov	r7,r18
10006924:	81400717 	ldw	r5,28(r16)
10006928:	b480012e 	bgeu	r22,r18,10006930 <__sfvwrite_r+0x88>
1000692c:	01c10004 	movi	r7,1024
10006930:	80800917 	ldw	r2,36(r16)
10006934:	103ee83a 	callr	r2
10006938:	00804c0e 	bge	zero,r2,10006a6c <__sfvwrite_r+0x1c4>
1000693c:	98c00217 	ldw	r3,8(r19)
10006940:	a0a9883a 	add	r20,r20,r2
10006944:	90a5c83a 	sub	r18,r18,r2
10006948:	1885c83a 	sub	r2,r3,r2
1000694c:	98800215 	stw	r2,8(r19)
10006950:	103ff01e 	bne	r2,zero,10006914 <__alt_data_end+0xf8006914>
10006954:	0005883a 	mov	r2,zero
10006958:	dfc00b17 	ldw	ra,44(sp)
1000695c:	df000a17 	ldw	fp,40(sp)
10006960:	ddc00917 	ldw	r23,36(sp)
10006964:	dd800817 	ldw	r22,32(sp)
10006968:	dd400717 	ldw	r21,28(sp)
1000696c:	dd000617 	ldw	r20,24(sp)
10006970:	dcc00517 	ldw	r19,20(sp)
10006974:	dc800417 	ldw	r18,16(sp)
10006978:	dc400317 	ldw	r17,12(sp)
1000697c:	dc000217 	ldw	r16,8(sp)
10006980:	dec00c04 	addi	sp,sp,48
10006984:	f800283a 	ret
10006988:	a809883a 	mov	r4,r21
1000698c:	800b883a 	mov	r5,r16
10006990:	00044e80 	call	100044e8 <__swsetup_r>
10006994:	1000e81e 	bne	r2,zero,10006d38 <__sfvwrite_r+0x490>
10006998:	8080030b 	ldhu	r2,12(r16)
1000699c:	9c400017 	ldw	r17,0(r19)
100069a0:	10c0008c 	andi	r3,r2,2
100069a4:	183fd81e 	bne	r3,zero,10006908 <__alt_data_end+0xf8006908>
100069a8:	10c0004c 	andi	r3,r2,1
100069ac:	002d883a 	mov	r22,zero
100069b0:	1800331e 	bne	r3,zero,10006a80 <__sfvwrite_r+0x1d8>
100069b4:	0025883a 	mov	r18,zero
100069b8:	90001c26 	beq	r18,zero,10006a2c <__sfvwrite_r+0x184>
100069bc:	10c0800c 	andi	r3,r2,512
100069c0:	85000217 	ldw	r20,8(r16)
100069c4:	18006f26 	beq	r3,zero,10006b84 <__sfvwrite_r+0x2dc>
100069c8:	95008936 	bltu	r18,r20,10006bf0 <__sfvwrite_r+0x348>
100069cc:	10c1200c 	andi	r3,r2,1152
100069d0:	1800a11e 	bne	r3,zero,10006c58 <__sfvwrite_r+0x3b0>
100069d4:	81000017 	ldw	r4,0(r16)
100069d8:	a02f883a 	mov	r23,r20
100069dc:	a039883a 	mov	fp,r20
100069e0:	9029883a 	mov	r20,r18
100069e4:	b00b883a 	mov	r5,r22
100069e8:	b80d883a 	mov	r6,r23
100069ec:	0007af40 	call	10007af4 <memmove>
100069f0:	81400217 	ldw	r5,8(r16)
100069f4:	81000017 	ldw	r4,0(r16)
100069f8:	9005883a 	mov	r2,r18
100069fc:	2f39c83a 	sub	fp,r5,fp
10006a00:	25c7883a 	add	r3,r4,r23
10006a04:	87000215 	stw	fp,8(r16)
10006a08:	80c00015 	stw	r3,0(r16)
10006a0c:	98c00217 	ldw	r3,8(r19)
10006a10:	b0ad883a 	add	r22,r22,r2
10006a14:	90a5c83a 	sub	r18,r18,r2
10006a18:	1d29c83a 	sub	r20,r3,r20
10006a1c:	9d000215 	stw	r20,8(r19)
10006a20:	a03fcc26 	beq	r20,zero,10006954 <__alt_data_end+0xf8006954>
10006a24:	8080030b 	ldhu	r2,12(r16)
10006a28:	903fe41e 	bne	r18,zero,100069bc <__alt_data_end+0xf80069bc>
10006a2c:	8d800017 	ldw	r22,0(r17)
10006a30:	8c800117 	ldw	r18,4(r17)
10006a34:	8c400204 	addi	r17,r17,8
10006a38:	003fdf06 	br	100069b8 <__alt_data_end+0xf80069b8>
10006a3c:	8d000017 	ldw	r20,0(r17)
10006a40:	8c800117 	ldw	r18,4(r17)
10006a44:	8c400204 	addi	r17,r17,8
10006a48:	003fb206 	br	10006914 <__alt_data_end+0xf8006914>
10006a4c:	0008d6c0 	call	10008d6c <_realloc_r>
10006a50:	1039883a 	mov	fp,r2
10006a54:	10009d1e 	bne	r2,zero,10006ccc <__sfvwrite_r+0x424>
10006a58:	81400417 	ldw	r5,16(r16)
10006a5c:	a809883a 	mov	r4,r21
10006a60:	00065d80 	call	100065d8 <_free_r>
10006a64:	00800304 	movi	r2,12
10006a68:	a8800015 	stw	r2,0(r21)
10006a6c:	80c0030b 	ldhu	r3,12(r16)
10006a70:	00bfffc4 	movi	r2,-1
10006a74:	18c01014 	ori	r3,r3,64
10006a78:	80c0030d 	sth	r3,12(r16)
10006a7c:	003fb606 	br	10006958 <__alt_data_end+0xf8006958>
10006a80:	0007883a 	mov	r3,zero
10006a84:	0039883a 	mov	fp,zero
10006a88:	0025883a 	mov	r18,zero
10006a8c:	90001f26 	beq	r18,zero,10006b0c <__sfvwrite_r+0x264>
10006a90:	18006826 	beq	r3,zero,10006c34 <__sfvwrite_r+0x38c>
10006a94:	b02f883a 	mov	r23,r22
10006a98:	9580012e 	bgeu	r18,r22,10006aa0 <__sfvwrite_r+0x1f8>
10006a9c:	902f883a 	mov	r23,r18
10006aa0:	81000017 	ldw	r4,0(r16)
10006aa4:	80800417 	ldw	r2,16(r16)
10006aa8:	b829883a 	mov	r20,r23
10006aac:	81800217 	ldw	r6,8(r16)
10006ab0:	81c00517 	ldw	r7,20(r16)
10006ab4:	1100022e 	bgeu	r2,r4,10006ac0 <__sfvwrite_r+0x218>
10006ab8:	31d1883a 	add	r8,r6,r7
10006abc:	45c01816 	blt	r8,r23,10006b20 <__sfvwrite_r+0x278>
10006ac0:	b9c03f16 	blt	r23,r7,10006bc0 <__sfvwrite_r+0x318>
10006ac4:	80800917 	ldw	r2,36(r16)
10006ac8:	81400717 	ldw	r5,28(r16)
10006acc:	a809883a 	mov	r4,r21
10006ad0:	d8c00115 	stw	r3,4(sp)
10006ad4:	e00d883a 	mov	r6,fp
10006ad8:	103ee83a 	callr	r2
10006adc:	1029883a 	mov	r20,r2
10006ae0:	d8c00117 	ldw	r3,4(sp)
10006ae4:	00bfe10e 	bge	zero,r2,10006a6c <__alt_data_end+0xf8006a6c>
10006ae8:	b52dc83a 	sub	r22,r22,r20
10006aec:	b0001f26 	beq	r22,zero,10006b6c <__sfvwrite_r+0x2c4>
10006af0:	98800217 	ldw	r2,8(r19)
10006af4:	e539883a 	add	fp,fp,r20
10006af8:	9525c83a 	sub	r18,r18,r20
10006afc:	1529c83a 	sub	r20,r2,r20
10006b00:	9d000215 	stw	r20,8(r19)
10006b04:	a03f9326 	beq	r20,zero,10006954 <__alt_data_end+0xf8006954>
10006b08:	903fe11e 	bne	r18,zero,10006a90 <__alt_data_end+0xf8006a90>
10006b0c:	8f000017 	ldw	fp,0(r17)
10006b10:	8c800117 	ldw	r18,4(r17)
10006b14:	0007883a 	mov	r3,zero
10006b18:	8c400204 	addi	r17,r17,8
10006b1c:	003fdb06 	br	10006a8c <__alt_data_end+0xf8006a8c>
10006b20:	400d883a 	mov	r6,r8
10006b24:	e00b883a 	mov	r5,fp
10006b28:	d8c00115 	stw	r3,4(sp)
10006b2c:	da000015 	stw	r8,0(sp)
10006b30:	0007af40 	call	10007af4 <memmove>
10006b34:	da000017 	ldw	r8,0(sp)
10006b38:	80800017 	ldw	r2,0(r16)
10006b3c:	a809883a 	mov	r4,r21
10006b40:	800b883a 	mov	r5,r16
10006b44:	1205883a 	add	r2,r2,r8
10006b48:	80800015 	stw	r2,0(r16)
10006b4c:	da000015 	stw	r8,0(sp)
10006b50:	0005e840 	call	10005e84 <_fflush_r>
10006b54:	d8c00117 	ldw	r3,4(sp)
10006b58:	da000017 	ldw	r8,0(sp)
10006b5c:	103fc31e 	bne	r2,zero,10006a6c <__alt_data_end+0xf8006a6c>
10006b60:	4029883a 	mov	r20,r8
10006b64:	b52dc83a 	sub	r22,r22,r20
10006b68:	b03fe11e 	bne	r22,zero,10006af0 <__alt_data_end+0xf8006af0>
10006b6c:	a809883a 	mov	r4,r21
10006b70:	800b883a 	mov	r5,r16
10006b74:	0005e840 	call	10005e84 <_fflush_r>
10006b78:	103fbc1e 	bne	r2,zero,10006a6c <__alt_data_end+0xf8006a6c>
10006b7c:	0007883a 	mov	r3,zero
10006b80:	003fdb06 	br	10006af0 <__alt_data_end+0xf8006af0>
10006b84:	81000017 	ldw	r4,0(r16)
10006b88:	80800417 	ldw	r2,16(r16)
10006b8c:	1100012e 	bgeu	r2,r4,10006b94 <__sfvwrite_r+0x2ec>
10006b90:	a4805836 	bltu	r20,r18,10006cf4 <__sfvwrite_r+0x44c>
10006b94:	81c00517 	ldw	r7,20(r16)
10006b98:	91c01a36 	bltu	r18,r7,10006c04 <__sfvwrite_r+0x35c>
10006b9c:	80800917 	ldw	r2,36(r16)
10006ba0:	81400717 	ldw	r5,28(r16)
10006ba4:	a809883a 	mov	r4,r21
10006ba8:	b00d883a 	mov	r6,r22
10006bac:	103ee83a 	callr	r2
10006bb0:	1029883a 	mov	r20,r2
10006bb4:	00bfad0e 	bge	zero,r2,10006a6c <__alt_data_end+0xf8006a6c>
10006bb8:	a005883a 	mov	r2,r20
10006bbc:	003f9306 	br	10006a0c <__alt_data_end+0xf8006a0c>
10006bc0:	b80d883a 	mov	r6,r23
10006bc4:	e00b883a 	mov	r5,fp
10006bc8:	d8c00115 	stw	r3,4(sp)
10006bcc:	0007af40 	call	10007af4 <memmove>
10006bd0:	80800217 	ldw	r2,8(r16)
10006bd4:	81000017 	ldw	r4,0(r16)
10006bd8:	d8c00117 	ldw	r3,4(sp)
10006bdc:	15c5c83a 	sub	r2,r2,r23
10006be0:	25ef883a 	add	r23,r4,r23
10006be4:	80800215 	stw	r2,8(r16)
10006be8:	85c00015 	stw	r23,0(r16)
10006bec:	003fbe06 	br	10006ae8 <__alt_data_end+0xf8006ae8>
10006bf0:	81000017 	ldw	r4,0(r16)
10006bf4:	9039883a 	mov	fp,r18
10006bf8:	9029883a 	mov	r20,r18
10006bfc:	902f883a 	mov	r23,r18
10006c00:	003f7806 	br	100069e4 <__alt_data_end+0xf80069e4>
10006c04:	b00b883a 	mov	r5,r22
10006c08:	900d883a 	mov	r6,r18
10006c0c:	0007af40 	call	10007af4 <memmove>
10006c10:	80c00217 	ldw	r3,8(r16)
10006c14:	80800017 	ldw	r2,0(r16)
10006c18:	9029883a 	mov	r20,r18
10006c1c:	1c87c83a 	sub	r3,r3,r18
10006c20:	1485883a 	add	r2,r2,r18
10006c24:	80800015 	stw	r2,0(r16)
10006c28:	80c00215 	stw	r3,8(r16)
10006c2c:	9005883a 	mov	r2,r18
10006c30:	003f7606 	br	10006a0c <__alt_data_end+0xf8006a0c>
10006c34:	e009883a 	mov	r4,fp
10006c38:	01400284 	movi	r5,10
10006c3c:	900d883a 	mov	r6,r18
10006c40:	00079000 	call	10007900 <memchr>
10006c44:	10003926 	beq	r2,zero,10006d2c <__sfvwrite_r+0x484>
10006c48:	15800044 	addi	r22,r2,1
10006c4c:	b72dc83a 	sub	r22,r22,fp
10006c50:	00c00044 	movi	r3,1
10006c54:	003f8f06 	br	10006a94 <__alt_data_end+0xf8006a94>
10006c58:	81000517 	ldw	r4,20(r16)
10006c5c:	81400417 	ldw	r5,16(r16)
10006c60:	80c00017 	ldw	r3,0(r16)
10006c64:	210d883a 	add	r6,r4,r4
10006c68:	3109883a 	add	r4,r6,r4
10006c6c:	2028d7fa 	srli	r20,r4,31
10006c70:	196fc83a 	sub	r23,r3,r5
10006c74:	b9800044 	addi	r6,r23,1
10006c78:	a109883a 	add	r4,r20,r4
10006c7c:	2029d07a 	srai	r20,r4,1
10006c80:	348d883a 	add	r6,r6,r18
10006c84:	a180272e 	bgeu	r20,r6,10006d24 <__sfvwrite_r+0x47c>
10006c88:	3029883a 	mov	r20,r6
10006c8c:	1081000c 	andi	r2,r2,1024
10006c90:	a809883a 	mov	r4,r21
10006c94:	103f6d26 	beq	r2,zero,10006a4c <__alt_data_end+0xf8006a4c>
10006c98:	300b883a 	mov	r5,r6
10006c9c:	000713c0 	call	1000713c <_malloc_r>
10006ca0:	1039883a 	mov	fp,r2
10006ca4:	103f6f26 	beq	r2,zero,10006a64 <__alt_data_end+0xf8006a64>
10006ca8:	81400417 	ldw	r5,16(r16)
10006cac:	1009883a 	mov	r4,r2
10006cb0:	b80d883a 	mov	r6,r23
10006cb4:	00079e80 	call	100079e8 <memcpy>
10006cb8:	8080030b 	ldhu	r2,12(r16)
10006cbc:	00fedfc4 	movi	r3,-1153
10006cc0:	10c4703a 	and	r2,r2,r3
10006cc4:	10802014 	ori	r2,r2,128
10006cc8:	8080030d 	sth	r2,12(r16)
10006ccc:	e5c9883a 	add	r4,fp,r23
10006cd0:	a5c7c83a 	sub	r3,r20,r23
10006cd4:	87000415 	stw	fp,16(r16)
10006cd8:	85000515 	stw	r20,20(r16)
10006cdc:	81000015 	stw	r4,0(r16)
10006ce0:	9039883a 	mov	fp,r18
10006ce4:	80c00215 	stw	r3,8(r16)
10006ce8:	9029883a 	mov	r20,r18
10006cec:	902f883a 	mov	r23,r18
10006cf0:	003f3c06 	br	100069e4 <__alt_data_end+0xf80069e4>
10006cf4:	b00b883a 	mov	r5,r22
10006cf8:	a00d883a 	mov	r6,r20
10006cfc:	0007af40 	call	10007af4 <memmove>
10006d00:	80800017 	ldw	r2,0(r16)
10006d04:	a809883a 	mov	r4,r21
10006d08:	800b883a 	mov	r5,r16
10006d0c:	1505883a 	add	r2,r2,r20
10006d10:	80800015 	stw	r2,0(r16)
10006d14:	0005e840 	call	10005e84 <_fflush_r>
10006d18:	103f541e 	bne	r2,zero,10006a6c <__alt_data_end+0xf8006a6c>
10006d1c:	a005883a 	mov	r2,r20
10006d20:	003f3a06 	br	10006a0c <__alt_data_end+0xf8006a0c>
10006d24:	a00d883a 	mov	r6,r20
10006d28:	003fd806 	br	10006c8c <__alt_data_end+0xf8006c8c>
10006d2c:	95800044 	addi	r22,r18,1
10006d30:	00c00044 	movi	r3,1
10006d34:	003f5706 	br	10006a94 <__alt_data_end+0xf8006a94>
10006d38:	80c0030b 	ldhu	r3,12(r16)
10006d3c:	00bfffc4 	movi	r2,-1
10006d40:	18c01014 	ori	r3,r3,64
10006d44:	80c0030d 	sth	r3,12(r16)
10006d48:	00c00244 	movi	r3,9
10006d4c:	a8c00015 	stw	r3,0(r21)
10006d50:	003f0106 	br	10006958 <__alt_data_end+0xf8006958>

10006d54 <_fwalk>:
10006d54:	defff904 	addi	sp,sp,-28
10006d58:	dcc00315 	stw	r19,12(sp)
10006d5c:	24c0b804 	addi	r19,r4,736
10006d60:	dd400515 	stw	r21,20(sp)
10006d64:	dd000415 	stw	r20,16(sp)
10006d68:	dfc00615 	stw	ra,24(sp)
10006d6c:	dc800215 	stw	r18,8(sp)
10006d70:	dc400115 	stw	r17,4(sp)
10006d74:	dc000015 	stw	r16,0(sp)
10006d78:	282b883a 	mov	r21,r5
10006d7c:	0029883a 	mov	r20,zero
10006d80:	000645c0 	call	1000645c <__sfp_lock_acquire>
10006d84:	98001226 	beq	r19,zero,10006dd0 <_fwalk+0x7c>
10006d88:	04bfffc4 	movi	r18,-1
10006d8c:	9c400117 	ldw	r17,4(r19)
10006d90:	9c000217 	ldw	r16,8(r19)
10006d94:	8c7fffc4 	addi	r17,r17,-1
10006d98:	88000b16 	blt	r17,zero,10006dc8 <_fwalk+0x74>
10006d9c:	84000304 	addi	r16,r16,12
10006da0:	80c0000f 	ldh	r3,0(r16)
10006da4:	8c7fffc4 	addi	r17,r17,-1
10006da8:	813ffd04 	addi	r4,r16,-12
10006dac:	18000426 	beq	r3,zero,10006dc0 <_fwalk+0x6c>
10006db0:	80c0008f 	ldh	r3,2(r16)
10006db4:	1c800226 	beq	r3,r18,10006dc0 <_fwalk+0x6c>
10006db8:	a83ee83a 	callr	r21
10006dbc:	a0a8b03a 	or	r20,r20,r2
10006dc0:	84001a04 	addi	r16,r16,104
10006dc4:	8cbff61e 	bne	r17,r18,10006da0 <__alt_data_end+0xf8006da0>
10006dc8:	9cc00017 	ldw	r19,0(r19)
10006dcc:	983fef1e 	bne	r19,zero,10006d8c <__alt_data_end+0xf8006d8c>
10006dd0:	00064600 	call	10006460 <__sfp_lock_release>
10006dd4:	a005883a 	mov	r2,r20
10006dd8:	dfc00617 	ldw	ra,24(sp)
10006ddc:	dd400517 	ldw	r21,20(sp)
10006de0:	dd000417 	ldw	r20,16(sp)
10006de4:	dcc00317 	ldw	r19,12(sp)
10006de8:	dc800217 	ldw	r18,8(sp)
10006dec:	dc400117 	ldw	r17,4(sp)
10006df0:	dc000017 	ldw	r16,0(sp)
10006df4:	dec00704 	addi	sp,sp,28
10006df8:	f800283a 	ret

10006dfc <_fwalk_reent>:
10006dfc:	defff804 	addi	sp,sp,-32
10006e00:	dcc00315 	stw	r19,12(sp)
10006e04:	24c0b804 	addi	r19,r4,736
10006e08:	dd800615 	stw	r22,24(sp)
10006e0c:	dd400515 	stw	r21,20(sp)
10006e10:	dd000415 	stw	r20,16(sp)
10006e14:	dfc00715 	stw	ra,28(sp)
10006e18:	dc800215 	stw	r18,8(sp)
10006e1c:	dc400115 	stw	r17,4(sp)
10006e20:	dc000015 	stw	r16,0(sp)
10006e24:	2029883a 	mov	r20,r4
10006e28:	282b883a 	mov	r21,r5
10006e2c:	002d883a 	mov	r22,zero
10006e30:	000645c0 	call	1000645c <__sfp_lock_acquire>
10006e34:	98001326 	beq	r19,zero,10006e84 <_fwalk_reent+0x88>
10006e38:	04bfffc4 	movi	r18,-1
10006e3c:	9c400117 	ldw	r17,4(r19)
10006e40:	9c000217 	ldw	r16,8(r19)
10006e44:	8c7fffc4 	addi	r17,r17,-1
10006e48:	88000c16 	blt	r17,zero,10006e7c <_fwalk_reent+0x80>
10006e4c:	84000304 	addi	r16,r16,12
10006e50:	80c0000f 	ldh	r3,0(r16)
10006e54:	8c7fffc4 	addi	r17,r17,-1
10006e58:	817ffd04 	addi	r5,r16,-12
10006e5c:	18000526 	beq	r3,zero,10006e74 <_fwalk_reent+0x78>
10006e60:	80c0008f 	ldh	r3,2(r16)
10006e64:	a009883a 	mov	r4,r20
10006e68:	1c800226 	beq	r3,r18,10006e74 <_fwalk_reent+0x78>
10006e6c:	a83ee83a 	callr	r21
10006e70:	b0acb03a 	or	r22,r22,r2
10006e74:	84001a04 	addi	r16,r16,104
10006e78:	8cbff51e 	bne	r17,r18,10006e50 <__alt_data_end+0xf8006e50>
10006e7c:	9cc00017 	ldw	r19,0(r19)
10006e80:	983fee1e 	bne	r19,zero,10006e3c <__alt_data_end+0xf8006e3c>
10006e84:	00064600 	call	10006460 <__sfp_lock_release>
10006e88:	b005883a 	mov	r2,r22
10006e8c:	dfc00717 	ldw	ra,28(sp)
10006e90:	dd800617 	ldw	r22,24(sp)
10006e94:	dd400517 	ldw	r21,20(sp)
10006e98:	dd000417 	ldw	r20,16(sp)
10006e9c:	dcc00317 	ldw	r19,12(sp)
10006ea0:	dc800217 	ldw	r18,8(sp)
10006ea4:	dc400117 	ldw	r17,4(sp)
10006ea8:	dc000017 	ldw	r16,0(sp)
10006eac:	dec00804 	addi	sp,sp,32
10006eb0:	f800283a 	ret

10006eb4 <_setlocale_r>:
10006eb4:	defffe04 	addi	sp,sp,-8
10006eb8:	dc000015 	stw	r16,0(sp)
10006ebc:	dfc00115 	stw	ra,4(sp)
10006ec0:	3021883a 	mov	r16,r6
10006ec4:	30000526 	beq	r6,zero,10006edc <_setlocale_r+0x28>
10006ec8:	3009883a 	mov	r4,r6
10006ecc:	01440074 	movhi	r5,4097
10006ed0:	29469804 	addi	r5,r5,6752
10006ed4:	00094d80 	call	100094d8 <strcmp>
10006ed8:	1000061e 	bne	r2,zero,10006ef4 <_setlocale_r+0x40>
10006edc:	00840074 	movhi	r2,4097
10006ee0:	10869704 	addi	r2,r2,6748
10006ee4:	dfc00117 	ldw	ra,4(sp)
10006ee8:	dc000017 	ldw	r16,0(sp)
10006eec:	dec00204 	addi	sp,sp,8
10006ef0:	f800283a 	ret
10006ef4:	8009883a 	mov	r4,r16
10006ef8:	01440074 	movhi	r5,4097
10006efc:	29469704 	addi	r5,r5,6748
10006f00:	00094d80 	call	100094d8 <strcmp>
10006f04:	103ff526 	beq	r2,zero,10006edc <__alt_data_end+0xf8006edc>
10006f08:	8009883a 	mov	r4,r16
10006f0c:	01440074 	movhi	r5,4097
10006f10:	29468204 	addi	r5,r5,6664
10006f14:	00094d80 	call	100094d8 <strcmp>
10006f18:	103ff026 	beq	r2,zero,10006edc <__alt_data_end+0xf8006edc>
10006f1c:	0005883a 	mov	r2,zero
10006f20:	003ff006 	br	10006ee4 <__alt_data_end+0xf8006ee4>

10006f24 <__locale_charset>:
10006f24:	00840074 	movhi	r2,4097
10006f28:	10884a04 	addi	r2,r2,8488
10006f2c:	f800283a 	ret

10006f30 <__locale_mb_cur_max>:
10006f30:	00840074 	movhi	r2,4097
10006f34:	108de604 	addi	r2,r2,14232
10006f38:	10800017 	ldw	r2,0(r2)
10006f3c:	f800283a 	ret

10006f40 <__locale_msgcharset>:
10006f40:	00840074 	movhi	r2,4097
10006f44:	10884204 	addi	r2,r2,8456
10006f48:	f800283a 	ret

10006f4c <__locale_cjk_lang>:
10006f4c:	0005883a 	mov	r2,zero
10006f50:	f800283a 	ret

10006f54 <_localeconv_r>:
10006f54:	00840074 	movhi	r2,4097
10006f58:	10885204 	addi	r2,r2,8520
10006f5c:	f800283a 	ret

10006f60 <setlocale>:
10006f60:	00c40074 	movhi	r3,4097
10006f64:	18cde504 	addi	r3,r3,14228
10006f68:	2005883a 	mov	r2,r4
10006f6c:	19000017 	ldw	r4,0(r3)
10006f70:	280d883a 	mov	r6,r5
10006f74:	100b883a 	mov	r5,r2
10006f78:	0006eb41 	jmpi	10006eb4 <_setlocale_r>

10006f7c <localeconv>:
10006f7c:	00840074 	movhi	r2,4097
10006f80:	10885204 	addi	r2,r2,8520
10006f84:	f800283a 	ret

10006f88 <__smakebuf_r>:
10006f88:	2880030b 	ldhu	r2,12(r5)
10006f8c:	deffec04 	addi	sp,sp,-80
10006f90:	dc000f15 	stw	r16,60(sp)
10006f94:	dfc01315 	stw	ra,76(sp)
10006f98:	dcc01215 	stw	r19,72(sp)
10006f9c:	dc801115 	stw	r18,68(sp)
10006fa0:	dc401015 	stw	r17,64(sp)
10006fa4:	10c0008c 	andi	r3,r2,2
10006fa8:	2821883a 	mov	r16,r5
10006fac:	18003a1e 	bne	r3,zero,10007098 <__smakebuf_r+0x110>
10006fb0:	2940038f 	ldh	r5,14(r5)
10006fb4:	2023883a 	mov	r17,r4
10006fb8:	28001b16 	blt	r5,zero,10007028 <__smakebuf_r+0xa0>
10006fbc:	d80d883a 	mov	r6,sp
10006fc0:	000afdc0 	call	1000afdc <_fstat_r>
10006fc4:	10001716 	blt	r2,zero,10007024 <__smakebuf_r+0x9c>
10006fc8:	d8800117 	ldw	r2,4(sp)
10006fcc:	00e00014 	movui	r3,32768
10006fd0:	10bc000c 	andi	r2,r2,61440
10006fd4:	10c03e26 	beq	r2,r3,100070d0 <__smakebuf_r+0x148>
10006fd8:	80c0030b 	ldhu	r3,12(r16)
10006fdc:	18c20014 	ori	r3,r3,2048
10006fe0:	80c0030d 	sth	r3,12(r16)
10006fe4:	00c80004 	movi	r3,8192
10006fe8:	10c0431e 	bne	r2,r3,100070f8 <__smakebuf_r+0x170>
10006fec:	8140038f 	ldh	r5,14(r16)
10006ff0:	8809883a 	mov	r4,r17
10006ff4:	000b0440 	call	1000b044 <_isatty_r>
10006ff8:	10004d26 	beq	r2,zero,10007130 <__smakebuf_r+0x1a8>
10006ffc:	80c0030b 	ldhu	r3,12(r16)
10007000:	04c00044 	movi	r19,1
10007004:	808010c4 	addi	r2,r16,67
10007008:	1cc6b03a 	or	r3,r3,r19
1000700c:	80c0030d 	sth	r3,12(r16)
10007010:	80800015 	stw	r2,0(r16)
10007014:	80800415 	stw	r2,16(r16)
10007018:	84c00515 	stw	r19,20(r16)
1000701c:	04810004 	movi	r18,1024
10007020:	00000706 	br	10007040 <__smakebuf_r+0xb8>
10007024:	8080030b 	ldhu	r2,12(r16)
10007028:	10c0200c 	andi	r3,r2,128
1000702c:	1800261e 	bne	r3,zero,100070c8 <__smakebuf_r+0x140>
10007030:	04810004 	movi	r18,1024
10007034:	10820014 	ori	r2,r2,2048
10007038:	8080030d 	sth	r2,12(r16)
1000703c:	0027883a 	mov	r19,zero
10007040:	8809883a 	mov	r4,r17
10007044:	900b883a 	mov	r5,r18
10007048:	000713c0 	call	1000713c <_malloc_r>
1000704c:	10002d26 	beq	r2,zero,10007104 <__smakebuf_r+0x17c>
10007050:	80c0030b 	ldhu	r3,12(r16)
10007054:	01040034 	movhi	r4,4096
10007058:	21184204 	addi	r4,r4,24840
1000705c:	89000f15 	stw	r4,60(r17)
10007060:	18c02014 	ori	r3,r3,128
10007064:	80c0030d 	sth	r3,12(r16)
10007068:	80800015 	stw	r2,0(r16)
1000706c:	80800415 	stw	r2,16(r16)
10007070:	84800515 	stw	r18,20(r16)
10007074:	98000d26 	beq	r19,zero,100070ac <__smakebuf_r+0x124>
10007078:	8140038f 	ldh	r5,14(r16)
1000707c:	8809883a 	mov	r4,r17
10007080:	000b0440 	call	1000b044 <_isatty_r>
10007084:	10000926 	beq	r2,zero,100070ac <__smakebuf_r+0x124>
10007088:	8080030b 	ldhu	r2,12(r16)
1000708c:	10800054 	ori	r2,r2,1
10007090:	8080030d 	sth	r2,12(r16)
10007094:	00000506 	br	100070ac <__smakebuf_r+0x124>
10007098:	288010c4 	addi	r2,r5,67
1000709c:	28800015 	stw	r2,0(r5)
100070a0:	28800415 	stw	r2,16(r5)
100070a4:	00800044 	movi	r2,1
100070a8:	28800515 	stw	r2,20(r5)
100070ac:	dfc01317 	ldw	ra,76(sp)
100070b0:	dcc01217 	ldw	r19,72(sp)
100070b4:	dc801117 	ldw	r18,68(sp)
100070b8:	dc401017 	ldw	r17,64(sp)
100070bc:	dc000f17 	ldw	r16,60(sp)
100070c0:	dec01404 	addi	sp,sp,80
100070c4:	f800283a 	ret
100070c8:	04801004 	movi	r18,64
100070cc:	003fd906 	br	10007034 <__alt_data_end+0xf8007034>
100070d0:	81000a17 	ldw	r4,40(r16)
100070d4:	00c40074 	movhi	r3,4097
100070d8:	18e51d04 	addi	r3,r3,-27532
100070dc:	20ffbe1e 	bne	r4,r3,10006fd8 <__alt_data_end+0xf8006fd8>
100070e0:	80c0030b 	ldhu	r3,12(r16)
100070e4:	01010004 	movi	r4,1024
100070e8:	81001315 	stw	r4,76(r16)
100070ec:	1906b03a 	or	r3,r3,r4
100070f0:	80c0030d 	sth	r3,12(r16)
100070f4:	003fbb06 	br	10006fe4 <__alt_data_end+0xf8006fe4>
100070f8:	0027883a 	mov	r19,zero
100070fc:	04810004 	movi	r18,1024
10007100:	003fcf06 	br	10007040 <__alt_data_end+0xf8007040>
10007104:	8080030b 	ldhu	r2,12(r16)
10007108:	10c0800c 	andi	r3,r2,512
1000710c:	183fe71e 	bne	r3,zero,100070ac <__alt_data_end+0xf80070ac>
10007110:	10800094 	ori	r2,r2,2
10007114:	80c010c4 	addi	r3,r16,67
10007118:	8080030d 	sth	r2,12(r16)
1000711c:	00800044 	movi	r2,1
10007120:	80c00015 	stw	r3,0(r16)
10007124:	80c00415 	stw	r3,16(r16)
10007128:	80800515 	stw	r2,20(r16)
1000712c:	003fdf06 	br	100070ac <__alt_data_end+0xf80070ac>
10007130:	04c00044 	movi	r19,1
10007134:	04810004 	movi	r18,1024
10007138:	003fc106 	br	10007040 <__alt_data_end+0xf8007040>

1000713c <_malloc_r>:
1000713c:	defff504 	addi	sp,sp,-44
10007140:	dc800315 	stw	r18,12(sp)
10007144:	dfc00a15 	stw	ra,40(sp)
10007148:	df000915 	stw	fp,36(sp)
1000714c:	ddc00815 	stw	r23,32(sp)
10007150:	dd800715 	stw	r22,28(sp)
10007154:	dd400615 	stw	r21,24(sp)
10007158:	dd000515 	stw	r20,20(sp)
1000715c:	dcc00415 	stw	r19,16(sp)
10007160:	dc400215 	stw	r17,8(sp)
10007164:	dc000115 	stw	r16,4(sp)
10007168:	288002c4 	addi	r2,r5,11
1000716c:	00c00584 	movi	r3,22
10007170:	2025883a 	mov	r18,r4
10007174:	18802b2e 	bgeu	r3,r2,10007224 <_malloc_r+0xe8>
10007178:	047ffe04 	movi	r17,-8
1000717c:	1462703a 	and	r17,r2,r17
10007180:	88002a16 	blt	r17,zero,1000722c <_malloc_r+0xf0>
10007184:	89402936 	bltu	r17,r5,1000722c <_malloc_r+0xf0>
10007188:	9009883a 	mov	r4,r18
1000718c:	000f0300 	call	1000f030 <__malloc_lock>
10007190:	00807dc4 	movi	r2,503
10007194:	14402936 	bltu	r2,r17,1000723c <_malloc_r+0x100>
10007198:	8808d0fa 	srli	r4,r17,3
1000719c:	04c40074 	movhi	r19,4097
100071a0:	9cc86004 	addi	r19,r19,8576
100071a4:	2105883a 	add	r2,r4,r4
100071a8:	1085883a 	add	r2,r2,r2
100071ac:	1085883a 	add	r2,r2,r2
100071b0:	9885883a 	add	r2,r19,r2
100071b4:	14000317 	ldw	r16,12(r2)
100071b8:	80815226 	beq	r16,r2,10007704 <_malloc_r+0x5c8>
100071bc:	81000117 	ldw	r4,4(r16)
100071c0:	00bfff04 	movi	r2,-4
100071c4:	80c00317 	ldw	r3,12(r16)
100071c8:	2084703a 	and	r2,r4,r2
100071cc:	8085883a 	add	r2,r16,r2
100071d0:	81000217 	ldw	r4,8(r16)
100071d4:	11400117 	ldw	r5,4(r2)
100071d8:	20c00315 	stw	r3,12(r4)
100071dc:	19000215 	stw	r4,8(r3)
100071e0:	28c00054 	ori	r3,r5,1
100071e4:	10c00115 	stw	r3,4(r2)
100071e8:	9009883a 	mov	r4,r18
100071ec:	000f0500 	call	1000f050 <__malloc_unlock>
100071f0:	80800204 	addi	r2,r16,8
100071f4:	dfc00a17 	ldw	ra,40(sp)
100071f8:	df000917 	ldw	fp,36(sp)
100071fc:	ddc00817 	ldw	r23,32(sp)
10007200:	dd800717 	ldw	r22,28(sp)
10007204:	dd400617 	ldw	r21,24(sp)
10007208:	dd000517 	ldw	r20,20(sp)
1000720c:	dcc00417 	ldw	r19,16(sp)
10007210:	dc800317 	ldw	r18,12(sp)
10007214:	dc400217 	ldw	r17,8(sp)
10007218:	dc000117 	ldw	r16,4(sp)
1000721c:	dec00b04 	addi	sp,sp,44
10007220:	f800283a 	ret
10007224:	04400404 	movi	r17,16
10007228:	897fd72e 	bgeu	r17,r5,10007188 <__alt_data_end+0xf8007188>
1000722c:	00800304 	movi	r2,12
10007230:	90800015 	stw	r2,0(r18)
10007234:	0005883a 	mov	r2,zero
10007238:	003fee06 	br	100071f4 <__alt_data_end+0xf80071f4>
1000723c:	8808d27a 	srli	r4,r17,9
10007240:	20007126 	beq	r4,zero,10007408 <_malloc_r+0x2cc>
10007244:	00800104 	movi	r2,4
10007248:	1100f536 	bltu	r2,r4,10007620 <_malloc_r+0x4e4>
1000724c:	8808d1ba 	srli	r4,r17,6
10007250:	21000e04 	addi	r4,r4,56
10007254:	210b883a 	add	r5,r4,r4
10007258:	294b883a 	add	r5,r5,r5
1000725c:	294b883a 	add	r5,r5,r5
10007260:	04c40074 	movhi	r19,4097
10007264:	9cc86004 	addi	r19,r19,8576
10007268:	994b883a 	add	r5,r19,r5
1000726c:	2c000317 	ldw	r16,12(r5)
10007270:	2c000e26 	beq	r5,r16,100072ac <_malloc_r+0x170>
10007274:	80c00117 	ldw	r3,4(r16)
10007278:	01ffff04 	movi	r7,-4
1000727c:	018003c4 	movi	r6,15
10007280:	19c6703a 	and	r3,r3,r7
10007284:	1c45c83a 	sub	r2,r3,r17
10007288:	30800716 	blt	r6,r2,100072a8 <_malloc_r+0x16c>
1000728c:	1000610e 	bge	r2,zero,10007414 <_malloc_r+0x2d8>
10007290:	84000317 	ldw	r16,12(r16)
10007294:	2c000526 	beq	r5,r16,100072ac <_malloc_r+0x170>
10007298:	80c00117 	ldw	r3,4(r16)
1000729c:	19c6703a 	and	r3,r3,r7
100072a0:	1c45c83a 	sub	r2,r3,r17
100072a4:	30bff90e 	bge	r6,r2,1000728c <__alt_data_end+0xf800728c>
100072a8:	213fffc4 	addi	r4,r4,-1
100072ac:	21000044 	addi	r4,r4,1
100072b0:	9c000417 	ldw	r16,16(r19)
100072b4:	00c40074 	movhi	r3,4097
100072b8:	18c86004 	addi	r3,r3,8576
100072bc:	1a400204 	addi	r9,r3,8
100072c0:	82410926 	beq	r16,r9,100076e8 <_malloc_r+0x5ac>
100072c4:	81400117 	ldw	r5,4(r16)
100072c8:	00bfff04 	movi	r2,-4
100072cc:	018003c4 	movi	r6,15
100072d0:	2884703a 	and	r2,r5,r2
100072d4:	144bc83a 	sub	r5,r2,r17
100072d8:	3140f416 	blt	r6,r5,100076ac <_malloc_r+0x570>
100072dc:	1a400515 	stw	r9,20(r3)
100072e0:	1a400415 	stw	r9,16(r3)
100072e4:	2800570e 	bge	r5,zero,10007444 <_malloc_r+0x308>
100072e8:	01407fc4 	movi	r5,511
100072ec:	2880d436 	bltu	r5,r2,10007640 <_malloc_r+0x504>
100072f0:	1004d0fa 	srli	r2,r2,3
100072f4:	02000044 	movi	r8,1
100072f8:	19c00117 	ldw	r7,4(r3)
100072fc:	108b883a 	add	r5,r2,r2
10007300:	294b883a 	add	r5,r5,r5
10007304:	1005d0ba 	srai	r2,r2,2
10007308:	294b883a 	add	r5,r5,r5
1000730c:	28cb883a 	add	r5,r5,r3
10007310:	29800217 	ldw	r6,8(r5)
10007314:	4084983a 	sll	r2,r8,r2
10007318:	81400315 	stw	r5,12(r16)
1000731c:	81800215 	stw	r6,8(r16)
10007320:	11c4b03a 	or	r2,r2,r7
10007324:	2c000215 	stw	r16,8(r5)
10007328:	18800115 	stw	r2,4(r3)
1000732c:	34000315 	stw	r16,12(r6)
10007330:	2007d0ba 	srai	r3,r4,2
10007334:	01400044 	movi	r5,1
10007338:	28ca983a 	sll	r5,r5,r3
1000733c:	11404936 	bltu	r2,r5,10007464 <_malloc_r+0x328>
10007340:	1146703a 	and	r3,r2,r5
10007344:	18000a1e 	bne	r3,zero,10007370 <_malloc_r+0x234>
10007348:	00ffff04 	movi	r3,-4
1000734c:	294b883a 	add	r5,r5,r5
10007350:	20c8703a 	and	r4,r4,r3
10007354:	1146703a 	and	r3,r2,r5
10007358:	21000104 	addi	r4,r4,4
1000735c:	1800041e 	bne	r3,zero,10007370 <_malloc_r+0x234>
10007360:	294b883a 	add	r5,r5,r5
10007364:	1146703a 	and	r3,r2,r5
10007368:	21000104 	addi	r4,r4,4
1000736c:	183ffc26 	beq	r3,zero,10007360 <__alt_data_end+0xf8007360>
10007370:	023fff04 	movi	r8,-4
10007374:	01c003c4 	movi	r7,15
10007378:	2105883a 	add	r2,r4,r4
1000737c:	1085883a 	add	r2,r2,r2
10007380:	1085883a 	add	r2,r2,r2
10007384:	9897883a 	add	r11,r19,r2
10007388:	5a800304 	addi	r10,r11,12
1000738c:	2019883a 	mov	r12,r4
10007390:	54000017 	ldw	r16,0(r10)
10007394:	51bffd04 	addi	r6,r10,-12
10007398:	8180041e 	bne	r16,r6,100073ac <_malloc_r+0x270>
1000739c:	0000d406 	br	100076f0 <_malloc_r+0x5b4>
100073a0:	1000dd0e 	bge	r2,zero,10007718 <_malloc_r+0x5dc>
100073a4:	84000317 	ldw	r16,12(r16)
100073a8:	8180d126 	beq	r16,r6,100076f0 <_malloc_r+0x5b4>
100073ac:	80c00117 	ldw	r3,4(r16)
100073b0:	1a06703a 	and	r3,r3,r8
100073b4:	1c45c83a 	sub	r2,r3,r17
100073b8:	38bff90e 	bge	r7,r2,100073a0 <__alt_data_end+0xf80073a0>
100073bc:	80c00317 	ldw	r3,12(r16)
100073c0:	81000217 	ldw	r4,8(r16)
100073c4:	89400054 	ori	r5,r17,1
100073c8:	81400115 	stw	r5,4(r16)
100073cc:	20c00315 	stw	r3,12(r4)
100073d0:	19000215 	stw	r4,8(r3)
100073d4:	8463883a 	add	r17,r16,r17
100073d8:	9c400515 	stw	r17,20(r19)
100073dc:	9c400415 	stw	r17,16(r19)
100073e0:	10c00054 	ori	r3,r2,1
100073e4:	8a400315 	stw	r9,12(r17)
100073e8:	8a400215 	stw	r9,8(r17)
100073ec:	88c00115 	stw	r3,4(r17)
100073f0:	88a3883a 	add	r17,r17,r2
100073f4:	88800015 	stw	r2,0(r17)
100073f8:	9009883a 	mov	r4,r18
100073fc:	000f0500 	call	1000f050 <__malloc_unlock>
10007400:	80800204 	addi	r2,r16,8
10007404:	003f7b06 	br	100071f4 <__alt_data_end+0xf80071f4>
10007408:	01401f84 	movi	r5,126
1000740c:	01000fc4 	movi	r4,63
10007410:	003f9106 	br	10007258 <__alt_data_end+0xf8007258>
10007414:	80800317 	ldw	r2,12(r16)
10007418:	81000217 	ldw	r4,8(r16)
1000741c:	80c7883a 	add	r3,r16,r3
10007420:	19400117 	ldw	r5,4(r3)
10007424:	20800315 	stw	r2,12(r4)
10007428:	11000215 	stw	r4,8(r2)
1000742c:	28800054 	ori	r2,r5,1
10007430:	18800115 	stw	r2,4(r3)
10007434:	9009883a 	mov	r4,r18
10007438:	000f0500 	call	1000f050 <__malloc_unlock>
1000743c:	80800204 	addi	r2,r16,8
10007440:	003f6c06 	br	100071f4 <__alt_data_end+0xf80071f4>
10007444:	8085883a 	add	r2,r16,r2
10007448:	10c00117 	ldw	r3,4(r2)
1000744c:	9009883a 	mov	r4,r18
10007450:	18c00054 	ori	r3,r3,1
10007454:	10c00115 	stw	r3,4(r2)
10007458:	000f0500 	call	1000f050 <__malloc_unlock>
1000745c:	80800204 	addi	r2,r16,8
10007460:	003f6406 	br	100071f4 <__alt_data_end+0xf80071f4>
10007464:	9c000217 	ldw	r16,8(r19)
10007468:	00bfff04 	movi	r2,-4
1000746c:	85400117 	ldw	r21,4(r16)
10007470:	a8aa703a 	and	r21,r21,r2
10007474:	ac400336 	bltu	r21,r17,10007484 <_malloc_r+0x348>
10007478:	ac45c83a 	sub	r2,r21,r17
1000747c:	00c003c4 	movi	r3,15
10007480:	18805d16 	blt	r3,r2,100075f8 <_malloc_r+0x4bc>
10007484:	00840074 	movhi	r2,4097
10007488:	1094b504 	addi	r2,r2,21204
1000748c:	00c40074 	movhi	r3,4097
10007490:	18cde704 	addi	r3,r3,14236
10007494:	15c00017 	ldw	r23,0(r2)
10007498:	19000017 	ldw	r4,0(r3)
1000749c:	00bfffc4 	movi	r2,-1
100074a0:	8579883a 	add	fp,r16,r21
100074a4:	8def883a 	add	r23,r17,r23
100074a8:	2080e426 	beq	r4,r2,1000783c <_malloc_r+0x700>
100074ac:	bdc403c4 	addi	r23,r23,4111
100074b0:	00bc0004 	movi	r2,-4096
100074b4:	b8ae703a 	and	r23,r23,r2
100074b8:	9009883a 	mov	r4,r18
100074bc:	b80b883a 	mov	r5,r23
100074c0:	d8c00015 	stw	r3,0(sp)
100074c4:	00093380 	call	10009338 <_sbrk_r>
100074c8:	1029883a 	mov	r20,r2
100074cc:	00bfffc4 	movi	r2,-1
100074d0:	d8c00017 	ldw	r3,0(sp)
100074d4:	a080a426 	beq	r20,r2,10007768 <_malloc_r+0x62c>
100074d8:	a700a236 	bltu	r20,fp,10007764 <_malloc_r+0x628>
100074dc:	05840074 	movhi	r22,4097
100074e0:	b594bd04 	addi	r22,r22,21236
100074e4:	b0800017 	ldw	r2,0(r22)
100074e8:	b885883a 	add	r2,r23,r2
100074ec:	b0800015 	stw	r2,0(r22)
100074f0:	e500da26 	beq	fp,r20,1000785c <_malloc_r+0x720>
100074f4:	19000017 	ldw	r4,0(r3)
100074f8:	00ffffc4 	movi	r3,-1
100074fc:	20c0e426 	beq	r4,r3,10007890 <_malloc_r+0x754>
10007500:	a739c83a 	sub	fp,r20,fp
10007504:	1705883a 	add	r2,r2,fp
10007508:	b0800015 	stw	r2,0(r22)
1000750c:	a08001cc 	andi	r2,r20,7
10007510:	1000b526 	beq	r2,zero,100077e8 <_malloc_r+0x6ac>
10007514:	a0a9c83a 	sub	r20,r20,r2
10007518:	00c40204 	movi	r3,4104
1000751c:	a5000204 	addi	r20,r20,8
10007520:	1885c83a 	sub	r2,r3,r2
10007524:	a5c7883a 	add	r3,r20,r23
10007528:	18c3ffcc 	andi	r3,r3,4095
1000752c:	10efc83a 	sub	r23,r2,r3
10007530:	9009883a 	mov	r4,r18
10007534:	b80b883a 	mov	r5,r23
10007538:	00093380 	call	10009338 <_sbrk_r>
1000753c:	00ffffc4 	movi	r3,-1
10007540:	10c0d026 	beq	r2,r3,10007884 <_malloc_r+0x748>
10007544:	1505c83a 	sub	r2,r2,r20
10007548:	b887883a 	add	r3,r23,r2
1000754c:	18c00054 	ori	r3,r3,1
10007550:	b0800017 	ldw	r2,0(r22)
10007554:	9d000215 	stw	r20,8(r19)
10007558:	a0c00115 	stw	r3,4(r20)
1000755c:	b885883a 	add	r2,r23,r2
10007560:	b0800015 	stw	r2,0(r22)
10007564:	84c00e26 	beq	r16,r19,100075a0 <_malloc_r+0x464>
10007568:	00c003c4 	movi	r3,15
1000756c:	1d40a02e 	bgeu	r3,r21,100077f0 <_malloc_r+0x6b4>
10007570:	81400117 	ldw	r5,4(r16)
10007574:	ad7ffd04 	addi	r21,r21,-12
10007578:	013ffe04 	movi	r4,-8
1000757c:	a908703a 	and	r4,r21,r4
10007580:	2940004c 	andi	r5,r5,1
10007584:	214ab03a 	or	r5,r4,r5
10007588:	81400115 	stw	r5,4(r16)
1000758c:	01800144 	movi	r6,5
10007590:	810b883a 	add	r5,r16,r4
10007594:	29800115 	stw	r6,4(r5)
10007598:	29800215 	stw	r6,8(r5)
1000759c:	1900c036 	bltu	r3,r4,100078a0 <_malloc_r+0x764>
100075a0:	00c40074 	movhi	r3,4097
100075a4:	18d4b404 	addi	r3,r3,21200
100075a8:	19000017 	ldw	r4,0(r3)
100075ac:	2080012e 	bgeu	r4,r2,100075b4 <_malloc_r+0x478>
100075b0:	18800015 	stw	r2,0(r3)
100075b4:	00c40074 	movhi	r3,4097
100075b8:	18d4b304 	addi	r3,r3,21196
100075bc:	19000017 	ldw	r4,0(r3)
100075c0:	9c000217 	ldw	r16,8(r19)
100075c4:	2080012e 	bgeu	r4,r2,100075cc <_malloc_r+0x490>
100075c8:	18800015 	stw	r2,0(r3)
100075cc:	80c00117 	ldw	r3,4(r16)
100075d0:	00bfff04 	movi	r2,-4
100075d4:	1886703a 	and	r3,r3,r2
100075d8:	1c45c83a 	sub	r2,r3,r17
100075dc:	1c400236 	bltu	r3,r17,100075e8 <_malloc_r+0x4ac>
100075e0:	00c003c4 	movi	r3,15
100075e4:	18800416 	blt	r3,r2,100075f8 <_malloc_r+0x4bc>
100075e8:	9009883a 	mov	r4,r18
100075ec:	000f0500 	call	1000f050 <__malloc_unlock>
100075f0:	0005883a 	mov	r2,zero
100075f4:	003eff06 	br	100071f4 <__alt_data_end+0xf80071f4>
100075f8:	88c00054 	ori	r3,r17,1
100075fc:	80c00115 	stw	r3,4(r16)
10007600:	8463883a 	add	r17,r16,r17
10007604:	10800054 	ori	r2,r2,1
10007608:	9c400215 	stw	r17,8(r19)
1000760c:	88800115 	stw	r2,4(r17)
10007610:	9009883a 	mov	r4,r18
10007614:	000f0500 	call	1000f050 <__malloc_unlock>
10007618:	80800204 	addi	r2,r16,8
1000761c:	003ef506 	br	100071f4 <__alt_data_end+0xf80071f4>
10007620:	00800504 	movi	r2,20
10007624:	1100482e 	bgeu	r2,r4,10007748 <_malloc_r+0x60c>
10007628:	00801504 	movi	r2,84
1000762c:	11006836 	bltu	r2,r4,100077d0 <_malloc_r+0x694>
10007630:	8808d33a 	srli	r4,r17,12
10007634:	21001b84 	addi	r4,r4,110
10007638:	210b883a 	add	r5,r4,r4
1000763c:	003f0606 	br	10007258 <__alt_data_end+0xf8007258>
10007640:	1006d27a 	srli	r3,r2,9
10007644:	01400104 	movi	r5,4
10007648:	28c0422e 	bgeu	r5,r3,10007754 <_malloc_r+0x618>
1000764c:	01400504 	movi	r5,20
10007650:	28c07c36 	bltu	r5,r3,10007844 <_malloc_r+0x708>
10007654:	194016c4 	addi	r5,r3,91
10007658:	294d883a 	add	r6,r5,r5
1000765c:	318d883a 	add	r6,r6,r6
10007660:	318d883a 	add	r6,r6,r6
10007664:	998d883a 	add	r6,r19,r6
10007668:	30c00217 	ldw	r3,8(r6)
1000766c:	01c40074 	movhi	r7,4097
10007670:	39c86004 	addi	r7,r7,8576
10007674:	19806326 	beq	r3,r6,10007804 <_malloc_r+0x6c8>
10007678:	01ffff04 	movi	r7,-4
1000767c:	19400117 	ldw	r5,4(r3)
10007680:	29ca703a 	and	r5,r5,r7
10007684:	1140022e 	bgeu	r2,r5,10007690 <_malloc_r+0x554>
10007688:	18c00217 	ldw	r3,8(r3)
1000768c:	30fffb1e 	bne	r6,r3,1000767c <__alt_data_end+0xf800767c>
10007690:	19400317 	ldw	r5,12(r3)
10007694:	98800117 	ldw	r2,4(r19)
10007698:	81400315 	stw	r5,12(r16)
1000769c:	80c00215 	stw	r3,8(r16)
100076a0:	2c000215 	stw	r16,8(r5)
100076a4:	1c000315 	stw	r16,12(r3)
100076a8:	003f2106 	br	10007330 <__alt_data_end+0xf8007330>
100076ac:	88800054 	ori	r2,r17,1
100076b0:	80800115 	stw	r2,4(r16)
100076b4:	8463883a 	add	r17,r16,r17
100076b8:	1c400515 	stw	r17,20(r3)
100076bc:	1c400415 	stw	r17,16(r3)
100076c0:	28800054 	ori	r2,r5,1
100076c4:	88800115 	stw	r2,4(r17)
100076c8:	8a400315 	stw	r9,12(r17)
100076cc:	8a400215 	stw	r9,8(r17)
100076d0:	8963883a 	add	r17,r17,r5
100076d4:	89400015 	stw	r5,0(r17)
100076d8:	9009883a 	mov	r4,r18
100076dc:	000f0500 	call	1000f050 <__malloc_unlock>
100076e0:	80800204 	addi	r2,r16,8
100076e4:	003ec306 	br	100071f4 <__alt_data_end+0xf80071f4>
100076e8:	18800117 	ldw	r2,4(r3)
100076ec:	003f1006 	br	10007330 <__alt_data_end+0xf8007330>
100076f0:	63000044 	addi	r12,r12,1
100076f4:	608000cc 	andi	r2,r12,3
100076f8:	52800204 	addi	r10,r10,8
100076fc:	103f241e 	bne	r2,zero,10007390 <__alt_data_end+0xf8007390>
10007700:	00002106 	br	10007788 <_malloc_r+0x64c>
10007704:	80800204 	addi	r2,r16,8
10007708:	84000517 	ldw	r16,20(r16)
1000770c:	143eab1e 	bne	r2,r16,100071bc <__alt_data_end+0xf80071bc>
10007710:	21000084 	addi	r4,r4,2
10007714:	003ee606 	br	100072b0 <__alt_data_end+0xf80072b0>
10007718:	80c7883a 	add	r3,r16,r3
1000771c:	19400117 	ldw	r5,4(r3)
10007720:	80800317 	ldw	r2,12(r16)
10007724:	81000217 	ldw	r4,8(r16)
10007728:	29400054 	ori	r5,r5,1
1000772c:	19400115 	stw	r5,4(r3)
10007730:	20800315 	stw	r2,12(r4)
10007734:	11000215 	stw	r4,8(r2)
10007738:	9009883a 	mov	r4,r18
1000773c:	000f0500 	call	1000f050 <__malloc_unlock>
10007740:	80800204 	addi	r2,r16,8
10007744:	003eab06 	br	100071f4 <__alt_data_end+0xf80071f4>
10007748:	210016c4 	addi	r4,r4,91
1000774c:	210b883a 	add	r5,r4,r4
10007750:	003ec106 	br	10007258 <__alt_data_end+0xf8007258>
10007754:	100ad1ba 	srli	r5,r2,6
10007758:	29400e04 	addi	r5,r5,56
1000775c:	294d883a 	add	r6,r5,r5
10007760:	003fbe06 	br	1000765c <__alt_data_end+0xf800765c>
10007764:	84ff5d26 	beq	r16,r19,100074dc <__alt_data_end+0xf80074dc>
10007768:	9c000217 	ldw	r16,8(r19)
1000776c:	00bfff04 	movi	r2,-4
10007770:	80c00117 	ldw	r3,4(r16)
10007774:	1886703a 	and	r3,r3,r2
10007778:	003f9706 	br	100075d8 <__alt_data_end+0xf80075d8>
1000777c:	5ac00017 	ldw	r11,0(r11)
10007780:	213fffc4 	addi	r4,r4,-1
10007784:	58805c1e 	bne	r11,r2,100078f8 <_malloc_r+0x7bc>
10007788:	20c000cc 	andi	r3,r4,3
1000778c:	58bffe04 	addi	r2,r11,-8
10007790:	183ffa1e 	bne	r3,zero,1000777c <__alt_data_end+0xf800777c>
10007794:	98800117 	ldw	r2,4(r19)
10007798:	0146303a 	nor	r3,zero,r5
1000779c:	1884703a 	and	r2,r3,r2
100077a0:	98800115 	stw	r2,4(r19)
100077a4:	294b883a 	add	r5,r5,r5
100077a8:	117f2e36 	bltu	r2,r5,10007464 <__alt_data_end+0xf8007464>
100077ac:	283f2d26 	beq	r5,zero,10007464 <__alt_data_end+0xf8007464>
100077b0:	1146703a 	and	r3,r2,r5
100077b4:	6009883a 	mov	r4,r12
100077b8:	183eef1e 	bne	r3,zero,10007378 <__alt_data_end+0xf8007378>
100077bc:	294b883a 	add	r5,r5,r5
100077c0:	1146703a 	and	r3,r2,r5
100077c4:	21000104 	addi	r4,r4,4
100077c8:	183ffc26 	beq	r3,zero,100077bc <__alt_data_end+0xf80077bc>
100077cc:	003eea06 	br	10007378 <__alt_data_end+0xf8007378>
100077d0:	00805504 	movi	r2,340
100077d4:	11001336 	bltu	r2,r4,10007824 <_malloc_r+0x6e8>
100077d8:	8808d3fa 	srli	r4,r17,15
100077dc:	21001dc4 	addi	r4,r4,119
100077e0:	210b883a 	add	r5,r4,r4
100077e4:	003e9c06 	br	10007258 <__alt_data_end+0xf8007258>
100077e8:	00840004 	movi	r2,4096
100077ec:	003f4d06 	br	10007524 <__alt_data_end+0xf8007524>
100077f0:	00800044 	movi	r2,1
100077f4:	a0800115 	stw	r2,4(r20)
100077f8:	a021883a 	mov	r16,r20
100077fc:	0007883a 	mov	r3,zero
10007800:	003f7506 	br	100075d8 <__alt_data_end+0xf80075d8>
10007804:	280bd0ba 	srai	r5,r5,2
10007808:	01800044 	movi	r6,1
1000780c:	38800117 	ldw	r2,4(r7)
10007810:	314c983a 	sll	r6,r6,r5
10007814:	180b883a 	mov	r5,r3
10007818:	3084b03a 	or	r2,r6,r2
1000781c:	38800115 	stw	r2,4(r7)
10007820:	003f9d06 	br	10007698 <__alt_data_end+0xf8007698>
10007824:	00815504 	movi	r2,1364
10007828:	11001336 	bltu	r2,r4,10007878 <_malloc_r+0x73c>
1000782c:	8808d4ba 	srli	r4,r17,18
10007830:	21001f04 	addi	r4,r4,124
10007834:	210b883a 	add	r5,r4,r4
10007838:	003e8706 	br	10007258 <__alt_data_end+0xf8007258>
1000783c:	bdc00404 	addi	r23,r23,16
10007840:	003f1d06 	br	100074b8 <__alt_data_end+0xf80074b8>
10007844:	01401504 	movi	r5,84
10007848:	28c01c36 	bltu	r5,r3,100078bc <_malloc_r+0x780>
1000784c:	100ad33a 	srli	r5,r2,12
10007850:	29401b84 	addi	r5,r5,110
10007854:	294d883a 	add	r6,r5,r5
10007858:	003f8006 	br	1000765c <__alt_data_end+0xf800765c>
1000785c:	e103ffcc 	andi	r4,fp,4095
10007860:	203f241e 	bne	r4,zero,100074f4 <__alt_data_end+0xf80074f4>
10007864:	98c00217 	ldw	r3,8(r19)
10007868:	bd49883a 	add	r4,r23,r21
1000786c:	21000054 	ori	r4,r4,1
10007870:	19000115 	stw	r4,4(r3)
10007874:	003f4a06 	br	100075a0 <__alt_data_end+0xf80075a0>
10007878:	01403f04 	movi	r5,252
1000787c:	01001f84 	movi	r4,126
10007880:	003e7506 	br	10007258 <__alt_data_end+0xf8007258>
10007884:	00c00044 	movi	r3,1
10007888:	002f883a 	mov	r23,zero
1000788c:	003f3006 	br	10007550 <__alt_data_end+0xf8007550>
10007890:	00840074 	movhi	r2,4097
10007894:	108de704 	addi	r2,r2,14236
10007898:	15000015 	stw	r20,0(r2)
1000789c:	003f1b06 	br	1000750c <__alt_data_end+0xf800750c>
100078a0:	9009883a 	mov	r4,r18
100078a4:	81400204 	addi	r5,r16,8
100078a8:	00065d80 	call	100065d8 <_free_r>
100078ac:	00840074 	movhi	r2,4097
100078b0:	1094bd04 	addi	r2,r2,21236
100078b4:	10800017 	ldw	r2,0(r2)
100078b8:	003f3906 	br	100075a0 <__alt_data_end+0xf80075a0>
100078bc:	01405504 	movi	r5,340
100078c0:	28c00436 	bltu	r5,r3,100078d4 <_malloc_r+0x798>
100078c4:	100ad3fa 	srli	r5,r2,15
100078c8:	29401dc4 	addi	r5,r5,119
100078cc:	294d883a 	add	r6,r5,r5
100078d0:	003f6206 	br	1000765c <__alt_data_end+0xf800765c>
100078d4:	01415504 	movi	r5,1364
100078d8:	28c00436 	bltu	r5,r3,100078ec <_malloc_r+0x7b0>
100078dc:	100ad4ba 	srli	r5,r2,18
100078e0:	29401f04 	addi	r5,r5,124
100078e4:	294d883a 	add	r6,r5,r5
100078e8:	003f5c06 	br	1000765c <__alt_data_end+0xf800765c>
100078ec:	01803f04 	movi	r6,252
100078f0:	01401f84 	movi	r5,126
100078f4:	003f5906 	br	1000765c <__alt_data_end+0xf800765c>
100078f8:	98800117 	ldw	r2,4(r19)
100078fc:	003fa906 	br	100077a4 <__alt_data_end+0xf80077a4>

10007900 <memchr>:
10007900:	208000cc 	andi	r2,r4,3
10007904:	2811883a 	mov	r8,r5
10007908:	10003526 	beq	r2,zero,100079e0 <memchr+0xe0>
1000790c:	30bfffc4 	addi	r2,r6,-1
10007910:	30001b26 	beq	r6,zero,10007980 <memchr+0x80>
10007914:	21800003 	ldbu	r6,0(r4)
10007918:	28c03fcc 	andi	r3,r5,255
1000791c:	30c01a26 	beq	r6,r3,10007988 <memchr+0x88>
10007920:	180d883a 	mov	r6,r3
10007924:	00000406 	br	10007938 <memchr+0x38>
10007928:	10001526 	beq	r2,zero,10007980 <memchr+0x80>
1000792c:	20c00003 	ldbu	r3,0(r4)
10007930:	10bfffc4 	addi	r2,r2,-1
10007934:	19801426 	beq	r3,r6,10007988 <memchr+0x88>
10007938:	21000044 	addi	r4,r4,1
1000793c:	20c000cc 	andi	r3,r4,3
10007940:	183ff91e 	bne	r3,zero,10007928 <__alt_data_end+0xf8007928>
10007944:	02c000c4 	movi	r11,3
10007948:	58801136 	bltu	r11,r2,10007990 <memchr+0x90>
1000794c:	10000c26 	beq	r2,zero,10007980 <memchr+0x80>
10007950:	20c00003 	ldbu	r3,0(r4)
10007954:	29403fcc 	andi	r5,r5,255
10007958:	19400b26 	beq	r3,r5,10007988 <memchr+0x88>
1000795c:	20c00044 	addi	r3,r4,1
10007960:	2085883a 	add	r2,r4,r2
10007964:	41803fcc 	andi	r6,r8,255
10007968:	00000306 	br	10007978 <memchr+0x78>
1000796c:	18c00044 	addi	r3,r3,1
10007970:	197fffc3 	ldbu	r5,-1(r3)
10007974:	29800426 	beq	r5,r6,10007988 <memchr+0x88>
10007978:	1809883a 	mov	r4,r3
1000797c:	18bffb1e 	bne	r3,r2,1000796c <__alt_data_end+0xf800796c>
10007980:	0005883a 	mov	r2,zero
10007984:	f800283a 	ret
10007988:	2005883a 	mov	r2,r4
1000798c:	f800283a 	ret
10007990:	28c03fcc 	andi	r3,r5,255
10007994:	180c923a 	slli	r6,r3,8
10007998:	02bfbff4 	movhi	r10,65279
1000799c:	52bfbfc4 	addi	r10,r10,-257
100079a0:	02602074 	movhi	r9,32897
100079a4:	4a602004 	addi	r9,r9,-32640
100079a8:	30c6b03a 	or	r3,r6,r3
100079ac:	180c943a 	slli	r6,r3,16
100079b0:	30ccb03a 	or	r6,r6,r3
100079b4:	20c00017 	ldw	r3,0(r4)
100079b8:	30c6f03a 	xor	r3,r6,r3
100079bc:	1a8f883a 	add	r7,r3,r10
100079c0:	00c6303a 	nor	r3,zero,r3
100079c4:	38c6703a 	and	r3,r7,r3
100079c8:	1a46703a 	and	r3,r3,r9
100079cc:	183fdf1e 	bne	r3,zero,1000794c <__alt_data_end+0xf800794c>
100079d0:	10bfff04 	addi	r2,r2,-4
100079d4:	21000104 	addi	r4,r4,4
100079d8:	58bff636 	bltu	r11,r2,100079b4 <__alt_data_end+0xf80079b4>
100079dc:	003fdb06 	br	1000794c <__alt_data_end+0xf800794c>
100079e0:	3005883a 	mov	r2,r6
100079e4:	003fd706 	br	10007944 <__alt_data_end+0xf8007944>

100079e8 <memcpy>:
100079e8:	00c003c4 	movi	r3,15
100079ec:	2005883a 	mov	r2,r4
100079f0:	1980372e 	bgeu	r3,r6,10007ad0 <memcpy+0xe8>
100079f4:	2146b03a 	or	r3,r4,r5
100079f8:	18c000cc 	andi	r3,r3,3
100079fc:	1800371e 	bne	r3,zero,10007adc <memcpy+0xf4>
10007a00:	327ffc04 	addi	r9,r6,-16
10007a04:	4812d13a 	srli	r9,r9,4
10007a08:	2007883a 	mov	r3,r4
10007a0c:	280f883a 	mov	r7,r5
10007a10:	4808913a 	slli	r4,r9,4
10007a14:	1109883a 	add	r4,r2,r4
10007a18:	21000404 	addi	r4,r4,16
10007a1c:	3a000017 	ldw	r8,0(r7)
10007a20:	18c00404 	addi	r3,r3,16
10007a24:	39c00404 	addi	r7,r7,16
10007a28:	1a3ffc15 	stw	r8,-16(r3)
10007a2c:	3a3ffd17 	ldw	r8,-12(r7)
10007a30:	1a3ffd15 	stw	r8,-12(r3)
10007a34:	3a3ffe17 	ldw	r8,-8(r7)
10007a38:	1a3ffe15 	stw	r8,-8(r3)
10007a3c:	3a3fff17 	ldw	r8,-4(r7)
10007a40:	1a3fff15 	stw	r8,-4(r3)
10007a44:	193ff51e 	bne	r3,r4,10007a1c <__alt_data_end+0xf8007a1c>
10007a48:	49000044 	addi	r4,r9,1
10007a4c:	2008913a 	slli	r4,r4,4
10007a50:	328003cc 	andi	r10,r6,15
10007a54:	1107883a 	add	r3,r2,r4
10007a58:	290b883a 	add	r5,r5,r4
10007a5c:	010000c4 	movi	r4,3
10007a60:	2280212e 	bgeu	r4,r10,10007ae8 <memcpy+0x100>
10007a64:	52bfff04 	addi	r10,r10,-4
10007a68:	5014d0ba 	srli	r10,r10,2
10007a6c:	180f883a 	mov	r7,r3
10007a70:	2811883a 	mov	r8,r5
10007a74:	5289883a 	add	r4,r10,r10
10007a78:	2109883a 	add	r4,r4,r4
10007a7c:	21000104 	addi	r4,r4,4
10007a80:	1909883a 	add	r4,r3,r4
10007a84:	42400017 	ldw	r9,0(r8)
10007a88:	39c00104 	addi	r7,r7,4
10007a8c:	42000104 	addi	r8,r8,4
10007a90:	3a7fff15 	stw	r9,-4(r7)
10007a94:	393ffb1e 	bne	r7,r4,10007a84 <__alt_data_end+0xf8007a84>
10007a98:	51000044 	addi	r4,r10,1
10007a9c:	2109883a 	add	r4,r4,r4
10007aa0:	2109883a 	add	r4,r4,r4
10007aa4:	318000cc 	andi	r6,r6,3
10007aa8:	1907883a 	add	r3,r3,r4
10007aac:	290b883a 	add	r5,r5,r4
10007ab0:	30000c26 	beq	r6,zero,10007ae4 <memcpy+0xfc>
10007ab4:	298d883a 	add	r6,r5,r6
10007ab8:	29c00003 	ldbu	r7,0(r5)
10007abc:	18c00044 	addi	r3,r3,1
10007ac0:	29400044 	addi	r5,r5,1
10007ac4:	19ffffc5 	stb	r7,-1(r3)
10007ac8:	29bffb1e 	bne	r5,r6,10007ab8 <__alt_data_end+0xf8007ab8>
10007acc:	f800283a 	ret
10007ad0:	2007883a 	mov	r3,r4
10007ad4:	303ff71e 	bne	r6,zero,10007ab4 <__alt_data_end+0xf8007ab4>
10007ad8:	00000206 	br	10007ae4 <memcpy+0xfc>
10007adc:	2007883a 	mov	r3,r4
10007ae0:	003ff406 	br	10007ab4 <__alt_data_end+0xf8007ab4>
10007ae4:	f800283a 	ret
10007ae8:	500d883a 	mov	r6,r10
10007aec:	303ff11e 	bne	r6,zero,10007ab4 <__alt_data_end+0xf8007ab4>
10007af0:	003ffc06 	br	10007ae4 <__alt_data_end+0xf8007ae4>

10007af4 <memmove>:
10007af4:	2005883a 	mov	r2,r4
10007af8:	29000b2e 	bgeu	r5,r4,10007b28 <memmove+0x34>
10007afc:	298f883a 	add	r7,r5,r6
10007b00:	21c0092e 	bgeu	r4,r7,10007b28 <memmove+0x34>
10007b04:	2187883a 	add	r3,r4,r6
10007b08:	198bc83a 	sub	r5,r3,r6
10007b0c:	30003e26 	beq	r6,zero,10007c08 <memmove+0x114>
10007b10:	39ffffc4 	addi	r7,r7,-1
10007b14:	39000003 	ldbu	r4,0(r7)
10007b18:	18ffffc4 	addi	r3,r3,-1
10007b1c:	19000005 	stb	r4,0(r3)
10007b20:	197ffb1e 	bne	r3,r5,10007b10 <__alt_data_end+0xf8007b10>
10007b24:	f800283a 	ret
10007b28:	00c003c4 	movi	r3,15
10007b2c:	1980372e 	bgeu	r3,r6,10007c0c <memmove+0x118>
10007b30:	1146b03a 	or	r3,r2,r5
10007b34:	18c000cc 	andi	r3,r3,3
10007b38:	1800371e 	bne	r3,zero,10007c18 <memmove+0x124>
10007b3c:	327ffc04 	addi	r9,r6,-16
10007b40:	4812d13a 	srli	r9,r9,4
10007b44:	280f883a 	mov	r7,r5
10007b48:	1007883a 	mov	r3,r2
10007b4c:	4810913a 	slli	r8,r9,4
10007b50:	1211883a 	add	r8,r2,r8
10007b54:	42000404 	addi	r8,r8,16
10007b58:	39000017 	ldw	r4,0(r7)
10007b5c:	18c00404 	addi	r3,r3,16
10007b60:	39c00404 	addi	r7,r7,16
10007b64:	193ffc15 	stw	r4,-16(r3)
10007b68:	393ffd17 	ldw	r4,-12(r7)
10007b6c:	193ffd15 	stw	r4,-12(r3)
10007b70:	393ffe17 	ldw	r4,-8(r7)
10007b74:	193ffe15 	stw	r4,-8(r3)
10007b78:	393fff17 	ldw	r4,-4(r7)
10007b7c:	193fff15 	stw	r4,-4(r3)
10007b80:	1a3ff51e 	bne	r3,r8,10007b58 <__alt_data_end+0xf8007b58>
10007b84:	49000044 	addi	r4,r9,1
10007b88:	2008913a 	slli	r4,r4,4
10007b8c:	328003cc 	andi	r10,r6,15
10007b90:	1107883a 	add	r3,r2,r4
10007b94:	290b883a 	add	r5,r5,r4
10007b98:	010000c4 	movi	r4,3
10007b9c:	2280212e 	bgeu	r4,r10,10007c24 <memmove+0x130>
10007ba0:	52bfff04 	addi	r10,r10,-4
10007ba4:	5014d0ba 	srli	r10,r10,2
10007ba8:	180f883a 	mov	r7,r3
10007bac:	2809883a 	mov	r4,r5
10007bb0:	5291883a 	add	r8,r10,r10
10007bb4:	4211883a 	add	r8,r8,r8
10007bb8:	42400104 	addi	r9,r8,4
10007bbc:	1a53883a 	add	r9,r3,r9
10007bc0:	22000017 	ldw	r8,0(r4)
10007bc4:	39c00104 	addi	r7,r7,4
10007bc8:	21000104 	addi	r4,r4,4
10007bcc:	3a3fff15 	stw	r8,-4(r7)
10007bd0:	3a7ffb1e 	bne	r7,r9,10007bc0 <__alt_data_end+0xf8007bc0>
10007bd4:	51000044 	addi	r4,r10,1
10007bd8:	2109883a 	add	r4,r4,r4
10007bdc:	2109883a 	add	r4,r4,r4
10007be0:	318000cc 	andi	r6,r6,3
10007be4:	1907883a 	add	r3,r3,r4
10007be8:	290b883a 	add	r5,r5,r4
10007bec:	30000c26 	beq	r6,zero,10007c20 <memmove+0x12c>
10007bf0:	198d883a 	add	r6,r3,r6
10007bf4:	29c00003 	ldbu	r7,0(r5)
10007bf8:	18c00044 	addi	r3,r3,1
10007bfc:	29400044 	addi	r5,r5,1
10007c00:	19ffffc5 	stb	r7,-1(r3)
10007c04:	19bffb1e 	bne	r3,r6,10007bf4 <__alt_data_end+0xf8007bf4>
10007c08:	f800283a 	ret
10007c0c:	1007883a 	mov	r3,r2
10007c10:	303ff71e 	bne	r6,zero,10007bf0 <__alt_data_end+0xf8007bf0>
10007c14:	00000206 	br	10007c20 <memmove+0x12c>
10007c18:	1007883a 	mov	r3,r2
10007c1c:	003ff406 	br	10007bf0 <__alt_data_end+0xf8007bf0>
10007c20:	f800283a 	ret
10007c24:	500d883a 	mov	r6,r10
10007c28:	303ff11e 	bne	r6,zero,10007bf0 <__alt_data_end+0xf8007bf0>
10007c2c:	003ffc06 	br	10007c20 <__alt_data_end+0xf8007c20>

10007c30 <memset>:
10007c30:	20c000cc 	andi	r3,r4,3
10007c34:	2005883a 	mov	r2,r4
10007c38:	18003f26 	beq	r3,zero,10007d38 <memset+0x108>
10007c3c:	31ffffc4 	addi	r7,r6,-1
10007c40:	30003b26 	beq	r6,zero,10007d30 <memset+0x100>
10007c44:	2813883a 	mov	r9,r5
10007c48:	200d883a 	mov	r6,r4
10007c4c:	2007883a 	mov	r3,r4
10007c50:	00000406 	br	10007c64 <memset+0x34>
10007c54:	3a3fffc4 	addi	r8,r7,-1
10007c58:	31800044 	addi	r6,r6,1
10007c5c:	38003426 	beq	r7,zero,10007d30 <memset+0x100>
10007c60:	400f883a 	mov	r7,r8
10007c64:	18c00044 	addi	r3,r3,1
10007c68:	32400005 	stb	r9,0(r6)
10007c6c:	1a0000cc 	andi	r8,r3,3
10007c70:	403ff81e 	bne	r8,zero,10007c54 <__alt_data_end+0xf8007c54>
10007c74:	010000c4 	movi	r4,3
10007c78:	21c0282e 	bgeu	r4,r7,10007d1c <memset+0xec>
10007c7c:	29003fcc 	andi	r4,r5,255
10007c80:	2010923a 	slli	r8,r4,8
10007c84:	4108b03a 	or	r4,r8,r4
10007c88:	2010943a 	slli	r8,r4,16
10007c8c:	4110b03a 	or	r8,r8,r4
10007c90:	010003c4 	movi	r4,15
10007c94:	21c0122e 	bgeu	r4,r7,10007ce0 <memset+0xb0>
10007c98:	3a7ffc04 	addi	r9,r7,-16
10007c9c:	4812d13a 	srli	r9,r9,4
10007ca0:	19000404 	addi	r4,r3,16
10007ca4:	180d883a 	mov	r6,r3
10007ca8:	4814913a 	slli	r10,r9,4
10007cac:	2289883a 	add	r4,r4,r10
10007cb0:	32000015 	stw	r8,0(r6)
10007cb4:	32000115 	stw	r8,4(r6)
10007cb8:	32000215 	stw	r8,8(r6)
10007cbc:	32000315 	stw	r8,12(r6)
10007cc0:	31800404 	addi	r6,r6,16
10007cc4:	313ffa1e 	bne	r6,r4,10007cb0 <__alt_data_end+0xf8007cb0>
10007cc8:	4a400044 	addi	r9,r9,1
10007ccc:	4812913a 	slli	r9,r9,4
10007cd0:	39c003cc 	andi	r7,r7,15
10007cd4:	010000c4 	movi	r4,3
10007cd8:	1a47883a 	add	r3,r3,r9
10007cdc:	21c00f2e 	bgeu	r4,r7,10007d1c <memset+0xec>
10007ce0:	3a7fff04 	addi	r9,r7,-4
10007ce4:	4812d0ba 	srli	r9,r9,2
10007ce8:	19000104 	addi	r4,r3,4
10007cec:	180d883a 	mov	r6,r3
10007cf0:	4a55883a 	add	r10,r9,r9
10007cf4:	5295883a 	add	r10,r10,r10
10007cf8:	2289883a 	add	r4,r4,r10
10007cfc:	32000015 	stw	r8,0(r6)
10007d00:	31800104 	addi	r6,r6,4
10007d04:	313ffd1e 	bne	r6,r4,10007cfc <__alt_data_end+0xf8007cfc>
10007d08:	4a400044 	addi	r9,r9,1
10007d0c:	4a53883a 	add	r9,r9,r9
10007d10:	4a53883a 	add	r9,r9,r9
10007d14:	1a47883a 	add	r3,r3,r9
10007d18:	39c000cc 	andi	r7,r7,3
10007d1c:	38000526 	beq	r7,zero,10007d34 <memset+0x104>
10007d20:	19cf883a 	add	r7,r3,r7
10007d24:	19400005 	stb	r5,0(r3)
10007d28:	18c00044 	addi	r3,r3,1
10007d2c:	19fffd1e 	bne	r3,r7,10007d24 <__alt_data_end+0xf8007d24>
10007d30:	f800283a 	ret
10007d34:	f800283a 	ret
10007d38:	2007883a 	mov	r3,r4
10007d3c:	300f883a 	mov	r7,r6
10007d40:	003fcc06 	br	10007c74 <__alt_data_end+0xf8007c74>

10007d44 <_Balloc>:
10007d44:	20801317 	ldw	r2,76(r4)
10007d48:	defffc04 	addi	sp,sp,-16
10007d4c:	dc400115 	stw	r17,4(sp)
10007d50:	dc000015 	stw	r16,0(sp)
10007d54:	dfc00315 	stw	ra,12(sp)
10007d58:	dc800215 	stw	r18,8(sp)
10007d5c:	2023883a 	mov	r17,r4
10007d60:	2821883a 	mov	r16,r5
10007d64:	10000f26 	beq	r2,zero,10007da4 <_Balloc+0x60>
10007d68:	8407883a 	add	r3,r16,r16
10007d6c:	18c7883a 	add	r3,r3,r3
10007d70:	10c7883a 	add	r3,r2,r3
10007d74:	18800017 	ldw	r2,0(r3)
10007d78:	10001126 	beq	r2,zero,10007dc0 <_Balloc+0x7c>
10007d7c:	11000017 	ldw	r4,0(r2)
10007d80:	19000015 	stw	r4,0(r3)
10007d84:	10000415 	stw	zero,16(r2)
10007d88:	10000315 	stw	zero,12(r2)
10007d8c:	dfc00317 	ldw	ra,12(sp)
10007d90:	dc800217 	ldw	r18,8(sp)
10007d94:	dc400117 	ldw	r17,4(sp)
10007d98:	dc000017 	ldw	r16,0(sp)
10007d9c:	dec00404 	addi	sp,sp,16
10007da0:	f800283a 	ret
10007da4:	01400104 	movi	r5,4
10007da8:	01800844 	movi	r6,33
10007dac:	000abcc0 	call	1000abcc <_calloc_r>
10007db0:	88801315 	stw	r2,76(r17)
10007db4:	103fec1e 	bne	r2,zero,10007d68 <__alt_data_end+0xf8007d68>
10007db8:	0005883a 	mov	r2,zero
10007dbc:	003ff306 	br	10007d8c <__alt_data_end+0xf8007d8c>
10007dc0:	01400044 	movi	r5,1
10007dc4:	2c24983a 	sll	r18,r5,r16
10007dc8:	8809883a 	mov	r4,r17
10007dcc:	91800144 	addi	r6,r18,5
10007dd0:	318d883a 	add	r6,r6,r6
10007dd4:	318d883a 	add	r6,r6,r6
10007dd8:	000abcc0 	call	1000abcc <_calloc_r>
10007ddc:	103ff626 	beq	r2,zero,10007db8 <__alt_data_end+0xf8007db8>
10007de0:	14000115 	stw	r16,4(r2)
10007de4:	14800215 	stw	r18,8(r2)
10007de8:	003fe606 	br	10007d84 <__alt_data_end+0xf8007d84>

10007dec <_Bfree>:
10007dec:	28000826 	beq	r5,zero,10007e10 <_Bfree+0x24>
10007df0:	28c00117 	ldw	r3,4(r5)
10007df4:	20801317 	ldw	r2,76(r4)
10007df8:	18c7883a 	add	r3,r3,r3
10007dfc:	18c7883a 	add	r3,r3,r3
10007e00:	10c5883a 	add	r2,r2,r3
10007e04:	10c00017 	ldw	r3,0(r2)
10007e08:	28c00015 	stw	r3,0(r5)
10007e0c:	11400015 	stw	r5,0(r2)
10007e10:	f800283a 	ret

10007e14 <__multadd>:
10007e14:	defff604 	addi	sp,sp,-40
10007e18:	dd400515 	stw	r21,20(sp)
10007e1c:	2d400417 	ldw	r21,16(r5)
10007e20:	df000815 	stw	fp,32(sp)
10007e24:	ddc00715 	stw	r23,28(sp)
10007e28:	dd800615 	stw	r22,24(sp)
10007e2c:	dd000415 	stw	r20,16(sp)
10007e30:	dc400115 	stw	r17,4(sp)
10007e34:	dc000015 	stw	r16,0(sp)
10007e38:	dfc00915 	stw	ra,36(sp)
10007e3c:	dcc00315 	stw	r19,12(sp)
10007e40:	dc800215 	stw	r18,8(sp)
10007e44:	282d883a 	mov	r22,r5
10007e48:	202f883a 	mov	r23,r4
10007e4c:	3029883a 	mov	r20,r6
10007e50:	3839883a 	mov	fp,r7
10007e54:	2c000504 	addi	r16,r5,20
10007e58:	0023883a 	mov	r17,zero
10007e5c:	84c00017 	ldw	r19,0(r16)
10007e60:	a00b883a 	mov	r5,r20
10007e64:	8c400044 	addi	r17,r17,1
10007e68:	993fffcc 	andi	r4,r19,65535
10007e6c:	000c2b80 	call	1000c2b8 <__mulsi3>
10007e70:	1725883a 	add	r18,r2,fp
10007e74:	9808d43a 	srli	r4,r19,16
10007e78:	9026d43a 	srli	r19,r18,16
10007e7c:	a00b883a 	mov	r5,r20
10007e80:	000c2b80 	call	1000c2b8 <__mulsi3>
10007e84:	988f883a 	add	r7,r19,r2
10007e88:	3804943a 	slli	r2,r7,16
10007e8c:	94bfffcc 	andi	r18,r18,65535
10007e90:	3838d43a 	srli	fp,r7,16
10007e94:	14a5883a 	add	r18,r2,r18
10007e98:	84800015 	stw	r18,0(r16)
10007e9c:	84000104 	addi	r16,r16,4
10007ea0:	8d7fee16 	blt	r17,r21,10007e5c <__alt_data_end+0xf8007e5c>
10007ea4:	e0000926 	beq	fp,zero,10007ecc <__multadd+0xb8>
10007ea8:	b0800217 	ldw	r2,8(r22)
10007eac:	a880140e 	bge	r21,r2,10007f00 <__multadd+0xec>
10007eb0:	a8800144 	addi	r2,r21,5
10007eb4:	1085883a 	add	r2,r2,r2
10007eb8:	1085883a 	add	r2,r2,r2
10007ebc:	b085883a 	add	r2,r22,r2
10007ec0:	17000015 	stw	fp,0(r2)
10007ec4:	ad400044 	addi	r21,r21,1
10007ec8:	b5400415 	stw	r21,16(r22)
10007ecc:	b005883a 	mov	r2,r22
10007ed0:	dfc00917 	ldw	ra,36(sp)
10007ed4:	df000817 	ldw	fp,32(sp)
10007ed8:	ddc00717 	ldw	r23,28(sp)
10007edc:	dd800617 	ldw	r22,24(sp)
10007ee0:	dd400517 	ldw	r21,20(sp)
10007ee4:	dd000417 	ldw	r20,16(sp)
10007ee8:	dcc00317 	ldw	r19,12(sp)
10007eec:	dc800217 	ldw	r18,8(sp)
10007ef0:	dc400117 	ldw	r17,4(sp)
10007ef4:	dc000017 	ldw	r16,0(sp)
10007ef8:	dec00a04 	addi	sp,sp,40
10007efc:	f800283a 	ret
10007f00:	b1400117 	ldw	r5,4(r22)
10007f04:	b809883a 	mov	r4,r23
10007f08:	29400044 	addi	r5,r5,1
10007f0c:	0007d440 	call	10007d44 <_Balloc>
10007f10:	b1800417 	ldw	r6,16(r22)
10007f14:	b1400304 	addi	r5,r22,12
10007f18:	11000304 	addi	r4,r2,12
10007f1c:	31800084 	addi	r6,r6,2
10007f20:	318d883a 	add	r6,r6,r6
10007f24:	318d883a 	add	r6,r6,r6
10007f28:	1021883a 	mov	r16,r2
10007f2c:	00079e80 	call	100079e8 <memcpy>
10007f30:	b0c00117 	ldw	r3,4(r22)
10007f34:	b8801317 	ldw	r2,76(r23)
10007f38:	18c7883a 	add	r3,r3,r3
10007f3c:	18c7883a 	add	r3,r3,r3
10007f40:	10c5883a 	add	r2,r2,r3
10007f44:	10c00017 	ldw	r3,0(r2)
10007f48:	b0c00015 	stw	r3,0(r22)
10007f4c:	15800015 	stw	r22,0(r2)
10007f50:	802d883a 	mov	r22,r16
10007f54:	003fd606 	br	10007eb0 <__alt_data_end+0xf8007eb0>

10007f58 <__s2b>:
10007f58:	defff904 	addi	sp,sp,-28
10007f5c:	dd000415 	stw	r20,16(sp)
10007f60:	dc400115 	stw	r17,4(sp)
10007f64:	2829883a 	mov	r20,r5
10007f68:	2023883a 	mov	r17,r4
10007f6c:	01400244 	movi	r5,9
10007f70:	39000204 	addi	r4,r7,8
10007f74:	dcc00315 	stw	r19,12(sp)
10007f78:	dc800215 	stw	r18,8(sp)
10007f7c:	dfc00615 	stw	ra,24(sp)
10007f80:	dd400515 	stw	r21,20(sp)
10007f84:	dc000015 	stw	r16,0(sp)
10007f88:	3827883a 	mov	r19,r7
10007f8c:	3025883a 	mov	r18,r6
10007f90:	000c2140 	call	1000c214 <__divsi3>
10007f94:	00c00044 	movi	r3,1
10007f98:	000b883a 	mov	r5,zero
10007f9c:	1880030e 	bge	r3,r2,10007fac <__s2b+0x54>
10007fa0:	18c7883a 	add	r3,r3,r3
10007fa4:	29400044 	addi	r5,r5,1
10007fa8:	18bffd16 	blt	r3,r2,10007fa0 <__alt_data_end+0xf8007fa0>
10007fac:	8809883a 	mov	r4,r17
10007fb0:	0007d440 	call	10007d44 <_Balloc>
10007fb4:	d8c00717 	ldw	r3,28(sp)
10007fb8:	10c00515 	stw	r3,20(r2)
10007fbc:	00c00044 	movi	r3,1
10007fc0:	10c00415 	stw	r3,16(r2)
10007fc4:	00c00244 	movi	r3,9
10007fc8:	1c80210e 	bge	r3,r18,10008050 <__s2b+0xf8>
10007fcc:	a0eb883a 	add	r21,r20,r3
10007fd0:	a821883a 	mov	r16,r21
10007fd4:	a4a9883a 	add	r20,r20,r18
10007fd8:	81c00007 	ldb	r7,0(r16)
10007fdc:	8809883a 	mov	r4,r17
10007fe0:	84000044 	addi	r16,r16,1
10007fe4:	100b883a 	mov	r5,r2
10007fe8:	01800284 	movi	r6,10
10007fec:	39fff404 	addi	r7,r7,-48
10007ff0:	0007e140 	call	10007e14 <__multadd>
10007ff4:	853ff81e 	bne	r16,r20,10007fd8 <__alt_data_end+0xf8007fd8>
10007ff8:	aca1883a 	add	r16,r21,r18
10007ffc:	843ffe04 	addi	r16,r16,-8
10008000:	94c00a0e 	bge	r18,r19,1000802c <__s2b+0xd4>
10008004:	84e7883a 	add	r19,r16,r19
10008008:	9ca5c83a 	sub	r18,r19,r18
1000800c:	81c00007 	ldb	r7,0(r16)
10008010:	8809883a 	mov	r4,r17
10008014:	84000044 	addi	r16,r16,1
10008018:	100b883a 	mov	r5,r2
1000801c:	01800284 	movi	r6,10
10008020:	39fff404 	addi	r7,r7,-48
10008024:	0007e140 	call	10007e14 <__multadd>
10008028:	84bff81e 	bne	r16,r18,1000800c <__alt_data_end+0xf800800c>
1000802c:	dfc00617 	ldw	ra,24(sp)
10008030:	dd400517 	ldw	r21,20(sp)
10008034:	dd000417 	ldw	r20,16(sp)
10008038:	dcc00317 	ldw	r19,12(sp)
1000803c:	dc800217 	ldw	r18,8(sp)
10008040:	dc400117 	ldw	r17,4(sp)
10008044:	dc000017 	ldw	r16,0(sp)
10008048:	dec00704 	addi	sp,sp,28
1000804c:	f800283a 	ret
10008050:	a4000284 	addi	r16,r20,10
10008054:	1825883a 	mov	r18,r3
10008058:	003fe906 	br	10008000 <__alt_data_end+0xf8008000>

1000805c <__hi0bits>:
1000805c:	20bfffec 	andhi	r2,r4,65535
10008060:	1000141e 	bne	r2,zero,100080b4 <__hi0bits+0x58>
10008064:	2008943a 	slli	r4,r4,16
10008068:	00800404 	movi	r2,16
1000806c:	20ffc02c 	andhi	r3,r4,65280
10008070:	1800021e 	bne	r3,zero,1000807c <__hi0bits+0x20>
10008074:	2008923a 	slli	r4,r4,8
10008078:	10800204 	addi	r2,r2,8
1000807c:	20fc002c 	andhi	r3,r4,61440
10008080:	1800021e 	bne	r3,zero,1000808c <__hi0bits+0x30>
10008084:	2008913a 	slli	r4,r4,4
10008088:	10800104 	addi	r2,r2,4
1000808c:	20f0002c 	andhi	r3,r4,49152
10008090:	1800031e 	bne	r3,zero,100080a0 <__hi0bits+0x44>
10008094:	2109883a 	add	r4,r4,r4
10008098:	10800084 	addi	r2,r2,2
1000809c:	2109883a 	add	r4,r4,r4
100080a0:	20000316 	blt	r4,zero,100080b0 <__hi0bits+0x54>
100080a4:	2110002c 	andhi	r4,r4,16384
100080a8:	2000041e 	bne	r4,zero,100080bc <__hi0bits+0x60>
100080ac:	00800804 	movi	r2,32
100080b0:	f800283a 	ret
100080b4:	0005883a 	mov	r2,zero
100080b8:	003fec06 	br	1000806c <__alt_data_end+0xf800806c>
100080bc:	10800044 	addi	r2,r2,1
100080c0:	f800283a 	ret

100080c4 <__lo0bits>:
100080c4:	20c00017 	ldw	r3,0(r4)
100080c8:	188001cc 	andi	r2,r3,7
100080cc:	10000826 	beq	r2,zero,100080f0 <__lo0bits+0x2c>
100080d0:	1880004c 	andi	r2,r3,1
100080d4:	1000211e 	bne	r2,zero,1000815c <__lo0bits+0x98>
100080d8:	1880008c 	andi	r2,r3,2
100080dc:	1000211e 	bne	r2,zero,10008164 <__lo0bits+0xa0>
100080e0:	1806d0ba 	srli	r3,r3,2
100080e4:	00800084 	movi	r2,2
100080e8:	20c00015 	stw	r3,0(r4)
100080ec:	f800283a 	ret
100080f0:	18bfffcc 	andi	r2,r3,65535
100080f4:	10001326 	beq	r2,zero,10008144 <__lo0bits+0x80>
100080f8:	0005883a 	mov	r2,zero
100080fc:	19403fcc 	andi	r5,r3,255
10008100:	2800021e 	bne	r5,zero,1000810c <__lo0bits+0x48>
10008104:	1806d23a 	srli	r3,r3,8
10008108:	10800204 	addi	r2,r2,8
1000810c:	194003cc 	andi	r5,r3,15
10008110:	2800021e 	bne	r5,zero,1000811c <__lo0bits+0x58>
10008114:	1806d13a 	srli	r3,r3,4
10008118:	10800104 	addi	r2,r2,4
1000811c:	194000cc 	andi	r5,r3,3
10008120:	2800021e 	bne	r5,zero,1000812c <__lo0bits+0x68>
10008124:	1806d0ba 	srli	r3,r3,2
10008128:	10800084 	addi	r2,r2,2
1000812c:	1940004c 	andi	r5,r3,1
10008130:	2800081e 	bne	r5,zero,10008154 <__lo0bits+0x90>
10008134:	1806d07a 	srli	r3,r3,1
10008138:	1800051e 	bne	r3,zero,10008150 <__lo0bits+0x8c>
1000813c:	00800804 	movi	r2,32
10008140:	f800283a 	ret
10008144:	1806d43a 	srli	r3,r3,16
10008148:	00800404 	movi	r2,16
1000814c:	003feb06 	br	100080fc <__alt_data_end+0xf80080fc>
10008150:	10800044 	addi	r2,r2,1
10008154:	20c00015 	stw	r3,0(r4)
10008158:	f800283a 	ret
1000815c:	0005883a 	mov	r2,zero
10008160:	f800283a 	ret
10008164:	1806d07a 	srli	r3,r3,1
10008168:	00800044 	movi	r2,1
1000816c:	20c00015 	stw	r3,0(r4)
10008170:	f800283a 	ret

10008174 <__i2b>:
10008174:	defffd04 	addi	sp,sp,-12
10008178:	dc000015 	stw	r16,0(sp)
1000817c:	04000044 	movi	r16,1
10008180:	dc400115 	stw	r17,4(sp)
10008184:	2823883a 	mov	r17,r5
10008188:	800b883a 	mov	r5,r16
1000818c:	dfc00215 	stw	ra,8(sp)
10008190:	0007d440 	call	10007d44 <_Balloc>
10008194:	14400515 	stw	r17,20(r2)
10008198:	14000415 	stw	r16,16(r2)
1000819c:	dfc00217 	ldw	ra,8(sp)
100081a0:	dc400117 	ldw	r17,4(sp)
100081a4:	dc000017 	ldw	r16,0(sp)
100081a8:	dec00304 	addi	sp,sp,12
100081ac:	f800283a 	ret

100081b0 <__multiply>:
100081b0:	defff004 	addi	sp,sp,-64
100081b4:	dc400715 	stw	r17,28(sp)
100081b8:	dc000615 	stw	r16,24(sp)
100081bc:	34400417 	ldw	r17,16(r6)
100081c0:	2c000417 	ldw	r16,16(r5)
100081c4:	df000e15 	stw	fp,56(sp)
100081c8:	dd000a15 	stw	r20,40(sp)
100081cc:	dfc00f15 	stw	ra,60(sp)
100081d0:	ddc00d15 	stw	r23,52(sp)
100081d4:	dd800c15 	stw	r22,48(sp)
100081d8:	dd400b15 	stw	r21,44(sp)
100081dc:	dcc00915 	stw	r19,36(sp)
100081e0:	dc800815 	stw	r18,32(sp)
100081e4:	2839883a 	mov	fp,r5
100081e8:	3029883a 	mov	r20,r6
100081ec:	8440050e 	bge	r16,r17,10008204 <__multiply+0x54>
100081f0:	8007883a 	mov	r3,r16
100081f4:	3039883a 	mov	fp,r6
100081f8:	8821883a 	mov	r16,r17
100081fc:	2829883a 	mov	r20,r5
10008200:	1823883a 	mov	r17,r3
10008204:	e0800217 	ldw	r2,8(fp)
10008208:	8447883a 	add	r3,r16,r17
1000820c:	d8c00115 	stw	r3,4(sp)
10008210:	e1400117 	ldw	r5,4(fp)
10008214:	10c0010e 	bge	r2,r3,1000821c <__multiply+0x6c>
10008218:	29400044 	addi	r5,r5,1
1000821c:	0007d440 	call	10007d44 <_Balloc>
10008220:	d8c00117 	ldw	r3,4(sp)
10008224:	d8800515 	stw	r2,20(sp)
10008228:	18ef883a 	add	r23,r3,r3
1000822c:	bdef883a 	add	r23,r23,r23
10008230:	10c00504 	addi	r3,r2,20
10008234:	1def883a 	add	r23,r3,r23
10008238:	d8c00015 	stw	r3,0(sp)
1000823c:	ddc00215 	stw	r23,8(sp)
10008240:	1805883a 	mov	r2,r3
10008244:	1dc0042e 	bgeu	r3,r23,10008258 <__multiply+0xa8>
10008248:	d8c00217 	ldw	r3,8(sp)
1000824c:	10000015 	stw	zero,0(r2)
10008250:	10800104 	addi	r2,r2,4
10008254:	10fffc36 	bltu	r2,r3,10008248 <__alt_data_end+0xf8008248>
10008258:	8c63883a 	add	r17,r17,r17
1000825c:	a5000504 	addi	r20,r20,20
10008260:	8c63883a 	add	r17,r17,r17
10008264:	e7000504 	addi	fp,fp,20
10008268:	8421883a 	add	r16,r16,r16
1000826c:	a463883a 	add	r17,r20,r17
10008270:	8421883a 	add	r16,r16,r16
10008274:	df000315 	stw	fp,12(sp)
10008278:	dc400415 	stw	r17,16(sp)
1000827c:	e425883a 	add	r18,fp,r16
10008280:	a440482e 	bgeu	r20,r17,100083a4 <__multiply+0x1f4>
10008284:	a4000017 	ldw	r16,0(r20)
10008288:	847fffcc 	andi	r17,r16,65535
1000828c:	88001d26 	beq	r17,zero,10008304 <__multiply+0x154>
10008290:	dc000017 	ldw	r16,0(sp)
10008294:	dcc00317 	ldw	r19,12(sp)
10008298:	002b883a 	mov	r21,zero
1000829c:	9dc00017 	ldw	r23,0(r19)
100082a0:	85800017 	ldw	r22,0(r16)
100082a4:	880b883a 	mov	r5,r17
100082a8:	b93fffcc 	andi	r4,r23,65535
100082ac:	000c2b80 	call	1000c2b8 <__mulsi3>
100082b0:	b808d43a 	srli	r4,r23,16
100082b4:	b0ffffcc 	andi	r3,r22,65535
100082b8:	1885883a 	add	r2,r3,r2
100082bc:	880b883a 	mov	r5,r17
100082c0:	156b883a 	add	r21,r2,r21
100082c4:	b02cd43a 	srli	r22,r22,16
100082c8:	000c2b80 	call	1000c2b8 <__mulsi3>
100082cc:	a808d43a 	srli	r4,r21,16
100082d0:	b085883a 	add	r2,r22,r2
100082d4:	a8ffffcc 	andi	r3,r21,65535
100082d8:	110d883a 	add	r6,r2,r4
100082dc:	3004943a 	slli	r2,r6,16
100082e0:	9cc00104 	addi	r19,r19,4
100082e4:	8009883a 	mov	r4,r16
100082e8:	10c6b03a 	or	r3,r2,r3
100082ec:	80c00015 	stw	r3,0(r16)
100082f0:	302ad43a 	srli	r21,r6,16
100082f4:	84000104 	addi	r16,r16,4
100082f8:	9cbfe836 	bltu	r19,r18,1000829c <__alt_data_end+0xf800829c>
100082fc:	25400115 	stw	r21,4(r4)
10008300:	a4000017 	ldw	r16,0(r20)
10008304:	8020d43a 	srli	r16,r16,16
10008308:	80002026 	beq	r16,zero,1000838c <__multiply+0x1dc>
1000830c:	d8c00017 	ldw	r3,0(sp)
10008310:	dd400317 	ldw	r21,12(sp)
10008314:	002f883a 	mov	r23,zero
10008318:	1f000017 	ldw	fp,0(r3)
1000831c:	182d883a 	mov	r22,r3
10008320:	e023883a 	mov	r17,fp
10008324:	a900000b 	ldhu	r4,0(r21)
10008328:	8822d43a 	srli	r17,r17,16
1000832c:	800b883a 	mov	r5,r16
10008330:	000c2b80 	call	1000c2b8 <__mulsi3>
10008334:	1445883a 	add	r2,r2,r17
10008338:	15ef883a 	add	r23,r2,r23
1000833c:	b804943a 	slli	r2,r23,16
10008340:	e1ffffcc 	andi	r7,fp,65535
10008344:	ad400104 	addi	r21,r21,4
10008348:	11ceb03a 	or	r7,r2,r7
1000834c:	b1c00015 	stw	r7,0(r22)
10008350:	a93fff17 	ldw	r4,-4(r21)
10008354:	b7000117 	ldw	fp,4(r22)
10008358:	800b883a 	mov	r5,r16
1000835c:	2008d43a 	srli	r4,r4,16
10008360:	e023883a 	mov	r17,fp
10008364:	b027883a 	mov	r19,r22
10008368:	000c2b80 	call	1000c2b8 <__mulsi3>
1000836c:	b812d43a 	srli	r9,r23,16
10008370:	e23fffcc 	andi	r8,fp,65535
10008374:	1205883a 	add	r2,r2,r8
10008378:	1279883a 	add	fp,r2,r9
1000837c:	b5800104 	addi	r22,r22,4
10008380:	e02ed43a 	srli	r23,fp,16
10008384:	acbfe736 	bltu	r21,r18,10008324 <__alt_data_end+0xf8008324>
10008388:	9f000115 	stw	fp,4(r19)
1000838c:	d8c00017 	ldw	r3,0(sp)
10008390:	a5000104 	addi	r20,r20,4
10008394:	18c00104 	addi	r3,r3,4
10008398:	d8c00015 	stw	r3,0(sp)
1000839c:	d8c00417 	ldw	r3,16(sp)
100083a0:	a0ffb836 	bltu	r20,r3,10008284 <__alt_data_end+0xf8008284>
100083a4:	d8c00117 	ldw	r3,4(sp)
100083a8:	00c00c0e 	bge	zero,r3,100083dc <__multiply+0x22c>
100083ac:	d8c00217 	ldw	r3,8(sp)
100083b0:	18bfff17 	ldw	r2,-4(r3)
100083b4:	1dffff04 	addi	r23,r3,-4
100083b8:	10000326 	beq	r2,zero,100083c8 <__multiply+0x218>
100083bc:	00000706 	br	100083dc <__multiply+0x22c>
100083c0:	b8800017 	ldw	r2,0(r23)
100083c4:	1000051e 	bne	r2,zero,100083dc <__multiply+0x22c>
100083c8:	d8c00117 	ldw	r3,4(sp)
100083cc:	bdffff04 	addi	r23,r23,-4
100083d0:	18ffffc4 	addi	r3,r3,-1
100083d4:	d8c00115 	stw	r3,4(sp)
100083d8:	183ff91e 	bne	r3,zero,100083c0 <__alt_data_end+0xf80083c0>
100083dc:	d8c00517 	ldw	r3,20(sp)
100083e0:	d9000117 	ldw	r4,4(sp)
100083e4:	1805883a 	mov	r2,r3
100083e8:	19000415 	stw	r4,16(r3)
100083ec:	dfc00f17 	ldw	ra,60(sp)
100083f0:	df000e17 	ldw	fp,56(sp)
100083f4:	ddc00d17 	ldw	r23,52(sp)
100083f8:	dd800c17 	ldw	r22,48(sp)
100083fc:	dd400b17 	ldw	r21,44(sp)
10008400:	dd000a17 	ldw	r20,40(sp)
10008404:	dcc00917 	ldw	r19,36(sp)
10008408:	dc800817 	ldw	r18,32(sp)
1000840c:	dc400717 	ldw	r17,28(sp)
10008410:	dc000617 	ldw	r16,24(sp)
10008414:	dec01004 	addi	sp,sp,64
10008418:	f800283a 	ret

1000841c <__pow5mult>:
1000841c:	defffa04 	addi	sp,sp,-24
10008420:	dcc00315 	stw	r19,12(sp)
10008424:	dc800215 	stw	r18,8(sp)
10008428:	dc000015 	stw	r16,0(sp)
1000842c:	dfc00515 	stw	ra,20(sp)
10008430:	dd000415 	stw	r20,16(sp)
10008434:	dc400115 	stw	r17,4(sp)
10008438:	308000cc 	andi	r2,r6,3
1000843c:	3021883a 	mov	r16,r6
10008440:	2027883a 	mov	r19,r4
10008444:	2825883a 	mov	r18,r5
10008448:	1000301e 	bne	r2,zero,1000850c <__pow5mult+0xf0>
1000844c:	8021d0ba 	srai	r16,r16,2
10008450:	80001b26 	beq	r16,zero,100084c0 <__pow5mult+0xa4>
10008454:	9c401217 	ldw	r17,72(r19)
10008458:	88003726 	beq	r17,zero,10008538 <__pow5mult+0x11c>
1000845c:	80c0004c 	andi	r3,r16,1
10008460:	1800071e 	bne	r3,zero,10008480 <__pow5mult+0x64>
10008464:	8021d07a 	srai	r16,r16,1
10008468:	80001526 	beq	r16,zero,100084c0 <__pow5mult+0xa4>
1000846c:	88800017 	ldw	r2,0(r17)
10008470:	10001c26 	beq	r2,zero,100084e4 <__pow5mult+0xc8>
10008474:	1023883a 	mov	r17,r2
10008478:	80c0004c 	andi	r3,r16,1
1000847c:	183ff926 	beq	r3,zero,10008464 <__alt_data_end+0xf8008464>
10008480:	900b883a 	mov	r5,r18
10008484:	880d883a 	mov	r6,r17
10008488:	9809883a 	mov	r4,r19
1000848c:	00081b00 	call	100081b0 <__multiply>
10008490:	90001c26 	beq	r18,zero,10008504 <__pow5mult+0xe8>
10008494:	91000117 	ldw	r4,4(r18)
10008498:	98c01317 	ldw	r3,76(r19)
1000849c:	8021d07a 	srai	r16,r16,1
100084a0:	2109883a 	add	r4,r4,r4
100084a4:	2109883a 	add	r4,r4,r4
100084a8:	1907883a 	add	r3,r3,r4
100084ac:	19000017 	ldw	r4,0(r3)
100084b0:	91000015 	stw	r4,0(r18)
100084b4:	1c800015 	stw	r18,0(r3)
100084b8:	1025883a 	mov	r18,r2
100084bc:	803feb1e 	bne	r16,zero,1000846c <__alt_data_end+0xf800846c>
100084c0:	9005883a 	mov	r2,r18
100084c4:	dfc00517 	ldw	ra,20(sp)
100084c8:	dd000417 	ldw	r20,16(sp)
100084cc:	dcc00317 	ldw	r19,12(sp)
100084d0:	dc800217 	ldw	r18,8(sp)
100084d4:	dc400117 	ldw	r17,4(sp)
100084d8:	dc000017 	ldw	r16,0(sp)
100084dc:	dec00604 	addi	sp,sp,24
100084e0:	f800283a 	ret
100084e4:	880b883a 	mov	r5,r17
100084e8:	880d883a 	mov	r6,r17
100084ec:	9809883a 	mov	r4,r19
100084f0:	00081b00 	call	100081b0 <__multiply>
100084f4:	88800015 	stw	r2,0(r17)
100084f8:	10000015 	stw	zero,0(r2)
100084fc:	1023883a 	mov	r17,r2
10008500:	003fdd06 	br	10008478 <__alt_data_end+0xf8008478>
10008504:	1025883a 	mov	r18,r2
10008508:	003fd606 	br	10008464 <__alt_data_end+0xf8008464>
1000850c:	10bfffc4 	addi	r2,r2,-1
10008510:	1085883a 	add	r2,r2,r2
10008514:	00c40074 	movhi	r3,4097
10008518:	18c69b04 	addi	r3,r3,6764
1000851c:	1085883a 	add	r2,r2,r2
10008520:	1885883a 	add	r2,r3,r2
10008524:	11800017 	ldw	r6,0(r2)
10008528:	000f883a 	mov	r7,zero
1000852c:	0007e140 	call	10007e14 <__multadd>
10008530:	1025883a 	mov	r18,r2
10008534:	003fc506 	br	1000844c <__alt_data_end+0xf800844c>
10008538:	05000044 	movi	r20,1
1000853c:	9809883a 	mov	r4,r19
10008540:	a00b883a 	mov	r5,r20
10008544:	0007d440 	call	10007d44 <_Balloc>
10008548:	1023883a 	mov	r17,r2
1000854c:	00809c44 	movi	r2,625
10008550:	88800515 	stw	r2,20(r17)
10008554:	8d000415 	stw	r20,16(r17)
10008558:	9c401215 	stw	r17,72(r19)
1000855c:	88000015 	stw	zero,0(r17)
10008560:	003fbe06 	br	1000845c <__alt_data_end+0xf800845c>

10008564 <__lshift>:
10008564:	defff904 	addi	sp,sp,-28
10008568:	dd000415 	stw	r20,16(sp)
1000856c:	dc400115 	stw	r17,4(sp)
10008570:	2d000417 	ldw	r20,16(r5)
10008574:	3023d17a 	srai	r17,r6,5
10008578:	28800217 	ldw	r2,8(r5)
1000857c:	dd400515 	stw	r21,20(sp)
10008580:	8d29883a 	add	r20,r17,r20
10008584:	dcc00315 	stw	r19,12(sp)
10008588:	dc800215 	stw	r18,8(sp)
1000858c:	dc000015 	stw	r16,0(sp)
10008590:	dfc00615 	stw	ra,24(sp)
10008594:	a4000044 	addi	r16,r20,1
10008598:	2825883a 	mov	r18,r5
1000859c:	302b883a 	mov	r21,r6
100085a0:	2027883a 	mov	r19,r4
100085a4:	29400117 	ldw	r5,4(r5)
100085a8:	1400030e 	bge	r2,r16,100085b8 <__lshift+0x54>
100085ac:	1085883a 	add	r2,r2,r2
100085b0:	29400044 	addi	r5,r5,1
100085b4:	143ffd16 	blt	r2,r16,100085ac <__alt_data_end+0xf80085ac>
100085b8:	9809883a 	mov	r4,r19
100085bc:	0007d440 	call	10007d44 <_Balloc>
100085c0:	11000504 	addi	r4,r2,20
100085c4:	0440090e 	bge	zero,r17,100085ec <__lshift+0x88>
100085c8:	200f883a 	mov	r7,r4
100085cc:	0007883a 	mov	r3,zero
100085d0:	38000015 	stw	zero,0(r7)
100085d4:	18c00044 	addi	r3,r3,1
100085d8:	39c00104 	addi	r7,r7,4
100085dc:	1c7ffc1e 	bne	r3,r17,100085d0 <__alt_data_end+0xf80085d0>
100085e0:	18c7883a 	add	r3,r3,r3
100085e4:	18c7883a 	add	r3,r3,r3
100085e8:	20c9883a 	add	r4,r4,r3
100085ec:	92400417 	ldw	r9,16(r18)
100085f0:	90c00504 	addi	r3,r18,20
100085f4:	a98007cc 	andi	r6,r21,31
100085f8:	4a53883a 	add	r9,r9,r9
100085fc:	4a53883a 	add	r9,r9,r9
10008600:	1a53883a 	add	r9,r3,r9
10008604:	30002426 	beq	r6,zero,10008698 <__lshift+0x134>
10008608:	01400804 	movi	r5,32
1000860c:	298bc83a 	sub	r5,r5,r6
10008610:	200f883a 	mov	r7,r4
10008614:	0011883a 	mov	r8,zero
10008618:	1a800017 	ldw	r10,0(r3)
1000861c:	3809883a 	mov	r4,r7
10008620:	39c00104 	addi	r7,r7,4
10008624:	5194983a 	sll	r10,r10,r6
10008628:	18c00104 	addi	r3,r3,4
1000862c:	4290b03a 	or	r8,r8,r10
10008630:	3a3fff15 	stw	r8,-4(r7)
10008634:	1a3fff17 	ldw	r8,-4(r3)
10008638:	4150d83a 	srl	r8,r8,r5
1000863c:	1a7ff636 	bltu	r3,r9,10008618 <__alt_data_end+0xf8008618>
10008640:	22000115 	stw	r8,4(r4)
10008644:	40000126 	beq	r8,zero,1000864c <__lshift+0xe8>
10008648:	a4000084 	addi	r16,r20,2
1000864c:	91000117 	ldw	r4,4(r18)
10008650:	98c01317 	ldw	r3,76(r19)
10008654:	843fffc4 	addi	r16,r16,-1
10008658:	2109883a 	add	r4,r4,r4
1000865c:	2109883a 	add	r4,r4,r4
10008660:	1907883a 	add	r3,r3,r4
10008664:	19000017 	ldw	r4,0(r3)
10008668:	14000415 	stw	r16,16(r2)
1000866c:	91000015 	stw	r4,0(r18)
10008670:	1c800015 	stw	r18,0(r3)
10008674:	dfc00617 	ldw	ra,24(sp)
10008678:	dd400517 	ldw	r21,20(sp)
1000867c:	dd000417 	ldw	r20,16(sp)
10008680:	dcc00317 	ldw	r19,12(sp)
10008684:	dc800217 	ldw	r18,8(sp)
10008688:	dc400117 	ldw	r17,4(sp)
1000868c:	dc000017 	ldw	r16,0(sp)
10008690:	dec00704 	addi	sp,sp,28
10008694:	f800283a 	ret
10008698:	200f883a 	mov	r7,r4
1000869c:	19800017 	ldw	r6,0(r3)
100086a0:	39c00104 	addi	r7,r7,4
100086a4:	18c00104 	addi	r3,r3,4
100086a8:	39bfff15 	stw	r6,-4(r7)
100086ac:	1a7ffb36 	bltu	r3,r9,1000869c <__alt_data_end+0xf800869c>
100086b0:	003fe606 	br	1000864c <__alt_data_end+0xf800864c>

100086b4 <__mcmp>:
100086b4:	20800417 	ldw	r2,16(r4)
100086b8:	28c00417 	ldw	r3,16(r5)
100086bc:	10c5c83a 	sub	r2,r2,r3
100086c0:	1000111e 	bne	r2,zero,10008708 <__mcmp+0x54>
100086c4:	18c7883a 	add	r3,r3,r3
100086c8:	18c7883a 	add	r3,r3,r3
100086cc:	21000504 	addi	r4,r4,20
100086d0:	29400504 	addi	r5,r5,20
100086d4:	20c5883a 	add	r2,r4,r3
100086d8:	28cb883a 	add	r5,r5,r3
100086dc:	00000106 	br	100086e4 <__mcmp+0x30>
100086e0:	2080082e 	bgeu	r4,r2,10008704 <__mcmp+0x50>
100086e4:	10bfff04 	addi	r2,r2,-4
100086e8:	297fff04 	addi	r5,r5,-4
100086ec:	11800017 	ldw	r6,0(r2)
100086f0:	28c00017 	ldw	r3,0(r5)
100086f4:	30fffa26 	beq	r6,r3,100086e0 <__alt_data_end+0xf80086e0>
100086f8:	30c00436 	bltu	r6,r3,1000870c <__mcmp+0x58>
100086fc:	00800044 	movi	r2,1
10008700:	f800283a 	ret
10008704:	0005883a 	mov	r2,zero
10008708:	f800283a 	ret
1000870c:	00bfffc4 	movi	r2,-1
10008710:	f800283a 	ret

10008714 <__mdiff>:
10008714:	defffc04 	addi	sp,sp,-16
10008718:	dc000015 	stw	r16,0(sp)
1000871c:	2821883a 	mov	r16,r5
10008720:	200f883a 	mov	r7,r4
10008724:	300b883a 	mov	r5,r6
10008728:	8009883a 	mov	r4,r16
1000872c:	dc400115 	stw	r17,4(sp)
10008730:	dfc00315 	stw	ra,12(sp)
10008734:	dc800215 	stw	r18,8(sp)
10008738:	3023883a 	mov	r17,r6
1000873c:	00086b40 	call	100086b4 <__mcmp>
10008740:	10005226 	beq	r2,zero,1000888c <__mdiff+0x178>
10008744:	10004c16 	blt	r2,zero,10008878 <__mdiff+0x164>
10008748:	0025883a 	mov	r18,zero
1000874c:	81400117 	ldw	r5,4(r16)
10008750:	3809883a 	mov	r4,r7
10008754:	0007d440 	call	10007d44 <_Balloc>
10008758:	82800417 	ldw	r10,16(r16)
1000875c:	8b400417 	ldw	r13,16(r17)
10008760:	81000504 	addi	r4,r16,20
10008764:	5299883a 	add	r12,r10,r10
10008768:	6b5b883a 	add	r13,r13,r13
1000876c:	6319883a 	add	r12,r12,r12
10008770:	89800504 	addi	r6,r17,20
10008774:	6b5b883a 	add	r13,r13,r13
10008778:	14800315 	stw	r18,12(r2)
1000877c:	2319883a 	add	r12,r4,r12
10008780:	335b883a 	add	r13,r6,r13
10008784:	11400504 	addi	r5,r2,20
10008788:	0007883a 	mov	r3,zero
1000878c:	00000106 	br	10008794 <__mdiff+0x80>
10008790:	400b883a 	mov	r5,r8
10008794:	22400017 	ldw	r9,0(r4)
10008798:	32000017 	ldw	r8,0(r6)
1000879c:	31800104 	addi	r6,r6,4
100087a0:	49ffffcc 	andi	r7,r9,65535
100087a4:	42ffffcc 	andi	r11,r8,65535
100087a8:	38c7883a 	add	r3,r7,r3
100087ac:	1acfc83a 	sub	r7,r3,r11
100087b0:	4010d43a 	srli	r8,r8,16
100087b4:	4806d43a 	srli	r3,r9,16
100087b8:	3817d43a 	srai	r11,r7,16
100087bc:	39ffffcc 	andi	r7,r7,65535
100087c0:	1a07c83a 	sub	r3,r3,r8
100087c4:	1ac7883a 	add	r3,r3,r11
100087c8:	1812943a 	slli	r9,r3,16
100087cc:	2a000104 	addi	r8,r5,4
100087d0:	21000104 	addi	r4,r4,4
100087d4:	49ceb03a 	or	r7,r9,r7
100087d8:	29c00015 	stw	r7,0(r5)
100087dc:	1807d43a 	srai	r3,r3,16
100087e0:	337feb36 	bltu	r6,r13,10008790 <__alt_data_end+0xf8008790>
100087e4:	2013883a 	mov	r9,r4
100087e8:	2300342e 	bgeu	r4,r12,100088bc <__mdiff+0x1a8>
100087ec:	400b883a 	mov	r5,r8
100087f0:	21c00017 	ldw	r7,0(r4)
100087f4:	29400104 	addi	r5,r5,4
100087f8:	21000104 	addi	r4,r4,4
100087fc:	39bfffcc 	andi	r6,r7,65535
10008800:	30cd883a 	add	r6,r6,r3
10008804:	3007d43a 	srai	r3,r6,16
10008808:	380ed43a 	srli	r7,r7,16
1000880c:	31bfffcc 	andi	r6,r6,65535
10008810:	19c7883a 	add	r3,r3,r7
10008814:	180e943a 	slli	r7,r3,16
10008818:	1807d43a 	srai	r3,r3,16
1000881c:	398cb03a 	or	r6,r7,r6
10008820:	29bfff15 	stw	r6,-4(r5)
10008824:	233ff236 	bltu	r4,r12,100087f0 <__alt_data_end+0xf80087f0>
10008828:	0248303a 	nor	r4,zero,r9
1000882c:	2309883a 	add	r4,r4,r12
10008830:	2008d0ba 	srli	r4,r4,2
10008834:	21000044 	addi	r4,r4,1
10008838:	2109883a 	add	r4,r4,r4
1000883c:	2109883a 	add	r4,r4,r4
10008840:	4111883a 	add	r8,r8,r4
10008844:	413fff04 	addi	r4,r8,-4
10008848:	3000041e 	bne	r6,zero,1000885c <__mdiff+0x148>
1000884c:	213fff04 	addi	r4,r4,-4
10008850:	20c00017 	ldw	r3,0(r4)
10008854:	52bfffc4 	addi	r10,r10,-1
10008858:	183ffc26 	beq	r3,zero,1000884c <__alt_data_end+0xf800884c>
1000885c:	12800415 	stw	r10,16(r2)
10008860:	dfc00317 	ldw	ra,12(sp)
10008864:	dc800217 	ldw	r18,8(sp)
10008868:	dc400117 	ldw	r17,4(sp)
1000886c:	dc000017 	ldw	r16,0(sp)
10008870:	dec00404 	addi	sp,sp,16
10008874:	f800283a 	ret
10008878:	8005883a 	mov	r2,r16
1000887c:	04800044 	movi	r18,1
10008880:	8821883a 	mov	r16,r17
10008884:	1023883a 	mov	r17,r2
10008888:	003fb006 	br	1000874c <__alt_data_end+0xf800874c>
1000888c:	3809883a 	mov	r4,r7
10008890:	000b883a 	mov	r5,zero
10008894:	0007d440 	call	10007d44 <_Balloc>
10008898:	00c00044 	movi	r3,1
1000889c:	10c00415 	stw	r3,16(r2)
100088a0:	10000515 	stw	zero,20(r2)
100088a4:	dfc00317 	ldw	ra,12(sp)
100088a8:	dc800217 	ldw	r18,8(sp)
100088ac:	dc400117 	ldw	r17,4(sp)
100088b0:	dc000017 	ldw	r16,0(sp)
100088b4:	dec00404 	addi	sp,sp,16
100088b8:	f800283a 	ret
100088bc:	380d883a 	mov	r6,r7
100088c0:	003fe006 	br	10008844 <__alt_data_end+0xf8008844>

100088c4 <__ulp>:
100088c4:	295ffc2c 	andhi	r5,r5,32752
100088c8:	00bf3034 	movhi	r2,64704
100088cc:	2887883a 	add	r3,r5,r2
100088d0:	00c0020e 	bge	zero,r3,100088dc <__ulp+0x18>
100088d4:	0005883a 	mov	r2,zero
100088d8:	f800283a 	ret
100088dc:	00c7c83a 	sub	r3,zero,r3
100088e0:	1805d53a 	srai	r2,r3,20
100088e4:	00c004c4 	movi	r3,19
100088e8:	18800a0e 	bge	r3,r2,10008914 <__ulp+0x50>
100088ec:	01000c84 	movi	r4,50
100088f0:	0007883a 	mov	r3,zero
100088f4:	20800516 	blt	r4,r2,1000890c <__ulp+0x48>
100088f8:	01000cc4 	movi	r4,51
100088fc:	2085c83a 	sub	r2,r4,r2
10008900:	01000044 	movi	r4,1
10008904:	2084983a 	sll	r2,r4,r2
10008908:	f800283a 	ret
1000890c:	00800044 	movi	r2,1
10008910:	f800283a 	ret
10008914:	00c00234 	movhi	r3,8
10008918:	1887d83a 	sra	r3,r3,r2
1000891c:	0005883a 	mov	r2,zero
10008920:	f800283a 	ret

10008924 <__b2d>:
10008924:	21800417 	ldw	r6,16(r4)
10008928:	22000504 	addi	r8,r4,20
1000892c:	deffff04 	addi	sp,sp,-4
10008930:	318d883a 	add	r6,r6,r6
10008934:	318d883a 	add	r6,r6,r6
10008938:	418d883a 	add	r6,r8,r6
1000893c:	31ffff17 	ldw	r7,-4(r6)
10008940:	327fff04 	addi	r9,r6,-4
10008944:	dfc00015 	stw	ra,0(sp)
10008948:	3809883a 	mov	r4,r7
1000894c:	000805c0 	call	1000805c <__hi0bits>
10008950:	00c00804 	movi	r3,32
10008954:	1887c83a 	sub	r3,r3,r2
10008958:	28c00015 	stw	r3,0(r5)
1000895c:	00c00284 	movi	r3,10
10008960:	18800d16 	blt	r3,r2,10008998 <__b2d+0x74>
10008964:	010002c4 	movi	r4,11
10008968:	2089c83a 	sub	r4,r4,r2
1000896c:	3906d83a 	srl	r3,r7,r4
10008970:	18cffc34 	orhi	r3,r3,16368
10008974:	4240232e 	bgeu	r8,r9,10008a04 <__b2d+0xe0>
10008978:	317ffe17 	ldw	r5,-8(r6)
1000897c:	2908d83a 	srl	r4,r5,r4
10008980:	10800544 	addi	r2,r2,21
10008984:	388e983a 	sll	r7,r7,r2
10008988:	21c4b03a 	or	r2,r4,r7
1000898c:	dfc00017 	ldw	ra,0(sp)
10008990:	dec00104 	addi	sp,sp,4
10008994:	f800283a 	ret
10008998:	42401136 	bltu	r8,r9,100089e0 <__b2d+0xbc>
1000899c:	113ffd44 	addi	r4,r2,-11
100089a0:	000b883a 	mov	r5,zero
100089a4:	20001226 	beq	r4,zero,100089f0 <__b2d+0xcc>
100089a8:	00c00ac4 	movi	r3,43
100089ac:	1885c83a 	sub	r2,r3,r2
100089b0:	3906983a 	sll	r3,r7,r4
100089b4:	288cd83a 	srl	r6,r5,r2
100089b8:	18cffc34 	orhi	r3,r3,16368
100089bc:	1986b03a 	or	r3,r3,r6
100089c0:	4240122e 	bgeu	r8,r9,10008a0c <__b2d+0xe8>
100089c4:	49bfff17 	ldw	r6,-4(r9)
100089c8:	3084d83a 	srl	r2,r6,r2
100089cc:	2908983a 	sll	r4,r5,r4
100089d0:	1104b03a 	or	r2,r2,r4
100089d4:	dfc00017 	ldw	ra,0(sp)
100089d8:	dec00104 	addi	sp,sp,4
100089dc:	f800283a 	ret
100089e0:	113ffd44 	addi	r4,r2,-11
100089e4:	327ffe04 	addi	r9,r6,-8
100089e8:	317ffe17 	ldw	r5,-8(r6)
100089ec:	203fee1e 	bne	r4,zero,100089a8 <__alt_data_end+0xf80089a8>
100089f0:	38cffc34 	orhi	r3,r7,16368
100089f4:	2805883a 	mov	r2,r5
100089f8:	dfc00017 	ldw	ra,0(sp)
100089fc:	dec00104 	addi	sp,sp,4
10008a00:	f800283a 	ret
10008a04:	0009883a 	mov	r4,zero
10008a08:	003fdd06 	br	10008980 <__alt_data_end+0xf8008980>
10008a0c:	0005883a 	mov	r2,zero
10008a10:	003fee06 	br	100089cc <__alt_data_end+0xf80089cc>

10008a14 <__d2b>:
10008a14:	defffa04 	addi	sp,sp,-24
10008a18:	dc400315 	stw	r17,12(sp)
10008a1c:	2823883a 	mov	r17,r5
10008a20:	01400044 	movi	r5,1
10008a24:	dc800415 	stw	r18,16(sp)
10008a28:	dc000215 	stw	r16,8(sp)
10008a2c:	dfc00515 	stw	ra,20(sp)
10008a30:	3021883a 	mov	r16,r6
10008a34:	3825883a 	mov	r18,r7
10008a38:	0007d440 	call	10007d44 <_Balloc>
10008a3c:	8012907a 	slli	r9,r16,1
10008a40:	1011883a 	mov	r8,r2
10008a44:	00800434 	movhi	r2,16
10008a48:	10bfffc4 	addi	r2,r2,-1
10008a4c:	4812d57a 	srli	r9,r9,21
10008a50:	80a0703a 	and	r16,r16,r2
10008a54:	48000126 	beq	r9,zero,10008a5c <__d2b+0x48>
10008a58:	84000434 	orhi	r16,r16,16
10008a5c:	dc000015 	stw	r16,0(sp)
10008a60:	88001e26 	beq	r17,zero,10008adc <__d2b+0xc8>
10008a64:	d9000104 	addi	r4,sp,4
10008a68:	dc400115 	stw	r17,4(sp)
10008a6c:	00080c40 	call	100080c4 <__lo0bits>
10008a70:	d8c00017 	ldw	r3,0(sp)
10008a74:	10002f1e 	bne	r2,zero,10008b34 <__d2b+0x120>
10008a78:	d9000117 	ldw	r4,4(sp)
10008a7c:	41000515 	stw	r4,20(r8)
10008a80:	180b003a 	cmpeq	r5,r3,zero
10008a84:	01000084 	movi	r4,2
10008a88:	214bc83a 	sub	r5,r4,r5
10008a8c:	40c00615 	stw	r3,24(r8)
10008a90:	41400415 	stw	r5,16(r8)
10008a94:	4800191e 	bne	r9,zero,10008afc <__d2b+0xe8>
10008a98:	280690ba 	slli	r3,r5,2
10008a9c:	10bef384 	addi	r2,r2,-1074
10008aa0:	90800015 	stw	r2,0(r18)
10008aa4:	40c5883a 	add	r2,r8,r3
10008aa8:	11000417 	ldw	r4,16(r2)
10008aac:	000805c0 	call	1000805c <__hi0bits>
10008ab0:	280a917a 	slli	r5,r5,5
10008ab4:	d8c00617 	ldw	r3,24(sp)
10008ab8:	2885c83a 	sub	r2,r5,r2
10008abc:	18800015 	stw	r2,0(r3)
10008ac0:	4005883a 	mov	r2,r8
10008ac4:	dfc00517 	ldw	ra,20(sp)
10008ac8:	dc800417 	ldw	r18,16(sp)
10008acc:	dc400317 	ldw	r17,12(sp)
10008ad0:	dc000217 	ldw	r16,8(sp)
10008ad4:	dec00604 	addi	sp,sp,24
10008ad8:	f800283a 	ret
10008adc:	d809883a 	mov	r4,sp
10008ae0:	00080c40 	call	100080c4 <__lo0bits>
10008ae4:	d8c00017 	ldw	r3,0(sp)
10008ae8:	01400044 	movi	r5,1
10008aec:	41400415 	stw	r5,16(r8)
10008af0:	40c00515 	stw	r3,20(r8)
10008af4:	10800804 	addi	r2,r2,32
10008af8:	483fe726 	beq	r9,zero,10008a98 <__alt_data_end+0xf8008a98>
10008afc:	00c00d44 	movi	r3,53
10008b00:	4a7ef344 	addi	r9,r9,-1075
10008b04:	4893883a 	add	r9,r9,r2
10008b08:	1885c83a 	sub	r2,r3,r2
10008b0c:	d8c00617 	ldw	r3,24(sp)
10008b10:	92400015 	stw	r9,0(r18)
10008b14:	18800015 	stw	r2,0(r3)
10008b18:	4005883a 	mov	r2,r8
10008b1c:	dfc00517 	ldw	ra,20(sp)
10008b20:	dc800417 	ldw	r18,16(sp)
10008b24:	dc400317 	ldw	r17,12(sp)
10008b28:	dc000217 	ldw	r16,8(sp)
10008b2c:	dec00604 	addi	sp,sp,24
10008b30:	f800283a 	ret
10008b34:	01000804 	movi	r4,32
10008b38:	2089c83a 	sub	r4,r4,r2
10008b3c:	1908983a 	sll	r4,r3,r4
10008b40:	d9400117 	ldw	r5,4(sp)
10008b44:	1886d83a 	srl	r3,r3,r2
10008b48:	2148b03a 	or	r4,r4,r5
10008b4c:	41000515 	stw	r4,20(r8)
10008b50:	d8c00015 	stw	r3,0(sp)
10008b54:	003fca06 	br	10008a80 <__alt_data_end+0xf8008a80>

10008b58 <__ratio>:
10008b58:	defffd04 	addi	sp,sp,-12
10008b5c:	2817883a 	mov	r11,r5
10008b60:	201b883a 	mov	r13,r4
10008b64:	d9400104 	addi	r5,sp,4
10008b68:	dfc00215 	stw	ra,8(sp)
10008b6c:	00089240 	call	10008924 <__b2d>
10008b70:	5809883a 	mov	r4,r11
10008b74:	d80b883a 	mov	r5,sp
10008b78:	1019883a 	mov	r12,r2
10008b7c:	1815883a 	mov	r10,r3
10008b80:	00089240 	call	10008924 <__b2d>
10008b84:	69400417 	ldw	r5,16(r13)
10008b88:	59000417 	ldw	r4,16(r11)
10008b8c:	d9800117 	ldw	r6,4(sp)
10008b90:	2909c83a 	sub	r4,r5,r4
10008b94:	d9400017 	ldw	r5,0(sp)
10008b98:	2008917a 	slli	r4,r4,5
10008b9c:	314bc83a 	sub	r5,r6,r5
10008ba0:	290b883a 	add	r5,r5,r4
10008ba4:	01400a0e 	bge	zero,r5,10008bd0 <__ratio+0x78>
10008ba8:	280a953a 	slli	r5,r5,20
10008bac:	6009883a 	mov	r4,r12
10008bb0:	100d883a 	mov	r6,r2
10008bb4:	2a95883a 	add	r10,r5,r10
10008bb8:	500b883a 	mov	r5,r10
10008bbc:	180f883a 	mov	r7,r3
10008bc0:	000cb5c0 	call	1000cb5c <__divdf3>
10008bc4:	dfc00217 	ldw	ra,8(sp)
10008bc8:	dec00304 	addi	sp,sp,12
10008bcc:	f800283a 	ret
10008bd0:	280a953a 	slli	r5,r5,20
10008bd4:	6009883a 	mov	r4,r12
10008bd8:	100d883a 	mov	r6,r2
10008bdc:	1947c83a 	sub	r3,r3,r5
10008be0:	180f883a 	mov	r7,r3
10008be4:	500b883a 	mov	r5,r10
10008be8:	000cb5c0 	call	1000cb5c <__divdf3>
10008bec:	dfc00217 	ldw	ra,8(sp)
10008bf0:	dec00304 	addi	sp,sp,12
10008bf4:	f800283a 	ret

10008bf8 <_mprec_log10>:
10008bf8:	defffe04 	addi	sp,sp,-8
10008bfc:	dc000015 	stw	r16,0(sp)
10008c00:	dfc00115 	stw	ra,4(sp)
10008c04:	008005c4 	movi	r2,23
10008c08:	2021883a 	mov	r16,r4
10008c0c:	11000d0e 	bge	r2,r4,10008c44 <_mprec_log10+0x4c>
10008c10:	0005883a 	mov	r2,zero
10008c14:	00cffc34 	movhi	r3,16368
10008c18:	843fffc4 	addi	r16,r16,-1
10008c1c:	1009883a 	mov	r4,r2
10008c20:	180b883a 	mov	r5,r3
10008c24:	000d883a 	mov	r6,zero
10008c28:	01d00934 	movhi	r7,16420
10008c2c:	000d7400 	call	1000d740 <__muldf3>
10008c30:	803ff91e 	bne	r16,zero,10008c18 <__alt_data_end+0xf8008c18>
10008c34:	dfc00117 	ldw	ra,4(sp)
10008c38:	dc000017 	ldw	r16,0(sp)
10008c3c:	dec00204 	addi	sp,sp,8
10008c40:	f800283a 	ret
10008c44:	202090fa 	slli	r16,r4,3
10008c48:	00840074 	movhi	r2,4097
10008c4c:	1086b204 	addi	r2,r2,6856
10008c50:	1421883a 	add	r16,r2,r16
10008c54:	80800017 	ldw	r2,0(r16)
10008c58:	80c00117 	ldw	r3,4(r16)
10008c5c:	dfc00117 	ldw	ra,4(sp)
10008c60:	dc000017 	ldw	r16,0(sp)
10008c64:	dec00204 	addi	sp,sp,8
10008c68:	f800283a 	ret

10008c6c <__copybits>:
10008c6c:	297fffc4 	addi	r5,r5,-1
10008c70:	2811d17a 	srai	r8,r5,5
10008c74:	31c00417 	ldw	r7,16(r6)
10008c78:	30800504 	addi	r2,r6,20
10008c7c:	42000044 	addi	r8,r8,1
10008c80:	39cf883a 	add	r7,r7,r7
10008c84:	4211883a 	add	r8,r8,r8
10008c88:	39cf883a 	add	r7,r7,r7
10008c8c:	4211883a 	add	r8,r8,r8
10008c90:	11cf883a 	add	r7,r2,r7
10008c94:	2211883a 	add	r8,r4,r8
10008c98:	11c00d2e 	bgeu	r2,r7,10008cd0 <__copybits+0x64>
10008c9c:	2007883a 	mov	r3,r4
10008ca0:	11400017 	ldw	r5,0(r2)
10008ca4:	18c00104 	addi	r3,r3,4
10008ca8:	10800104 	addi	r2,r2,4
10008cac:	197fff15 	stw	r5,-4(r3)
10008cb0:	11fffb36 	bltu	r2,r7,10008ca0 <__alt_data_end+0xf8008ca0>
10008cb4:	3985c83a 	sub	r2,r7,r6
10008cb8:	10bffac4 	addi	r2,r2,-21
10008cbc:	1004d0ba 	srli	r2,r2,2
10008cc0:	10800044 	addi	r2,r2,1
10008cc4:	1085883a 	add	r2,r2,r2
10008cc8:	1085883a 	add	r2,r2,r2
10008ccc:	2089883a 	add	r4,r4,r2
10008cd0:	2200032e 	bgeu	r4,r8,10008ce0 <__copybits+0x74>
10008cd4:	20000015 	stw	zero,0(r4)
10008cd8:	21000104 	addi	r4,r4,4
10008cdc:	223ffd36 	bltu	r4,r8,10008cd4 <__alt_data_end+0xf8008cd4>
10008ce0:	f800283a 	ret

10008ce4 <__any_on>:
10008ce4:	20800417 	ldw	r2,16(r4)
10008ce8:	2807d17a 	srai	r3,r5,5
10008cec:	21000504 	addi	r4,r4,20
10008cf0:	10c00d0e 	bge	r2,r3,10008d28 <__any_on+0x44>
10008cf4:	1085883a 	add	r2,r2,r2
10008cf8:	1085883a 	add	r2,r2,r2
10008cfc:	2085883a 	add	r2,r4,r2
10008d00:	2080182e 	bgeu	r4,r2,10008d64 <__any_on+0x80>
10008d04:	10ffff17 	ldw	r3,-4(r2)
10008d08:	10bfff04 	addi	r2,r2,-4
10008d0c:	1800041e 	bne	r3,zero,10008d20 <__any_on+0x3c>
10008d10:	2080142e 	bgeu	r4,r2,10008d64 <__any_on+0x80>
10008d14:	10bfff04 	addi	r2,r2,-4
10008d18:	10c00017 	ldw	r3,0(r2)
10008d1c:	183ffc26 	beq	r3,zero,10008d10 <__alt_data_end+0xf8008d10>
10008d20:	00800044 	movi	r2,1
10008d24:	f800283a 	ret
10008d28:	18800a0e 	bge	r3,r2,10008d54 <__any_on+0x70>
10008d2c:	18c7883a 	add	r3,r3,r3
10008d30:	18c7883a 	add	r3,r3,r3
10008d34:	294007cc 	andi	r5,r5,31
10008d38:	20c5883a 	add	r2,r4,r3
10008d3c:	283ff026 	beq	r5,zero,10008d00 <__alt_data_end+0xf8008d00>
10008d40:	10c00017 	ldw	r3,0(r2)
10008d44:	194cd83a 	srl	r6,r3,r5
10008d48:	314a983a 	sll	r5,r6,r5
10008d4c:	28fff41e 	bne	r5,r3,10008d20 <__alt_data_end+0xf8008d20>
10008d50:	003feb06 	br	10008d00 <__alt_data_end+0xf8008d00>
10008d54:	18c7883a 	add	r3,r3,r3
10008d58:	18c7883a 	add	r3,r3,r3
10008d5c:	20c5883a 	add	r2,r4,r3
10008d60:	003fe706 	br	10008d00 <__alt_data_end+0xf8008d00>
10008d64:	0005883a 	mov	r2,zero
10008d68:	f800283a 	ret

10008d6c <_realloc_r>:
10008d6c:	defff604 	addi	sp,sp,-40
10008d70:	dd000415 	stw	r20,16(sp)
10008d74:	dc000015 	stw	r16,0(sp)
10008d78:	dfc00915 	stw	ra,36(sp)
10008d7c:	df000815 	stw	fp,32(sp)
10008d80:	ddc00715 	stw	r23,28(sp)
10008d84:	dd800615 	stw	r22,24(sp)
10008d88:	dd400515 	stw	r21,20(sp)
10008d8c:	dcc00315 	stw	r19,12(sp)
10008d90:	dc800215 	stw	r18,8(sp)
10008d94:	dc400115 	stw	r17,4(sp)
10008d98:	2821883a 	mov	r16,r5
10008d9c:	3029883a 	mov	r20,r6
10008da0:	28009a26 	beq	r5,zero,1000900c <_realloc_r+0x2a0>
10008da4:	202b883a 	mov	r21,r4
10008da8:	000f0300 	call	1000f030 <__malloc_lock>
10008dac:	80ffff17 	ldw	r3,-4(r16)
10008db0:	047fff04 	movi	r17,-4
10008db4:	a08002c4 	addi	r2,r20,11
10008db8:	01000584 	movi	r4,22
10008dbc:	84fffe04 	addi	r19,r16,-8
10008dc0:	1c62703a 	and	r17,r3,r17
10008dc4:	2080372e 	bgeu	r4,r2,10008ea4 <_realloc_r+0x138>
10008dc8:	04bffe04 	movi	r18,-8
10008dcc:	14a4703a 	and	r18,r2,r18
10008dd0:	9005883a 	mov	r2,r18
10008dd4:	90005b16 	blt	r18,zero,10008f44 <_realloc_r+0x1d8>
10008dd8:	95005a36 	bltu	r18,r20,10008f44 <_realloc_r+0x1d8>
10008ddc:	8880340e 	bge	r17,r2,10008eb0 <_realloc_r+0x144>
10008de0:	05c40074 	movhi	r23,4097
10008de4:	bdc86004 	addi	r23,r23,8576
10008de8:	b9000217 	ldw	r4,8(r23)
10008dec:	9c4b883a 	add	r5,r19,r17
10008df0:	21409626 	beq	r4,r5,1000904c <_realloc_r+0x2e0>
10008df4:	29800117 	ldw	r6,4(r5)
10008df8:	01ffff84 	movi	r7,-2
10008dfc:	31ce703a 	and	r7,r6,r7
10008e00:	29cf883a 	add	r7,r5,r7
10008e04:	39c00117 	ldw	r7,4(r7)
10008e08:	39c0004c 	andi	r7,r7,1
10008e0c:	38004226 	beq	r7,zero,10008f18 <_realloc_r+0x1ac>
10008e10:	000d883a 	mov	r6,zero
10008e14:	000b883a 	mov	r5,zero
10008e18:	18c0004c 	andi	r3,r3,1
10008e1c:	18005c1e 	bne	r3,zero,10008f90 <_realloc_r+0x224>
10008e20:	85bffe17 	ldw	r22,-8(r16)
10008e24:	00ffff04 	movi	r3,-4
10008e28:	9dadc83a 	sub	r22,r19,r22
10008e2c:	b1c00117 	ldw	r7,4(r22)
10008e30:	38c6703a 	and	r3,r7,r3
10008e34:	28005426 	beq	r5,zero,10008f88 <_realloc_r+0x21c>
10008e38:	1c47883a 	add	r3,r3,r17
10008e3c:	2900bf26 	beq	r5,r4,1000913c <_realloc_r+0x3d0>
10008e40:	30ef883a 	add	r23,r6,r3
10008e44:	b8807e16 	blt	r23,r2,10009040 <_realloc_r+0x2d4>
10008e48:	28800317 	ldw	r2,12(r5)
10008e4c:	28c00217 	ldw	r3,8(r5)
10008e50:	89bfff04 	addi	r6,r17,-4
10008e54:	01000904 	movi	r4,36
10008e58:	18800315 	stw	r2,12(r3)
10008e5c:	10c00215 	stw	r3,8(r2)
10008e60:	b1400217 	ldw	r5,8(r22)
10008e64:	b0c00317 	ldw	r3,12(r22)
10008e68:	b5000204 	addi	r20,r22,8
10008e6c:	28c00315 	stw	r3,12(r5)
10008e70:	19400215 	stw	r5,8(r3)
10008e74:	21808536 	bltu	r4,r6,1000908c <_realloc_r+0x320>
10008e78:	008004c4 	movi	r2,19
10008e7c:	1180932e 	bgeu	r2,r6,100090cc <_realloc_r+0x360>
10008e80:	80800017 	ldw	r2,0(r16)
10008e84:	b0800215 	stw	r2,8(r22)
10008e88:	80800117 	ldw	r2,4(r16)
10008e8c:	b0800315 	stw	r2,12(r22)
10008e90:	008006c4 	movi	r2,27
10008e94:	1180df36 	bltu	r2,r6,10009214 <_realloc_r+0x4a8>
10008e98:	b0c00404 	addi	r3,r22,16
10008e9c:	84000204 	addi	r16,r16,8
10008ea0:	00008b06 	br	100090d0 <_realloc_r+0x364>
10008ea4:	00800404 	movi	r2,16
10008ea8:	1025883a 	mov	r18,r2
10008eac:	003fca06 	br	10008dd8 <__alt_data_end+0xf8008dd8>
10008eb0:	8029883a 	mov	r20,r16
10008eb4:	8c8dc83a 	sub	r6,r17,r18
10008eb8:	008003c4 	movi	r2,15
10008ebc:	18c0004c 	andi	r3,r3,1
10008ec0:	11802436 	bltu	r2,r6,10008f54 <_realloc_r+0x1e8>
10008ec4:	1c46b03a 	or	r3,r3,r17
10008ec8:	98c00115 	stw	r3,4(r19)
10008ecc:	9c63883a 	add	r17,r19,r17
10008ed0:	88800117 	ldw	r2,4(r17)
10008ed4:	10800054 	ori	r2,r2,1
10008ed8:	88800115 	stw	r2,4(r17)
10008edc:	a809883a 	mov	r4,r21
10008ee0:	000f0500 	call	1000f050 <__malloc_unlock>
10008ee4:	a005883a 	mov	r2,r20
10008ee8:	dfc00917 	ldw	ra,36(sp)
10008eec:	df000817 	ldw	fp,32(sp)
10008ef0:	ddc00717 	ldw	r23,28(sp)
10008ef4:	dd800617 	ldw	r22,24(sp)
10008ef8:	dd400517 	ldw	r21,20(sp)
10008efc:	dd000417 	ldw	r20,16(sp)
10008f00:	dcc00317 	ldw	r19,12(sp)
10008f04:	dc800217 	ldw	r18,8(sp)
10008f08:	dc400117 	ldw	r17,4(sp)
10008f0c:	dc000017 	ldw	r16,0(sp)
10008f10:	dec00a04 	addi	sp,sp,40
10008f14:	f800283a 	ret
10008f18:	01ffff04 	movi	r7,-4
10008f1c:	31cc703a 	and	r6,r6,r7
10008f20:	344f883a 	add	r7,r6,r17
10008f24:	38bfbc16 	blt	r7,r2,10008e18 <__alt_data_end+0xf8008e18>
10008f28:	28800317 	ldw	r2,12(r5)
10008f2c:	29000217 	ldw	r4,8(r5)
10008f30:	8029883a 	mov	r20,r16
10008f34:	3823883a 	mov	r17,r7
10008f38:	20800315 	stw	r2,12(r4)
10008f3c:	11000215 	stw	r4,8(r2)
10008f40:	003fdc06 	br	10008eb4 <__alt_data_end+0xf8008eb4>
10008f44:	00800304 	movi	r2,12
10008f48:	a8800015 	stw	r2,0(r21)
10008f4c:	0005883a 	mov	r2,zero
10008f50:	003fe506 	br	10008ee8 <__alt_data_end+0xf8008ee8>
10008f54:	1c86b03a 	or	r3,r3,r18
10008f58:	9c8b883a 	add	r5,r19,r18
10008f5c:	98c00115 	stw	r3,4(r19)
10008f60:	30800054 	ori	r2,r6,1
10008f64:	28800115 	stw	r2,4(r5)
10008f68:	298d883a 	add	r6,r5,r6
10008f6c:	30800117 	ldw	r2,4(r6)
10008f70:	a809883a 	mov	r4,r21
10008f74:	29400204 	addi	r5,r5,8
10008f78:	10800054 	ori	r2,r2,1
10008f7c:	30800115 	stw	r2,4(r6)
10008f80:	00065d80 	call	100065d8 <_free_r>
10008f84:	003fd506 	br	10008edc <__alt_data_end+0xf8008edc>
10008f88:	1c6f883a 	add	r23,r3,r17
10008f8c:	b880370e 	bge	r23,r2,1000906c <_realloc_r+0x300>
10008f90:	a00b883a 	mov	r5,r20
10008f94:	a809883a 	mov	r4,r21
10008f98:	000713c0 	call	1000713c <_malloc_r>
10008f9c:	1029883a 	mov	r20,r2
10008fa0:	1000c026 	beq	r2,zero,100092a4 <_realloc_r+0x538>
10008fa4:	80ffff17 	ldw	r3,-4(r16)
10008fa8:	113ffe04 	addi	r4,r2,-8
10008fac:	00bfff84 	movi	r2,-2
10008fb0:	1884703a 	and	r2,r3,r2
10008fb4:	9885883a 	add	r2,r19,r2
10008fb8:	20809026 	beq	r4,r2,100091fc <_realloc_r+0x490>
10008fbc:	89bfff04 	addi	r6,r17,-4
10008fc0:	00800904 	movi	r2,36
10008fc4:	11805936 	bltu	r2,r6,1000912c <_realloc_r+0x3c0>
10008fc8:	00c004c4 	movi	r3,19
10008fcc:	19803636 	bltu	r3,r6,100090a8 <_realloc_r+0x33c>
10008fd0:	a005883a 	mov	r2,r20
10008fd4:	8007883a 	mov	r3,r16
10008fd8:	19000017 	ldw	r4,0(r3)
10008fdc:	11000015 	stw	r4,0(r2)
10008fe0:	19000117 	ldw	r4,4(r3)
10008fe4:	11000115 	stw	r4,4(r2)
10008fe8:	18c00217 	ldw	r3,8(r3)
10008fec:	10c00215 	stw	r3,8(r2)
10008ff0:	800b883a 	mov	r5,r16
10008ff4:	a809883a 	mov	r4,r21
10008ff8:	00065d80 	call	100065d8 <_free_r>
10008ffc:	a809883a 	mov	r4,r21
10009000:	000f0500 	call	1000f050 <__malloc_unlock>
10009004:	a005883a 	mov	r2,r20
10009008:	003fb706 	br	10008ee8 <__alt_data_end+0xf8008ee8>
1000900c:	300b883a 	mov	r5,r6
10009010:	dfc00917 	ldw	ra,36(sp)
10009014:	df000817 	ldw	fp,32(sp)
10009018:	ddc00717 	ldw	r23,28(sp)
1000901c:	dd800617 	ldw	r22,24(sp)
10009020:	dd400517 	ldw	r21,20(sp)
10009024:	dd000417 	ldw	r20,16(sp)
10009028:	dcc00317 	ldw	r19,12(sp)
1000902c:	dc800217 	ldw	r18,8(sp)
10009030:	dc400117 	ldw	r17,4(sp)
10009034:	dc000017 	ldw	r16,0(sp)
10009038:	dec00a04 	addi	sp,sp,40
1000903c:	000713c1 	jmpi	1000713c <_malloc_r>
10009040:	182f883a 	mov	r23,r3
10009044:	b8bfd216 	blt	r23,r2,10008f90 <__alt_data_end+0xf8008f90>
10009048:	00000806 	br	1000906c <_realloc_r+0x300>
1000904c:	21800117 	ldw	r6,4(r4)
10009050:	017fff04 	movi	r5,-4
10009054:	91c00404 	addi	r7,r18,16
10009058:	314c703a 	and	r6,r6,r5
1000905c:	344b883a 	add	r5,r6,r17
10009060:	29c0250e 	bge	r5,r7,100090f8 <_realloc_r+0x38c>
10009064:	200b883a 	mov	r5,r4
10009068:	003f6b06 	br	10008e18 <__alt_data_end+0xf8008e18>
1000906c:	b0800317 	ldw	r2,12(r22)
10009070:	b0c00217 	ldw	r3,8(r22)
10009074:	89bfff04 	addi	r6,r17,-4
10009078:	01000904 	movi	r4,36
1000907c:	18800315 	stw	r2,12(r3)
10009080:	10c00215 	stw	r3,8(r2)
10009084:	b5000204 	addi	r20,r22,8
10009088:	21bf7b2e 	bgeu	r4,r6,10008e78 <__alt_data_end+0xf8008e78>
1000908c:	a009883a 	mov	r4,r20
10009090:	800b883a 	mov	r5,r16
10009094:	0007af40 	call	10007af4 <memmove>
10009098:	b0c00117 	ldw	r3,4(r22)
1000909c:	b823883a 	mov	r17,r23
100090a0:	b027883a 	mov	r19,r22
100090a4:	003f8306 	br	10008eb4 <__alt_data_end+0xf8008eb4>
100090a8:	80c00017 	ldw	r3,0(r16)
100090ac:	a0c00015 	stw	r3,0(r20)
100090b0:	80c00117 	ldw	r3,4(r16)
100090b4:	a0c00115 	stw	r3,4(r20)
100090b8:	00c006c4 	movi	r3,27
100090bc:	19804736 	bltu	r3,r6,100091dc <_realloc_r+0x470>
100090c0:	a0800204 	addi	r2,r20,8
100090c4:	80c00204 	addi	r3,r16,8
100090c8:	003fc306 	br	10008fd8 <__alt_data_end+0xf8008fd8>
100090cc:	a007883a 	mov	r3,r20
100090d0:	80800017 	ldw	r2,0(r16)
100090d4:	b823883a 	mov	r17,r23
100090d8:	b027883a 	mov	r19,r22
100090dc:	18800015 	stw	r2,0(r3)
100090e0:	80800117 	ldw	r2,4(r16)
100090e4:	18800115 	stw	r2,4(r3)
100090e8:	80800217 	ldw	r2,8(r16)
100090ec:	18800215 	stw	r2,8(r3)
100090f0:	b0c00117 	ldw	r3,4(r22)
100090f4:	003f6f06 	br	10008eb4 <__alt_data_end+0xf8008eb4>
100090f8:	9ca7883a 	add	r19,r19,r18
100090fc:	2c85c83a 	sub	r2,r5,r18
10009100:	bcc00215 	stw	r19,8(r23)
10009104:	10800054 	ori	r2,r2,1
10009108:	98800115 	stw	r2,4(r19)
1000910c:	80bfff17 	ldw	r2,-4(r16)
10009110:	a809883a 	mov	r4,r21
10009114:	1080004c 	andi	r2,r2,1
10009118:	90a4b03a 	or	r18,r18,r2
1000911c:	84bfff15 	stw	r18,-4(r16)
10009120:	000f0500 	call	1000f050 <__malloc_unlock>
10009124:	8005883a 	mov	r2,r16
10009128:	003f6f06 	br	10008ee8 <__alt_data_end+0xf8008ee8>
1000912c:	a009883a 	mov	r4,r20
10009130:	800b883a 	mov	r5,r16
10009134:	0007af40 	call	10007af4 <memmove>
10009138:	003fad06 	br	10008ff0 <__alt_data_end+0xf8008ff0>
1000913c:	30f9883a 	add	fp,r6,r3
10009140:	91000404 	addi	r4,r18,16
10009144:	e13fbe16 	blt	fp,r4,10009040 <__alt_data_end+0xf8009040>
10009148:	b0800317 	ldw	r2,12(r22)
1000914c:	b0c00217 	ldw	r3,8(r22)
10009150:	89bfff04 	addi	r6,r17,-4
10009154:	01000904 	movi	r4,36
10009158:	18800315 	stw	r2,12(r3)
1000915c:	10c00215 	stw	r3,8(r2)
10009160:	b4400204 	addi	r17,r22,8
10009164:	21804336 	bltu	r4,r6,10009274 <_realloc_r+0x508>
10009168:	008004c4 	movi	r2,19
1000916c:	11803f2e 	bgeu	r2,r6,1000926c <_realloc_r+0x500>
10009170:	80800017 	ldw	r2,0(r16)
10009174:	b0800215 	stw	r2,8(r22)
10009178:	80800117 	ldw	r2,4(r16)
1000917c:	b0800315 	stw	r2,12(r22)
10009180:	008006c4 	movi	r2,27
10009184:	11803f36 	bltu	r2,r6,10009284 <_realloc_r+0x518>
10009188:	b0c00404 	addi	r3,r22,16
1000918c:	84000204 	addi	r16,r16,8
10009190:	80800017 	ldw	r2,0(r16)
10009194:	18800015 	stw	r2,0(r3)
10009198:	80800117 	ldw	r2,4(r16)
1000919c:	18800115 	stw	r2,4(r3)
100091a0:	80800217 	ldw	r2,8(r16)
100091a4:	18800215 	stw	r2,8(r3)
100091a8:	b487883a 	add	r3,r22,r18
100091ac:	e485c83a 	sub	r2,fp,r18
100091b0:	b8c00215 	stw	r3,8(r23)
100091b4:	10800054 	ori	r2,r2,1
100091b8:	18800115 	stw	r2,4(r3)
100091bc:	b0800117 	ldw	r2,4(r22)
100091c0:	a809883a 	mov	r4,r21
100091c4:	1080004c 	andi	r2,r2,1
100091c8:	90a4b03a 	or	r18,r18,r2
100091cc:	b4800115 	stw	r18,4(r22)
100091d0:	000f0500 	call	1000f050 <__malloc_unlock>
100091d4:	8805883a 	mov	r2,r17
100091d8:	003f4306 	br	10008ee8 <__alt_data_end+0xf8008ee8>
100091dc:	80c00217 	ldw	r3,8(r16)
100091e0:	a0c00215 	stw	r3,8(r20)
100091e4:	80c00317 	ldw	r3,12(r16)
100091e8:	a0c00315 	stw	r3,12(r20)
100091ec:	30801126 	beq	r6,r2,10009234 <_realloc_r+0x4c8>
100091f0:	a0800404 	addi	r2,r20,16
100091f4:	80c00404 	addi	r3,r16,16
100091f8:	003f7706 	br	10008fd8 <__alt_data_end+0xf8008fd8>
100091fc:	a13fff17 	ldw	r4,-4(r20)
10009200:	00bfff04 	movi	r2,-4
10009204:	8029883a 	mov	r20,r16
10009208:	2084703a 	and	r2,r4,r2
1000920c:	88a3883a 	add	r17,r17,r2
10009210:	003f2806 	br	10008eb4 <__alt_data_end+0xf8008eb4>
10009214:	80800217 	ldw	r2,8(r16)
10009218:	b0800415 	stw	r2,16(r22)
1000921c:	80800317 	ldw	r2,12(r16)
10009220:	b0800515 	stw	r2,20(r22)
10009224:	31000a26 	beq	r6,r4,10009250 <_realloc_r+0x4e4>
10009228:	b0c00604 	addi	r3,r22,24
1000922c:	84000404 	addi	r16,r16,16
10009230:	003fa706 	br	100090d0 <__alt_data_end+0xf80090d0>
10009234:	81000417 	ldw	r4,16(r16)
10009238:	a0800604 	addi	r2,r20,24
1000923c:	80c00604 	addi	r3,r16,24
10009240:	a1000415 	stw	r4,16(r20)
10009244:	81000517 	ldw	r4,20(r16)
10009248:	a1000515 	stw	r4,20(r20)
1000924c:	003f6206 	br	10008fd8 <__alt_data_end+0xf8008fd8>
10009250:	80800417 	ldw	r2,16(r16)
10009254:	84000604 	addi	r16,r16,24
10009258:	b0c00804 	addi	r3,r22,32
1000925c:	b0800615 	stw	r2,24(r22)
10009260:	80bfff17 	ldw	r2,-4(r16)
10009264:	b0800715 	stw	r2,28(r22)
10009268:	003f9906 	br	100090d0 <__alt_data_end+0xf80090d0>
1000926c:	8807883a 	mov	r3,r17
10009270:	003fc706 	br	10009190 <__alt_data_end+0xf8009190>
10009274:	8809883a 	mov	r4,r17
10009278:	800b883a 	mov	r5,r16
1000927c:	0007af40 	call	10007af4 <memmove>
10009280:	003fc906 	br	100091a8 <__alt_data_end+0xf80091a8>
10009284:	80800217 	ldw	r2,8(r16)
10009288:	b0800415 	stw	r2,16(r22)
1000928c:	80800317 	ldw	r2,12(r16)
10009290:	b0800515 	stw	r2,20(r22)
10009294:	31000726 	beq	r6,r4,100092b4 <_realloc_r+0x548>
10009298:	b0c00604 	addi	r3,r22,24
1000929c:	84000404 	addi	r16,r16,16
100092a0:	003fbb06 	br	10009190 <__alt_data_end+0xf8009190>
100092a4:	a809883a 	mov	r4,r21
100092a8:	000f0500 	call	1000f050 <__malloc_unlock>
100092ac:	0005883a 	mov	r2,zero
100092b0:	003f0d06 	br	10008ee8 <__alt_data_end+0xf8008ee8>
100092b4:	80800417 	ldw	r2,16(r16)
100092b8:	84000604 	addi	r16,r16,24
100092bc:	b0c00804 	addi	r3,r22,32
100092c0:	b0800615 	stw	r2,24(r22)
100092c4:	80bfff17 	ldw	r2,-4(r16)
100092c8:	b0800715 	stw	r2,28(r22)
100092cc:	003fb006 	br	10009190 <__alt_data_end+0xf8009190>

100092d0 <__fpclassifyd>:
100092d0:	00a00034 	movhi	r2,32768
100092d4:	10bfffc4 	addi	r2,r2,-1
100092d8:	288a703a 	and	r5,r5,r2
100092dc:	28000726 	beq	r5,zero,100092fc <__fpclassifyd+0x2c>
100092e0:	00bffc34 	movhi	r2,65520
100092e4:	2885883a 	add	r2,r5,r2
100092e8:	00dff834 	movhi	r3,32736
100092ec:	18ffffc4 	addi	r3,r3,-1
100092f0:	18800636 	bltu	r3,r2,1000930c <__fpclassifyd+0x3c>
100092f4:	00800104 	movi	r2,4
100092f8:	f800283a 	ret
100092fc:	2005003a 	cmpeq	r2,r4,zero
10009300:	00c000c4 	movi	r3,3
10009304:	1885c83a 	sub	r2,r3,r2
10009308:	f800283a 	ret
1000930c:	00800434 	movhi	r2,16
10009310:	10bfffc4 	addi	r2,r2,-1
10009314:	11400236 	bltu	r2,r5,10009320 <__fpclassifyd+0x50>
10009318:	008000c4 	movi	r2,3
1000931c:	f800283a 	ret
10009320:	009ffc34 	movhi	r2,32752
10009324:	28800226 	beq	r5,r2,10009330 <__fpclassifyd+0x60>
10009328:	0005883a 	mov	r2,zero
1000932c:	f800283a 	ret
10009330:	2005003a 	cmpeq	r2,r4,zero
10009334:	f800283a 	ret

10009338 <_sbrk_r>:
10009338:	defffd04 	addi	sp,sp,-12
1000933c:	dc400115 	stw	r17,4(sp)
10009340:	dc000015 	stw	r16,0(sp)
10009344:	2023883a 	mov	r17,r4
10009348:	04040074 	movhi	r16,4097
1000934c:	8414b604 	addi	r16,r16,21208
10009350:	2809883a 	mov	r4,r5
10009354:	dfc00215 	stw	ra,8(sp)
10009358:	80000015 	stw	zero,0(r16)
1000935c:	000f2380 	call	1000f238 <sbrk>
10009360:	00ffffc4 	movi	r3,-1
10009364:	10c00526 	beq	r2,r3,1000937c <_sbrk_r+0x44>
10009368:	dfc00217 	ldw	ra,8(sp)
1000936c:	dc400117 	ldw	r17,4(sp)
10009370:	dc000017 	ldw	r16,0(sp)
10009374:	dec00304 	addi	sp,sp,12
10009378:	f800283a 	ret
1000937c:	80c00017 	ldw	r3,0(r16)
10009380:	183ff926 	beq	r3,zero,10009368 <__alt_data_end+0xf8009368>
10009384:	88c00015 	stw	r3,0(r17)
10009388:	dfc00217 	ldw	ra,8(sp)
1000938c:	dc400117 	ldw	r17,4(sp)
10009390:	dc000017 	ldw	r16,0(sp)
10009394:	dec00304 	addi	sp,sp,12
10009398:	f800283a 	ret

1000939c <__sread>:
1000939c:	defffe04 	addi	sp,sp,-8
100093a0:	dc000015 	stw	r16,0(sp)
100093a4:	2821883a 	mov	r16,r5
100093a8:	2940038f 	ldh	r5,14(r5)
100093ac:	dfc00115 	stw	ra,4(sp)
100093b0:	000b1140 	call	1000b114 <_read_r>
100093b4:	10000716 	blt	r2,zero,100093d4 <__sread+0x38>
100093b8:	80c01417 	ldw	r3,80(r16)
100093bc:	1887883a 	add	r3,r3,r2
100093c0:	80c01415 	stw	r3,80(r16)
100093c4:	dfc00117 	ldw	ra,4(sp)
100093c8:	dc000017 	ldw	r16,0(sp)
100093cc:	dec00204 	addi	sp,sp,8
100093d0:	f800283a 	ret
100093d4:	80c0030b 	ldhu	r3,12(r16)
100093d8:	18fbffcc 	andi	r3,r3,61439
100093dc:	80c0030d 	sth	r3,12(r16)
100093e0:	dfc00117 	ldw	ra,4(sp)
100093e4:	dc000017 	ldw	r16,0(sp)
100093e8:	dec00204 	addi	sp,sp,8
100093ec:	f800283a 	ret

100093f0 <__seofread>:
100093f0:	0005883a 	mov	r2,zero
100093f4:	f800283a 	ret

100093f8 <__swrite>:
100093f8:	2880030b 	ldhu	r2,12(r5)
100093fc:	defffb04 	addi	sp,sp,-20
10009400:	dcc00315 	stw	r19,12(sp)
10009404:	dc800215 	stw	r18,8(sp)
10009408:	dc400115 	stw	r17,4(sp)
1000940c:	dc000015 	stw	r16,0(sp)
10009410:	dfc00415 	stw	ra,16(sp)
10009414:	10c0400c 	andi	r3,r2,256
10009418:	2821883a 	mov	r16,r5
1000941c:	2027883a 	mov	r19,r4
10009420:	3025883a 	mov	r18,r6
10009424:	3823883a 	mov	r17,r7
10009428:	18000526 	beq	r3,zero,10009440 <__swrite+0x48>
1000942c:	2940038f 	ldh	r5,14(r5)
10009430:	000d883a 	mov	r6,zero
10009434:	01c00084 	movi	r7,2
10009438:	000b0a80 	call	1000b0a8 <_lseek_r>
1000943c:	8080030b 	ldhu	r2,12(r16)
10009440:	8140038f 	ldh	r5,14(r16)
10009444:	10bbffcc 	andi	r2,r2,61439
10009448:	9809883a 	mov	r4,r19
1000944c:	900d883a 	mov	r6,r18
10009450:	880f883a 	mov	r7,r17
10009454:	8080030d 	sth	r2,12(r16)
10009458:	dfc00417 	ldw	ra,16(sp)
1000945c:	dcc00317 	ldw	r19,12(sp)
10009460:	dc800217 	ldw	r18,8(sp)
10009464:	dc400117 	ldw	r17,4(sp)
10009468:	dc000017 	ldw	r16,0(sp)
1000946c:	dec00504 	addi	sp,sp,20
10009470:	000aafc1 	jmpi	1000aafc <_write_r>

10009474 <__sseek>:
10009474:	defffe04 	addi	sp,sp,-8
10009478:	dc000015 	stw	r16,0(sp)
1000947c:	2821883a 	mov	r16,r5
10009480:	2940038f 	ldh	r5,14(r5)
10009484:	dfc00115 	stw	ra,4(sp)
10009488:	000b0a80 	call	1000b0a8 <_lseek_r>
1000948c:	00ffffc4 	movi	r3,-1
10009490:	10c00826 	beq	r2,r3,100094b4 <__sseek+0x40>
10009494:	80c0030b 	ldhu	r3,12(r16)
10009498:	80801415 	stw	r2,80(r16)
1000949c:	18c40014 	ori	r3,r3,4096
100094a0:	80c0030d 	sth	r3,12(r16)
100094a4:	dfc00117 	ldw	ra,4(sp)
100094a8:	dc000017 	ldw	r16,0(sp)
100094ac:	dec00204 	addi	sp,sp,8
100094b0:	f800283a 	ret
100094b4:	80c0030b 	ldhu	r3,12(r16)
100094b8:	18fbffcc 	andi	r3,r3,61439
100094bc:	80c0030d 	sth	r3,12(r16)
100094c0:	dfc00117 	ldw	ra,4(sp)
100094c4:	dc000017 	ldw	r16,0(sp)
100094c8:	dec00204 	addi	sp,sp,8
100094cc:	f800283a 	ret

100094d0 <__sclose>:
100094d0:	2940038f 	ldh	r5,14(r5)
100094d4:	000ab681 	jmpi	1000ab68 <_close_r>

100094d8 <strcmp>:
100094d8:	2144b03a 	or	r2,r4,r5
100094dc:	108000cc 	andi	r2,r2,3
100094e0:	1000171e 	bne	r2,zero,10009540 <strcmp+0x68>
100094e4:	20800017 	ldw	r2,0(r4)
100094e8:	28c00017 	ldw	r3,0(r5)
100094ec:	10c0141e 	bne	r2,r3,10009540 <strcmp+0x68>
100094f0:	027fbff4 	movhi	r9,65279
100094f4:	4a7fbfc4 	addi	r9,r9,-257
100094f8:	1247883a 	add	r3,r2,r9
100094fc:	0084303a 	nor	r2,zero,r2
10009500:	1884703a 	and	r2,r3,r2
10009504:	02202074 	movhi	r8,32897
10009508:	42202004 	addi	r8,r8,-32640
1000950c:	1204703a 	and	r2,r2,r8
10009510:	10000226 	beq	r2,zero,1000951c <strcmp+0x44>
10009514:	00001706 	br	10009574 <strcmp+0x9c>
10009518:	3000161e 	bne	r6,zero,10009574 <strcmp+0x9c>
1000951c:	21000104 	addi	r4,r4,4
10009520:	20800017 	ldw	r2,0(r4)
10009524:	29400104 	addi	r5,r5,4
10009528:	28c00017 	ldw	r3,0(r5)
1000952c:	124f883a 	add	r7,r2,r9
10009530:	008c303a 	nor	r6,zero,r2
10009534:	398c703a 	and	r6,r7,r6
10009538:	320c703a 	and	r6,r6,r8
1000953c:	10fff626 	beq	r2,r3,10009518 <__alt_data_end+0xf8009518>
10009540:	20800007 	ldb	r2,0(r4)
10009544:	1000051e 	bne	r2,zero,1000955c <strcmp+0x84>
10009548:	00000606 	br	10009564 <strcmp+0x8c>
1000954c:	21000044 	addi	r4,r4,1
10009550:	20800007 	ldb	r2,0(r4)
10009554:	29400044 	addi	r5,r5,1
10009558:	10000226 	beq	r2,zero,10009564 <strcmp+0x8c>
1000955c:	28c00007 	ldb	r3,0(r5)
10009560:	10fffa26 	beq	r2,r3,1000954c <__alt_data_end+0xf800954c>
10009564:	20c00003 	ldbu	r3,0(r4)
10009568:	28800003 	ldbu	r2,0(r5)
1000956c:	1885c83a 	sub	r2,r3,r2
10009570:	f800283a 	ret
10009574:	0005883a 	mov	r2,zero
10009578:	f800283a 	ret

1000957c <__sprint_r.part.0>:
1000957c:	28801917 	ldw	r2,100(r5)
10009580:	defff604 	addi	sp,sp,-40
10009584:	dd800615 	stw	r22,24(sp)
10009588:	dcc00315 	stw	r19,12(sp)
1000958c:	dfc00915 	stw	ra,36(sp)
10009590:	df000815 	stw	fp,32(sp)
10009594:	ddc00715 	stw	r23,28(sp)
10009598:	dd400515 	stw	r21,20(sp)
1000959c:	dd000415 	stw	r20,16(sp)
100095a0:	dc800215 	stw	r18,8(sp)
100095a4:	dc400115 	stw	r17,4(sp)
100095a8:	dc000015 	stw	r16,0(sp)
100095ac:	1088000c 	andi	r2,r2,8192
100095b0:	2827883a 	mov	r19,r5
100095b4:	302d883a 	mov	r22,r6
100095b8:	10002d26 	beq	r2,zero,10009670 <__sprint_r.part.0+0xf4>
100095bc:	30800217 	ldw	r2,8(r6)
100095c0:	35c00017 	ldw	r23,0(r6)
100095c4:	10002826 	beq	r2,zero,10009668 <__sprint_r.part.0+0xec>
100095c8:	202b883a 	mov	r21,r4
100095cc:	bf000104 	addi	fp,r23,4
100095d0:	053fffc4 	movi	r20,-1
100095d4:	e4800017 	ldw	r18,0(fp)
100095d8:	bc400017 	ldw	r17,0(r23)
100095dc:	0021883a 	mov	r16,zero
100095e0:	9024d0ba 	srli	r18,r18,2
100095e4:	04800316 	blt	zero,r18,100095f4 <__sprint_r.part.0+0x78>
100095e8:	00001806 	br	1000964c <__sprint_r.part.0+0xd0>
100095ec:	8c400104 	addi	r17,r17,4
100095f0:	94001526 	beq	r18,r16,10009648 <__sprint_r.part.0+0xcc>
100095f4:	89400017 	ldw	r5,0(r17)
100095f8:	a809883a 	mov	r4,r21
100095fc:	980d883a 	mov	r6,r19
10009600:	000ade00 	call	1000ade0 <_fputwc_r>
10009604:	84000044 	addi	r16,r16,1
10009608:	153ff81e 	bne	r2,r20,100095ec <__alt_data_end+0xf80095ec>
1000960c:	a005883a 	mov	r2,r20
10009610:	b0000215 	stw	zero,8(r22)
10009614:	b0000115 	stw	zero,4(r22)
10009618:	dfc00917 	ldw	ra,36(sp)
1000961c:	df000817 	ldw	fp,32(sp)
10009620:	ddc00717 	ldw	r23,28(sp)
10009624:	dd800617 	ldw	r22,24(sp)
10009628:	dd400517 	ldw	r21,20(sp)
1000962c:	dd000417 	ldw	r20,16(sp)
10009630:	dcc00317 	ldw	r19,12(sp)
10009634:	dc800217 	ldw	r18,8(sp)
10009638:	dc400117 	ldw	r17,4(sp)
1000963c:	dc000017 	ldw	r16,0(sp)
10009640:	dec00a04 	addi	sp,sp,40
10009644:	f800283a 	ret
10009648:	b0800217 	ldw	r2,8(r22)
1000964c:	94a5883a 	add	r18,r18,r18
10009650:	94a5883a 	add	r18,r18,r18
10009654:	1485c83a 	sub	r2,r2,r18
10009658:	b0800215 	stw	r2,8(r22)
1000965c:	bdc00204 	addi	r23,r23,8
10009660:	e7000204 	addi	fp,fp,8
10009664:	103fdb1e 	bne	r2,zero,100095d4 <__alt_data_end+0xf80095d4>
10009668:	0005883a 	mov	r2,zero
1000966c:	003fe806 	br	10009610 <__alt_data_end+0xf8009610>
10009670:	00068a80 	call	100068a8 <__sfvwrite_r>
10009674:	003fe606 	br	10009610 <__alt_data_end+0xf8009610>

10009678 <__sprint_r>:
10009678:	30c00217 	ldw	r3,8(r6)
1000967c:	18000126 	beq	r3,zero,10009684 <__sprint_r+0xc>
10009680:	000957c1 	jmpi	1000957c <__sprint_r.part.0>
10009684:	30000115 	stw	zero,4(r6)
10009688:	0005883a 	mov	r2,zero
1000968c:	f800283a 	ret

10009690 <___vfiprintf_internal_r>:
10009690:	defec804 	addi	sp,sp,-1248
10009694:	dfc13715 	stw	ra,1244(sp)
10009698:	df013615 	stw	fp,1240(sp)
1000969c:	ddc13515 	stw	r23,1236(sp)
100096a0:	dd813415 	stw	r22,1232(sp)
100096a4:	dd413315 	stw	r21,1228(sp)
100096a8:	dd013215 	stw	r20,1224(sp)
100096ac:	dcc13115 	stw	r19,1220(sp)
100096b0:	dc813015 	stw	r18,1216(sp)
100096b4:	dc412f15 	stw	r17,1212(sp)
100096b8:	dc012e15 	stw	r16,1208(sp)
100096bc:	d9012215 	stw	r4,1160(sp)
100096c0:	d9412015 	stw	r5,1152(sp)
100096c4:	d9c12315 	stw	r7,1164(sp)
100096c8:	3013883a 	mov	r9,r6
100096cc:	20000226 	beq	r4,zero,100096d8 <___vfiprintf_internal_r+0x48>
100096d0:	20800e17 	ldw	r2,56(r4)
100096d4:	1000f926 	beq	r2,zero,10009abc <___vfiprintf_internal_r+0x42c>
100096d8:	d8c12017 	ldw	r3,1152(sp)
100096dc:	1880030b 	ldhu	r2,12(r3)
100096e0:	1108000c 	andi	r4,r2,8192
100096e4:	1007883a 	mov	r3,r2
100096e8:	2000081e 	bne	r4,zero,1000970c <___vfiprintf_internal_r+0x7c>
100096ec:	d9412017 	ldw	r5,1152(sp)
100096f0:	10c80014 	ori	r3,r2,8192
100096f4:	00b7ffc4 	movi	r2,-8193
100096f8:	29001917 	ldw	r4,100(r5)
100096fc:	28c0030d 	sth	r3,12(r5)
10009700:	2088703a 	and	r4,r4,r2
10009704:	29001915 	stw	r4,100(r5)
10009708:	1805883a 	mov	r2,r3
1000970c:	1900020c 	andi	r4,r3,8
10009710:	2000a726 	beq	r4,zero,100099b0 <___vfiprintf_internal_r+0x320>
10009714:	d9412017 	ldw	r5,1152(sp)
10009718:	29000417 	ldw	r4,16(r5)
1000971c:	2000a426 	beq	r4,zero,100099b0 <___vfiprintf_internal_r+0x320>
10009720:	18c0068c 	andi	r3,r3,26
10009724:	01000284 	movi	r4,10
10009728:	1900ad26 	beq	r3,r4,100099e0 <___vfiprintf_internal_r+0x350>
1000972c:	d90109c4 	addi	r4,sp,1063
10009730:	d9410a04 	addi	r5,sp,1064
10009734:	2905c83a 	sub	r2,r5,r4
10009738:	d9011e15 	stw	r4,1144(sp)
1000973c:	d9411f15 	stw	r5,1148(sp)
10009740:	dec11a15 	stw	sp,1128(sp)
10009744:	d8011c15 	stw	zero,1136(sp)
10009748:	d8011b15 	stw	zero,1132(sp)
1000974c:	d8012715 	stw	zero,1180(sp)
10009750:	d8012415 	stw	zero,1168(sp)
10009754:	d811883a 	mov	r8,sp
10009758:	04c40074 	movhi	r19,4097
1000975c:	9cc6e804 	addi	r19,r19,7072
10009760:	04040074 	movhi	r16,4097
10009764:	8406e404 	addi	r16,r16,7056
10009768:	d8812815 	stw	r2,1184(sp)
1000976c:	48800007 	ldb	r2,0(r9)
10009770:	10040126 	beq	r2,zero,1000a778 <___vfiprintf_internal_r+0x10e8>
10009774:	00c00944 	movi	r3,37
10009778:	4829883a 	mov	r20,r9
1000977c:	10c0021e 	bne	r2,r3,10009788 <___vfiprintf_internal_r+0xf8>
10009780:	00001606 	br	100097dc <___vfiprintf_internal_r+0x14c>
10009784:	10c00326 	beq	r2,r3,10009794 <___vfiprintf_internal_r+0x104>
10009788:	a5000044 	addi	r20,r20,1
1000978c:	a0800007 	ldb	r2,0(r20)
10009790:	103ffc1e 	bne	r2,zero,10009784 <__alt_data_end+0xf8009784>
10009794:	a263c83a 	sub	r17,r20,r9
10009798:	88001026 	beq	r17,zero,100097dc <___vfiprintf_internal_r+0x14c>
1000979c:	d8c11c17 	ldw	r3,1136(sp)
100097a0:	d8811b17 	ldw	r2,1132(sp)
100097a4:	42400015 	stw	r9,0(r8)
100097a8:	88c7883a 	add	r3,r17,r3
100097ac:	10800044 	addi	r2,r2,1
100097b0:	44400115 	stw	r17,4(r8)
100097b4:	d8c11c15 	stw	r3,1136(sp)
100097b8:	d8811b15 	stw	r2,1132(sp)
100097bc:	010001c4 	movi	r4,7
100097c0:	2080760e 	bge	r4,r2,1000999c <___vfiprintf_internal_r+0x30c>
100097c4:	1803b41e 	bne	r3,zero,1000a698 <___vfiprintf_internal_r+0x1008>
100097c8:	d8c12417 	ldw	r3,1168(sp)
100097cc:	d8011b15 	stw	zero,1132(sp)
100097d0:	d811883a 	mov	r8,sp
100097d4:	1c47883a 	add	r3,r3,r17
100097d8:	d8c12415 	stw	r3,1168(sp)
100097dc:	a0800007 	ldb	r2,0(r20)
100097e0:	1002dc26 	beq	r2,zero,1000a354 <___vfiprintf_internal_r+0xcc4>
100097e4:	04bfffc4 	movi	r18,-1
100097e8:	a2400044 	addi	r9,r20,1
100097ec:	a0c00047 	ldb	r3,1(r20)
100097f0:	d8011d85 	stb	zero,1142(sp)
100097f4:	002d883a 	mov	r22,zero
100097f8:	d8012115 	stw	zero,1156(sp)
100097fc:	0023883a 	mov	r17,zero
10009800:	05001604 	movi	r20,88
10009804:	05400244 	movi	r21,9
10009808:	402f883a 	mov	r23,r8
1000980c:	900d883a 	mov	r6,r18
10009810:	4a400044 	addi	r9,r9,1
10009814:	18bff804 	addi	r2,r3,-32
10009818:	a0828736 	bltu	r20,r2,1000a238 <___vfiprintf_internal_r+0xba8>
1000981c:	1085883a 	add	r2,r2,r2
10009820:	1085883a 	add	r2,r2,r2
10009824:	01040074 	movhi	r4,4097
10009828:	21260e04 	addi	r4,r4,-26568
1000982c:	1105883a 	add	r2,r2,r4
10009830:	10800017 	ldw	r2,0(r2)
10009834:	1000683a 	jmp	r2
10009838:	10009f98 	cmpnei	zero,r2,638
1000983c:	1000a238 	rdprs	zero,r2,648
10009840:	1000a238 	rdprs	zero,r2,648
10009844:	10009fb4 	orhi	zero,r2,638
10009848:	1000a238 	rdprs	zero,r2,648
1000984c:	1000a238 	rdprs	zero,r2,648
10009850:	1000a238 	rdprs	zero,r2,648
10009854:	1000a238 	rdprs	zero,r2,648
10009858:	1000a238 	rdprs	zero,r2,648
1000985c:	1000a238 	rdprs	zero,r2,648
10009860:	1000a048 	cmpgei	zero,r2,641
10009864:	1000a070 	cmpltui	zero,r2,641
10009868:	1000a238 	rdprs	zero,r2,648
1000986c:	10009adc 	xori	zero,r2,619
10009870:	1000a07c 	xorhi	zero,r2,641
10009874:	1000a238 	rdprs	zero,r2,648
10009878:	10009ae8 	cmpgeui	zero,r2,619
1000987c:	10009af4 	orhi	zero,r2,619
10009880:	10009af4 	orhi	zero,r2,619
10009884:	10009af4 	orhi	zero,r2,619
10009888:	10009af4 	orhi	zero,r2,619
1000988c:	10009af4 	orhi	zero,r2,619
10009890:	10009af4 	orhi	zero,r2,619
10009894:	10009af4 	orhi	zero,r2,619
10009898:	10009af4 	orhi	zero,r2,619
1000989c:	10009af4 	orhi	zero,r2,619
100098a0:	1000a238 	rdprs	zero,r2,648
100098a4:	1000a238 	rdprs	zero,r2,648
100098a8:	1000a238 	rdprs	zero,r2,648
100098ac:	1000a238 	rdprs	zero,r2,648
100098b0:	1000a238 	rdprs	zero,r2,648
100098b4:	1000a238 	rdprs	zero,r2,648
100098b8:	1000a238 	rdprs	zero,r2,648
100098bc:	1000a238 	rdprs	zero,r2,648
100098c0:	1000a238 	rdprs	zero,r2,648
100098c4:	1000a238 	rdprs	zero,r2,648
100098c8:	10009b3c 	xorhi	zero,r2,620
100098cc:	1000a238 	rdprs	zero,r2,648
100098d0:	1000a238 	rdprs	zero,r2,648
100098d4:	1000a238 	rdprs	zero,r2,648
100098d8:	1000a238 	rdprs	zero,r2,648
100098dc:	1000a238 	rdprs	zero,r2,648
100098e0:	1000a238 	rdprs	zero,r2,648
100098e4:	1000a238 	rdprs	zero,r2,648
100098e8:	1000a238 	rdprs	zero,r2,648
100098ec:	1000a238 	rdprs	zero,r2,648
100098f0:	1000a238 	rdprs	zero,r2,648
100098f4:	10009e90 	cmplti	zero,r2,634
100098f8:	1000a238 	rdprs	zero,r2,648
100098fc:	1000a238 	rdprs	zero,r2,648
10009900:	1000a238 	rdprs	zero,r2,648
10009904:	1000a238 	rdprs	zero,r2,648
10009908:	1000a238 	rdprs	zero,r2,648
1000990c:	10009ed4 	ori	zero,r2,635
10009910:	1000a238 	rdprs	zero,r2,648
10009914:	1000a238 	rdprs	zero,r2,648
10009918:	10009f0c 	andi	zero,r2,636
1000991c:	1000a238 	rdprs	zero,r2,648
10009920:	1000a238 	rdprs	zero,r2,648
10009924:	1000a238 	rdprs	zero,r2,648
10009928:	1000a238 	rdprs	zero,r2,648
1000992c:	1000a238 	rdprs	zero,r2,648
10009930:	1000a238 	rdprs	zero,r2,648
10009934:	1000a238 	rdprs	zero,r2,648
10009938:	1000a238 	rdprs	zero,r2,648
1000993c:	1000a238 	rdprs	zero,r2,648
10009940:	1000a238 	rdprs	zero,r2,648
10009944:	10009f68 	cmpgeui	zero,r2,637
10009948:	1000a0dc 	xori	zero,r2,643
1000994c:	1000a238 	rdprs	zero,r2,648
10009950:	1000a238 	rdprs	zero,r2,648
10009954:	1000a238 	rdprs	zero,r2,648
10009958:	1000a0d0 	cmplti	zero,r2,643
1000995c:	1000a0dc 	xori	zero,r2,643
10009960:	1000a238 	rdprs	zero,r2,648
10009964:	1000a238 	rdprs	zero,r2,648
10009968:	10009fc0 	call	110009fc <_gp+0xfe526c>
1000996c:	1000a238 	rdprs	zero,r2,648
10009970:	10009fd8 	cmpnei	zero,r2,639
10009974:	1000a010 	cmplti	zero,r2,640
10009978:	1000a1f0 	cmpltui	zero,r2,647
1000997c:	1000a114 	ori	zero,r2,644
10009980:	1000a238 	rdprs	zero,r2,648
10009984:	1000a120 	cmpeqi	zero,r2,644
10009988:	1000a238 	rdprs	zero,r2,648
1000998c:	1000a178 	rdprs	zero,r2,645
10009990:	1000a238 	rdprs	zero,r2,648
10009994:	1000a238 	rdprs	zero,r2,648
10009998:	1000a1b0 	cmpltui	zero,r2,646
1000999c:	42000204 	addi	r8,r8,8
100099a0:	d8c12417 	ldw	r3,1168(sp)
100099a4:	1c47883a 	add	r3,r3,r17
100099a8:	d8c12415 	stw	r3,1168(sp)
100099ac:	003f8b06 	br	100097dc <__alt_data_end+0xf80097dc>
100099b0:	d9012217 	ldw	r4,1160(sp)
100099b4:	d9412017 	ldw	r5,1152(sp)
100099b8:	da412d15 	stw	r9,1204(sp)
100099bc:	00044e80 	call	100044e8 <__swsetup_r>
100099c0:	da412d17 	ldw	r9,1204(sp)
100099c4:	1000301e 	bne	r2,zero,10009a88 <___vfiprintf_internal_r+0x3f8>
100099c8:	d8c12017 	ldw	r3,1152(sp)
100099cc:	01000284 	movi	r4,10
100099d0:	1880030b 	ldhu	r2,12(r3)
100099d4:	1007883a 	mov	r3,r2
100099d8:	18c0068c 	andi	r3,r3,26
100099dc:	193f531e 	bne	r3,r4,1000972c <__alt_data_end+0xf800972c>
100099e0:	d9012017 	ldw	r4,1152(sp)
100099e4:	20c0038b 	ldhu	r3,14(r4)
100099e8:	193fffcc 	andi	r4,r3,65535
100099ec:	2120001c 	xori	r4,r4,32768
100099f0:	21200004 	addi	r4,r4,-32768
100099f4:	203f4d16 	blt	r4,zero,1000972c <__alt_data_end+0xf800972c>
100099f8:	d9412017 	ldw	r5,1152(sp)
100099fc:	d9012217 	ldw	r4,1160(sp)
10009a00:	d9c12317 	ldw	r7,1164(sp)
10009a04:	2b001917 	ldw	r12,100(r5)
10009a08:	2ac00717 	ldw	r11,28(r5)
10009a0c:	2a800917 	ldw	r10,36(r5)
10009a10:	02010004 	movi	r8,1024
10009a14:	10bfff4c 	andi	r2,r2,65533
10009a18:	da0b883a 	add	r5,sp,r8
10009a1c:	480d883a 	mov	r6,r9
10009a20:	d881030d 	sth	r2,1036(sp)
10009a24:	db011915 	stw	r12,1124(sp)
10009a28:	d8c1038d 	sth	r3,1038(sp)
10009a2c:	dac10715 	stw	r11,1052(sp)
10009a30:	da810915 	stw	r10,1060(sp)
10009a34:	dec10015 	stw	sp,1024(sp)
10009a38:	dec10415 	stw	sp,1040(sp)
10009a3c:	da010215 	stw	r8,1032(sp)
10009a40:	da010515 	stw	r8,1044(sp)
10009a44:	d8010615 	stw	zero,1048(sp)
10009a48:	00096900 	call	10009690 <___vfiprintf_internal_r>
10009a4c:	1021883a 	mov	r16,r2
10009a50:	10000416 	blt	r2,zero,10009a64 <___vfiprintf_internal_r+0x3d4>
10009a54:	d9012217 	ldw	r4,1160(sp)
10009a58:	d9410004 	addi	r5,sp,1024
10009a5c:	0005e840 	call	10005e84 <_fflush_r>
10009a60:	10040b1e 	bne	r2,zero,1000aa90 <___vfiprintf_internal_r+0x1400>
10009a64:	d881030b 	ldhu	r2,1036(sp)
10009a68:	1080100c 	andi	r2,r2,64
10009a6c:	10000426 	beq	r2,zero,10009a80 <___vfiprintf_internal_r+0x3f0>
10009a70:	d8c12017 	ldw	r3,1152(sp)
10009a74:	1880030b 	ldhu	r2,12(r3)
10009a78:	10801014 	ori	r2,r2,64
10009a7c:	1880030d 	sth	r2,12(r3)
10009a80:	8005883a 	mov	r2,r16
10009a84:	00000106 	br	10009a8c <___vfiprintf_internal_r+0x3fc>
10009a88:	00bfffc4 	movi	r2,-1
10009a8c:	dfc13717 	ldw	ra,1244(sp)
10009a90:	df013617 	ldw	fp,1240(sp)
10009a94:	ddc13517 	ldw	r23,1236(sp)
10009a98:	dd813417 	ldw	r22,1232(sp)
10009a9c:	dd413317 	ldw	r21,1228(sp)
10009aa0:	dd013217 	ldw	r20,1224(sp)
10009aa4:	dcc13117 	ldw	r19,1220(sp)
10009aa8:	dc813017 	ldw	r18,1216(sp)
10009aac:	dc412f17 	ldw	r17,1212(sp)
10009ab0:	dc012e17 	ldw	r16,1208(sp)
10009ab4:	dec13804 	addi	sp,sp,1248
10009ab8:	f800283a 	ret
10009abc:	d9812d15 	stw	r6,1204(sp)
10009ac0:	00061a40 	call	100061a4 <__sinit>
10009ac4:	da412d17 	ldw	r9,1204(sp)
10009ac8:	003f0306 	br	100096d8 <__alt_data_end+0xf80096d8>
10009acc:	d9412117 	ldw	r5,1156(sp)
10009ad0:	d8812315 	stw	r2,1164(sp)
10009ad4:	014bc83a 	sub	r5,zero,r5
10009ad8:	d9412115 	stw	r5,1156(sp)
10009adc:	8c400114 	ori	r17,r17,4
10009ae0:	48c00007 	ldb	r3,0(r9)
10009ae4:	003f4a06 	br	10009810 <__alt_data_end+0xf8009810>
10009ae8:	8c402014 	ori	r17,r17,128
10009aec:	48c00007 	ldb	r3,0(r9)
10009af0:	003f4706 	br	10009810 <__alt_data_end+0xf8009810>
10009af4:	4825883a 	mov	r18,r9
10009af8:	d8012115 	stw	zero,1156(sp)
10009afc:	1f3ff404 	addi	fp,r3,-48
10009b00:	00000106 	br	10009b08 <___vfiprintf_internal_r+0x478>
10009b04:	1025883a 	mov	r18,r2
10009b08:	d9012117 	ldw	r4,1156(sp)
10009b0c:	01400284 	movi	r5,10
10009b10:	d9812b15 	stw	r6,1196(sp)
10009b14:	000c2b80 	call	1000c2b8 <__mulsi3>
10009b18:	90c00007 	ldb	r3,0(r18)
10009b1c:	1739883a 	add	fp,r2,fp
10009b20:	df012115 	stw	fp,1156(sp)
10009b24:	90800044 	addi	r2,r18,1
10009b28:	1f3ff404 	addi	fp,r3,-48
10009b2c:	1013883a 	mov	r9,r2
10009b30:	d9812b17 	ldw	r6,1196(sp)
10009b34:	af3ff32e 	bgeu	r21,fp,10009b04 <__alt_data_end+0xf8009b04>
10009b38:	003f3606 	br	10009814 <__alt_data_end+0xf8009814>
10009b3c:	8c400414 	ori	r17,r17,16
10009b40:	dd811d85 	stb	r22,1142(sp)
10009b44:	8880080c 	andi	r2,r17,32
10009b48:	b811883a 	mov	r8,r23
10009b4c:	3025883a 	mov	r18,r6
10009b50:	10016726 	beq	r2,zero,1000a0f0 <___vfiprintf_internal_r+0xa60>
10009b54:	d8c12317 	ldw	r3,1164(sp)
10009b58:	18800117 	ldw	r2,4(r3)
10009b5c:	1d000017 	ldw	r20,0(r3)
10009b60:	18c00204 	addi	r3,r3,8
10009b64:	d8c12315 	stw	r3,1164(sp)
10009b68:	102b883a 	mov	r21,r2
10009b6c:	10030416 	blt	r2,zero,1000a780 <___vfiprintf_internal_r+0x10f0>
10009b70:	dd811d83 	ldbu	r22,1142(sp)
10009b74:	900f883a 	mov	r7,r18
10009b78:	00800044 	movi	r2,1
10009b7c:	a548b03a 	or	r4,r20,r21
10009b80:	90000216 	blt	r18,zero,10009b8c <___vfiprintf_internal_r+0x4fc>
10009b84:	00ffdfc4 	movi	r3,-129
10009b88:	88e2703a 	and	r17,r17,r3
10009b8c:	10803fcc 	andi	r2,r2,255
10009b90:	2001db1e 	bne	r4,zero,1000a300 <___vfiprintf_internal_r+0xc70>
10009b94:	9001da1e 	bne	r18,zero,1000a300 <___vfiprintf_internal_r+0xc70>
10009b98:	1002ab1e 	bne	r2,zero,1000a648 <___vfiprintf_internal_r+0xfb8>
10009b9c:	8880004c 	andi	r2,r17,1
10009ba0:	1002a926 	beq	r2,zero,1000a648 <___vfiprintf_internal_r+0xfb8>
10009ba4:	d9c12817 	ldw	r7,1184(sp)
10009ba8:	00800c04 	movi	r2,48
10009bac:	d88109c5 	stb	r2,1063(sp)
10009bb0:	ddc109c4 	addi	r23,sp,1063
10009bb4:	3829883a 	mov	r20,r7
10009bb8:	3c80010e 	bge	r7,r18,10009bc0 <___vfiprintf_internal_r+0x530>
10009bbc:	9029883a 	mov	r20,r18
10009bc0:	b5803fcc 	andi	r22,r22,255
10009bc4:	b580201c 	xori	r22,r22,128
10009bc8:	b5bfe004 	addi	r22,r22,-128
10009bcc:	b0000126 	beq	r22,zero,10009bd4 <___vfiprintf_internal_r+0x544>
10009bd0:	a5000044 	addi	r20,r20,1
10009bd4:	8a80008c 	andi	r10,r17,2
10009bd8:	50000126 	beq	r10,zero,10009be0 <___vfiprintf_internal_r+0x550>
10009bdc:	a5000084 	addi	r20,r20,2
10009be0:	8d40210c 	andi	r21,r17,132
10009be4:	a801aa1e 	bne	r21,zero,1000a290 <___vfiprintf_internal_r+0xc00>
10009be8:	d8c12117 	ldw	r3,1156(sp)
10009bec:	1d2dc83a 	sub	r22,r3,r20
10009bf0:	0581a70e 	bge	zero,r22,1000a290 <___vfiprintf_internal_r+0xc00>
10009bf4:	07000404 	movi	fp,16
10009bf8:	d8c11c17 	ldw	r3,1136(sp)
10009bfc:	e583780e 	bge	fp,r22,1000a9e0 <___vfiprintf_internal_r+0x1350>
10009c00:	01440074 	movhi	r5,4097
10009c04:	2946e804 	addi	r5,r5,7072
10009c08:	dc412615 	stw	r17,1176(sp)
10009c0c:	d9011b17 	ldw	r4,1132(sp)
10009c10:	b023883a 	mov	r17,r22
10009c14:	d9412515 	stw	r5,1172(sp)
10009c18:	030001c4 	movi	r12,7
10009c1c:	d9c12915 	stw	r7,1188(sp)
10009c20:	da812a15 	stw	r10,1192(sp)
10009c24:	482d883a 	mov	r22,r9
10009c28:	00000506 	br	10009c40 <___vfiprintf_internal_r+0x5b0>
10009c2c:	21400084 	addi	r5,r4,2
10009c30:	42000204 	addi	r8,r8,8
10009c34:	1009883a 	mov	r4,r2
10009c38:	8c7ffc04 	addi	r17,r17,-16
10009c3c:	e4400d0e 	bge	fp,r17,10009c74 <___vfiprintf_internal_r+0x5e4>
10009c40:	18c00404 	addi	r3,r3,16
10009c44:	20800044 	addi	r2,r4,1
10009c48:	44c00015 	stw	r19,0(r8)
10009c4c:	47000115 	stw	fp,4(r8)
10009c50:	d8c11c15 	stw	r3,1136(sp)
10009c54:	d8811b15 	stw	r2,1132(sp)
10009c58:	60bff40e 	bge	r12,r2,10009c2c <__alt_data_end+0xf8009c2c>
10009c5c:	1801801e 	bne	r3,zero,1000a260 <___vfiprintf_internal_r+0xbd0>
10009c60:	8c7ffc04 	addi	r17,r17,-16
10009c64:	0009883a 	mov	r4,zero
10009c68:	01400044 	movi	r5,1
10009c6c:	d811883a 	mov	r8,sp
10009c70:	e47ff316 	blt	fp,r17,10009c40 <__alt_data_end+0xf8009c40>
10009c74:	b013883a 	mov	r9,r22
10009c78:	d9c12917 	ldw	r7,1188(sp)
10009c7c:	882d883a 	mov	r22,r17
10009c80:	da812a17 	ldw	r10,1192(sp)
10009c84:	dc412617 	ldw	r17,1176(sp)
10009c88:	d8812517 	ldw	r2,1172(sp)
10009c8c:	b0c7883a 	add	r3,r22,r3
10009c90:	45800115 	stw	r22,4(r8)
10009c94:	40800015 	stw	r2,0(r8)
10009c98:	d8c11c15 	stw	r3,1136(sp)
10009c9c:	d9411b15 	stw	r5,1132(sp)
10009ca0:	008001c4 	movi	r2,7
10009ca4:	11426a16 	blt	r2,r5,1000a650 <___vfiprintf_internal_r+0xfc0>
10009ca8:	d9011d87 	ldb	r4,1142(sp)
10009cac:	42000204 	addi	r8,r8,8
10009cb0:	28800044 	addi	r2,r5,1
10009cb4:	20017b1e 	bne	r4,zero,1000a2a4 <___vfiprintf_internal_r+0xc14>
10009cb8:	50000c26 	beq	r10,zero,10009cec <___vfiprintf_internal_r+0x65c>
10009cbc:	d9011d04 	addi	r4,sp,1140
10009cc0:	18c00084 	addi	r3,r3,2
10009cc4:	41000015 	stw	r4,0(r8)
10009cc8:	01000084 	movi	r4,2
10009ccc:	41000115 	stw	r4,4(r8)
10009cd0:	d8c11c15 	stw	r3,1136(sp)
10009cd4:	d8811b15 	stw	r2,1132(sp)
10009cd8:	010001c4 	movi	r4,7
10009cdc:	20821716 	blt	r4,r2,1000a53c <___vfiprintf_internal_r+0xeac>
10009ce0:	100b883a 	mov	r5,r2
10009ce4:	42000204 	addi	r8,r8,8
10009ce8:	10800044 	addi	r2,r2,1
10009cec:	01002004 	movi	r4,128
10009cf0:	a901d126 	beq	r21,r4,1000a438 <___vfiprintf_internal_r+0xda8>
10009cf4:	91e5c83a 	sub	r18,r18,r7
10009cf8:	0480290e 	bge	zero,r18,10009da0 <___vfiprintf_internal_r+0x710>
10009cfc:	05800404 	movi	r22,16
10009d00:	05440074 	movhi	r21,4097
10009d04:	ad46e404 	addi	r21,r21,7056
10009d08:	b4801c0e 	bge	r22,r18,10009d7c <___vfiprintf_internal_r+0x6ec>
10009d0c:	dc412515 	stw	r17,1172(sp)
10009d10:	070001c4 	movi	fp,7
10009d14:	9023883a 	mov	r17,r18
10009d18:	d9c12615 	stw	r7,1176(sp)
10009d1c:	4825883a 	mov	r18,r9
10009d20:	00000506 	br	10009d38 <___vfiprintf_internal_r+0x6a8>
10009d24:	28800084 	addi	r2,r5,2
10009d28:	42000204 	addi	r8,r8,8
10009d2c:	200b883a 	mov	r5,r4
10009d30:	8c7ffc04 	addi	r17,r17,-16
10009d34:	b4400d0e 	bge	r22,r17,10009d6c <___vfiprintf_internal_r+0x6dc>
10009d38:	18c00404 	addi	r3,r3,16
10009d3c:	29000044 	addi	r4,r5,1
10009d40:	44000015 	stw	r16,0(r8)
10009d44:	45800115 	stw	r22,4(r8)
10009d48:	d8c11c15 	stw	r3,1136(sp)
10009d4c:	d9011b15 	stw	r4,1132(sp)
10009d50:	e13ff40e 	bge	fp,r4,10009d24 <__alt_data_end+0xf8009d24>
10009d54:	1801601e 	bne	r3,zero,1000a2d8 <___vfiprintf_internal_r+0xc48>
10009d58:	8c7ffc04 	addi	r17,r17,-16
10009d5c:	000b883a 	mov	r5,zero
10009d60:	00800044 	movi	r2,1
10009d64:	d811883a 	mov	r8,sp
10009d68:	b47ff316 	blt	r22,r17,10009d38 <__alt_data_end+0xf8009d38>
10009d6c:	9013883a 	mov	r9,r18
10009d70:	d9c12617 	ldw	r7,1176(sp)
10009d74:	8825883a 	mov	r18,r17
10009d78:	dc412517 	ldw	r17,1172(sp)
10009d7c:	1c87883a 	add	r3,r3,r18
10009d80:	45400015 	stw	r21,0(r8)
10009d84:	44800115 	stw	r18,4(r8)
10009d88:	d8c11c15 	stw	r3,1136(sp)
10009d8c:	d8811b15 	stw	r2,1132(sp)
10009d90:	010001c4 	movi	r4,7
10009d94:	20819e16 	blt	r4,r2,1000a410 <___vfiprintf_internal_r+0xd80>
10009d98:	42000204 	addi	r8,r8,8
10009d9c:	10800044 	addi	r2,r2,1
10009da0:	38c7883a 	add	r3,r7,r3
10009da4:	45c00015 	stw	r23,0(r8)
10009da8:	41c00115 	stw	r7,4(r8)
10009dac:	d8c11c15 	stw	r3,1136(sp)
10009db0:	d8811b15 	stw	r2,1132(sp)
10009db4:	010001c4 	movi	r4,7
10009db8:	20819d0e 	bge	r4,r2,1000a430 <___vfiprintf_internal_r+0xda0>
10009dbc:	1802291e 	bne	r3,zero,1000a664 <___vfiprintf_internal_r+0xfd4>
10009dc0:	d8011b15 	stw	zero,1132(sp)
10009dc4:	d811883a 	mov	r8,sp
10009dc8:	8c40010c 	andi	r17,r17,4
10009dcc:	88017526 	beq	r17,zero,1000a3a4 <___vfiprintf_internal_r+0xd14>
10009dd0:	d9412117 	ldw	r5,1156(sp)
10009dd4:	2d23c83a 	sub	r17,r5,r20
10009dd8:	0441720e 	bge	zero,r17,1000a3a4 <___vfiprintf_internal_r+0xd14>
10009ddc:	04800404 	movi	r18,16
10009de0:	9443170e 	bge	r18,r17,1000aa40 <___vfiprintf_internal_r+0x13b0>
10009de4:	01440074 	movhi	r5,4097
10009de8:	2946e804 	addi	r5,r5,7072
10009dec:	d9011b17 	ldw	r4,1132(sp)
10009df0:	d9412515 	stw	r5,1172(sp)
10009df4:	058001c4 	movi	r22,7
10009df8:	dd412217 	ldw	r21,1160(sp)
10009dfc:	ddc12017 	ldw	r23,1152(sp)
10009e00:	4839883a 	mov	fp,r9
10009e04:	00000506 	br	10009e1c <___vfiprintf_internal_r+0x78c>
10009e08:	21400084 	addi	r5,r4,2
10009e0c:	42000204 	addi	r8,r8,8
10009e10:	1009883a 	mov	r4,r2
10009e14:	8c7ffc04 	addi	r17,r17,-16
10009e18:	94400d0e 	bge	r18,r17,10009e50 <___vfiprintf_internal_r+0x7c0>
10009e1c:	18c00404 	addi	r3,r3,16
10009e20:	20800044 	addi	r2,r4,1
10009e24:	44c00015 	stw	r19,0(r8)
10009e28:	44800115 	stw	r18,4(r8)
10009e2c:	d8c11c15 	stw	r3,1136(sp)
10009e30:	d8811b15 	stw	r2,1132(sp)
10009e34:	b0bff40e 	bge	r22,r2,10009e08 <__alt_data_end+0xf8009e08>
10009e38:	18016b1e 	bne	r3,zero,1000a3e8 <___vfiprintf_internal_r+0xd58>
10009e3c:	8c7ffc04 	addi	r17,r17,-16
10009e40:	0009883a 	mov	r4,zero
10009e44:	01400044 	movi	r5,1
10009e48:	d811883a 	mov	r8,sp
10009e4c:	947ff316 	blt	r18,r17,10009e1c <__alt_data_end+0xf8009e1c>
10009e50:	e013883a 	mov	r9,fp
10009e54:	d8812517 	ldw	r2,1172(sp)
10009e58:	1c47883a 	add	r3,r3,r17
10009e5c:	44400115 	stw	r17,4(r8)
10009e60:	40800015 	stw	r2,0(r8)
10009e64:	d8c11c15 	stw	r3,1136(sp)
10009e68:	d9411b15 	stw	r5,1132(sp)
10009e6c:	008001c4 	movi	r2,7
10009e70:	11414c0e 	bge	r2,r5,1000a3a4 <___vfiprintf_internal_r+0xd14>
10009e74:	1801431e 	bne	r3,zero,1000a384 <___vfiprintf_internal_r+0xcf4>
10009e78:	d8c12117 	ldw	r3,1156(sp)
10009e7c:	a0c28e16 	blt	r20,r3,1000a8b8 <___vfiprintf_internal_r+0x1228>
10009e80:	d9012417 	ldw	r4,1168(sp)
10009e84:	2509883a 	add	r4,r4,r20
10009e88:	d9012415 	stw	r4,1168(sp)
10009e8c:	00015306 	br	1000a3dc <___vfiprintf_internal_r+0xd4c>
10009e90:	8c400414 	ori	r17,r17,16
10009e94:	8880080c 	andi	r2,r17,32
10009e98:	b811883a 	mov	r8,r23
10009e9c:	3025883a 	mov	r18,r6
10009ea0:	10005f26 	beq	r2,zero,1000a020 <___vfiprintf_internal_r+0x990>
10009ea4:	d8812317 	ldw	r2,1164(sp)
10009ea8:	d8c12317 	ldw	r3,1164(sp)
10009eac:	15000017 	ldw	r20,0(r2)
10009eb0:	15400117 	ldw	r21,4(r2)
10009eb4:	18c00204 	addi	r3,r3,8
10009eb8:	0005883a 	mov	r2,zero
10009ebc:	d8c12315 	stw	r3,1164(sp)
10009ec0:	a548b03a 	or	r4,r20,r21
10009ec4:	d8011d85 	stb	zero,1142(sp)
10009ec8:	900f883a 	mov	r7,r18
10009ecc:	002d883a 	mov	r22,zero
10009ed0:	003f2b06 	br	10009b80 <__alt_data_end+0xf8009b80>
10009ed4:	8c400414 	ori	r17,r17,16
10009ed8:	8880080c 	andi	r2,r17,32
10009edc:	b811883a 	mov	r8,r23
10009ee0:	3025883a 	mov	r18,r6
10009ee4:	1000a826 	beq	r2,zero,1000a188 <___vfiprintf_internal_r+0xaf8>
10009ee8:	d8812317 	ldw	r2,1164(sp)
10009eec:	d8c12317 	ldw	r3,1164(sp)
10009ef0:	15000017 	ldw	r20,0(r2)
10009ef4:	15400117 	ldw	r21,4(r2)
10009ef8:	18c00204 	addi	r3,r3,8
10009efc:	00800044 	movi	r2,1
10009f00:	d8c12315 	stw	r3,1164(sp)
10009f04:	a548b03a 	or	r4,r20,r21
10009f08:	003fee06 	br	10009ec4 <__alt_data_end+0xf8009ec4>
10009f0c:	01440074 	movhi	r5,4097
10009f10:	29467e04 	addi	r5,r5,6648
10009f14:	dd811d85 	stb	r22,1142(sp)
10009f18:	d9412715 	stw	r5,1180(sp)
10009f1c:	8880080c 	andi	r2,r17,32
10009f20:	b811883a 	mov	r8,r23
10009f24:	3025883a 	mov	r18,r6
10009f28:	1000a926 	beq	r2,zero,1000a1d0 <___vfiprintf_internal_r+0xb40>
10009f2c:	d9412317 	ldw	r5,1164(sp)
10009f30:	2d000017 	ldw	r20,0(r5)
10009f34:	2d400117 	ldw	r21,4(r5)
10009f38:	29400204 	addi	r5,r5,8
10009f3c:	d9412315 	stw	r5,1164(sp)
10009f40:	8880004c 	andi	r2,r17,1
10009f44:	1001d126 	beq	r2,zero,1000a68c <___vfiprintf_internal_r+0xffc>
10009f48:	a548b03a 	or	r4,r20,r21
10009f4c:	20021626 	beq	r4,zero,1000a7a8 <___vfiprintf_internal_r+0x1118>
10009f50:	00800c04 	movi	r2,48
10009f54:	d8811d05 	stb	r2,1140(sp)
10009f58:	d8c11d45 	stb	r3,1141(sp)
10009f5c:	8c400094 	ori	r17,r17,2
10009f60:	00800084 	movi	r2,2
10009f64:	003fd706 	br	10009ec4 <__alt_data_end+0xf8009ec4>
10009f68:	d9412317 	ldw	r5,1164(sp)
10009f6c:	05000044 	movi	r20,1
10009f70:	b811883a 	mov	r8,r23
10009f74:	28800017 	ldw	r2,0(r5)
10009f78:	29400104 	addi	r5,r5,4
10009f7c:	d8011d85 	stb	zero,1142(sp)
10009f80:	d8810005 	stb	r2,1024(sp)
10009f84:	d9412315 	stw	r5,1164(sp)
10009f88:	a00f883a 	mov	r7,r20
10009f8c:	ddc10004 	addi	r23,sp,1024
10009f90:	0025883a 	mov	r18,zero
10009f94:	003f0f06 	br	10009bd4 <__alt_data_end+0xf8009bd4>
10009f98:	b0803fcc 	andi	r2,r22,255
10009f9c:	1080201c 	xori	r2,r2,128
10009fa0:	10bfe004 	addi	r2,r2,-128
10009fa4:	10021f1e 	bne	r2,zero,1000a824 <___vfiprintf_internal_r+0x1194>
10009fa8:	05800804 	movi	r22,32
10009fac:	48c00007 	ldb	r3,0(r9)
10009fb0:	003e1706 	br	10009810 <__alt_data_end+0xf8009810>
10009fb4:	8c400054 	ori	r17,r17,1
10009fb8:	48c00007 	ldb	r3,0(r9)
10009fbc:	003e1406 	br	10009810 <__alt_data_end+0xf8009810>
10009fc0:	48c00007 	ldb	r3,0(r9)
10009fc4:	01001b04 	movi	r4,108
10009fc8:	4805883a 	mov	r2,r9
10009fcc:	19026526 	beq	r3,r4,1000a964 <___vfiprintf_internal_r+0x12d4>
10009fd0:	8c400414 	ori	r17,r17,16
10009fd4:	003e0e06 	br	10009810 <__alt_data_end+0xf8009810>
10009fd8:	dd811d85 	stb	r22,1142(sp)
10009fdc:	8880080c 	andi	r2,r17,32
10009fe0:	b811883a 	mov	r8,r23
10009fe4:	10020426 	beq	r2,zero,1000a7f8 <___vfiprintf_internal_r+0x1168>
10009fe8:	d8c12317 	ldw	r3,1164(sp)
10009fec:	d9012417 	ldw	r4,1168(sp)
10009ff0:	d9412317 	ldw	r5,1164(sp)
10009ff4:	18800017 	ldw	r2,0(r3)
10009ff8:	2007d7fa 	srai	r3,r4,31
10009ffc:	29400104 	addi	r5,r5,4
1000a000:	d9412315 	stw	r5,1164(sp)
1000a004:	11000015 	stw	r4,0(r2)
1000a008:	10c00115 	stw	r3,4(r2)
1000a00c:	003dd706 	br	1000976c <__alt_data_end+0xf800976c>
1000a010:	8880080c 	andi	r2,r17,32
1000a014:	b811883a 	mov	r8,r23
1000a018:	3025883a 	mov	r18,r6
1000a01c:	103fa11e 	bne	r2,zero,10009ea4 <__alt_data_end+0xf8009ea4>
1000a020:	8880040c 	andi	r2,r17,16
1000a024:	1001ea26 	beq	r2,zero,1000a7d0 <___vfiprintf_internal_r+0x1140>
1000a028:	d9012317 	ldw	r4,1164(sp)
1000a02c:	002b883a 	mov	r21,zero
1000a030:	0005883a 	mov	r2,zero
1000a034:	25000017 	ldw	r20,0(r4)
1000a038:	21000104 	addi	r4,r4,4
1000a03c:	d9012315 	stw	r4,1164(sp)
1000a040:	a009883a 	mov	r4,r20
1000a044:	003f9f06 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a048:	d8812317 	ldw	r2,1164(sp)
1000a04c:	d8c12317 	ldw	r3,1164(sp)
1000a050:	10800017 	ldw	r2,0(r2)
1000a054:	d8812115 	stw	r2,1156(sp)
1000a058:	d9012117 	ldw	r4,1156(sp)
1000a05c:	18800104 	addi	r2,r3,4
1000a060:	203e9a16 	blt	r4,zero,10009acc <__alt_data_end+0xf8009acc>
1000a064:	d8812315 	stw	r2,1164(sp)
1000a068:	48c00007 	ldb	r3,0(r9)
1000a06c:	003de806 	br	10009810 <__alt_data_end+0xf8009810>
1000a070:	05800ac4 	movi	r22,43
1000a074:	48c00007 	ldb	r3,0(r9)
1000a078:	003de506 	br	10009810 <__alt_data_end+0xf8009810>
1000a07c:	48c00007 	ldb	r3,0(r9)
1000a080:	01000a84 	movi	r4,42
1000a084:	48800044 	addi	r2,r9,1
1000a088:	19028326 	beq	r3,r4,1000aa98 <___vfiprintf_internal_r+0x1408>
1000a08c:	1f3ff404 	addi	fp,r3,-48
1000a090:	af027a36 	bltu	r21,fp,1000aa7c <___vfiprintf_internal_r+0x13ec>
1000a094:	1025883a 	mov	r18,r2
1000a098:	0009883a 	mov	r4,zero
1000a09c:	00000106 	br	1000a0a4 <___vfiprintf_internal_r+0xa14>
1000a0a0:	4825883a 	mov	r18,r9
1000a0a4:	01400284 	movi	r5,10
1000a0a8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000a0ac:	90c00007 	ldb	r3,0(r18)
1000a0b0:	e089883a 	add	r4,fp,r2
1000a0b4:	92400044 	addi	r9,r18,1
1000a0b8:	1f3ff404 	addi	fp,r3,-48
1000a0bc:	af3ff82e 	bgeu	r21,fp,1000a0a0 <__alt_data_end+0xf800a0a0>
1000a0c0:	2025883a 	mov	r18,r4
1000a0c4:	20022416 	blt	r4,zero,1000a958 <___vfiprintf_internal_r+0x12c8>
1000a0c8:	900d883a 	mov	r6,r18
1000a0cc:	003dd106 	br	10009814 <__alt_data_end+0xf8009814>
1000a0d0:	8c401014 	ori	r17,r17,64
1000a0d4:	48c00007 	ldb	r3,0(r9)
1000a0d8:	003dcd06 	br	10009810 <__alt_data_end+0xf8009810>
1000a0dc:	dd811d85 	stb	r22,1142(sp)
1000a0e0:	8880080c 	andi	r2,r17,32
1000a0e4:	b811883a 	mov	r8,r23
1000a0e8:	3025883a 	mov	r18,r6
1000a0ec:	103e991e 	bne	r2,zero,10009b54 <__alt_data_end+0xf8009b54>
1000a0f0:	8880040c 	andi	r2,r17,16
1000a0f4:	1001d726 	beq	r2,zero,1000a854 <___vfiprintf_internal_r+0x11c4>
1000a0f8:	d9012317 	ldw	r4,1164(sp)
1000a0fc:	25000017 	ldw	r20,0(r4)
1000a100:	21000104 	addi	r4,r4,4
1000a104:	d9012315 	stw	r4,1164(sp)
1000a108:	a02bd7fa 	srai	r21,r20,31
1000a10c:	a805883a 	mov	r2,r21
1000a110:	003e9606 	br	10009b6c <__alt_data_end+0xf8009b6c>
1000a114:	8c400814 	ori	r17,r17,32
1000a118:	48c00007 	ldb	r3,0(r9)
1000a11c:	003dbc06 	br	10009810 <__alt_data_end+0xf8009810>
1000a120:	d9412317 	ldw	r5,1164(sp)
1000a124:	b811883a 	mov	r8,r23
1000a128:	d8011d85 	stb	zero,1142(sp)
1000a12c:	2dc00017 	ldw	r23,0(r5)
1000a130:	3025883a 	mov	r18,r6
1000a134:	2d400104 	addi	r21,r5,4
1000a138:	b8022f26 	beq	r23,zero,1000a9f8 <___vfiprintf_internal_r+0x1368>
1000a13c:	b809883a 	mov	r4,r23
1000a140:	30020f16 	blt	r6,zero,1000a980 <___vfiprintf_internal_r+0x12f0>
1000a144:	000b883a 	mov	r5,zero
1000a148:	da012b15 	stw	r8,1196(sp)
1000a14c:	da412d15 	stw	r9,1204(sp)
1000a150:	00079000 	call	10007900 <memchr>
1000a154:	da012b17 	ldw	r8,1196(sp)
1000a158:	da412d17 	ldw	r9,1204(sp)
1000a15c:	10024226 	beq	r2,zero,1000aa68 <___vfiprintf_internal_r+0x13d8>
1000a160:	15cfc83a 	sub	r7,r2,r23
1000a164:	91c1d616 	blt	r18,r7,1000a8c0 <___vfiprintf_internal_r+0x1230>
1000a168:	dd811d83 	ldbu	r22,1142(sp)
1000a16c:	dd412315 	stw	r21,1164(sp)
1000a170:	0025883a 	mov	r18,zero
1000a174:	003e8f06 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a178:	8880080c 	andi	r2,r17,32
1000a17c:	b811883a 	mov	r8,r23
1000a180:	3025883a 	mov	r18,r6
1000a184:	103f581e 	bne	r2,zero,10009ee8 <__alt_data_end+0xf8009ee8>
1000a188:	8880040c 	andi	r2,r17,16
1000a18c:	1001a726 	beq	r2,zero,1000a82c <___vfiprintf_internal_r+0x119c>
1000a190:	d9012317 	ldw	r4,1164(sp)
1000a194:	002b883a 	mov	r21,zero
1000a198:	00800044 	movi	r2,1
1000a19c:	25000017 	ldw	r20,0(r4)
1000a1a0:	21000104 	addi	r4,r4,4
1000a1a4:	d9012315 	stw	r4,1164(sp)
1000a1a8:	a009883a 	mov	r4,r20
1000a1ac:	003f4506 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a1b0:	01040074 	movhi	r4,4097
1000a1b4:	21068304 	addi	r4,r4,6668
1000a1b8:	dd811d85 	stb	r22,1142(sp)
1000a1bc:	d9012715 	stw	r4,1180(sp)
1000a1c0:	8880080c 	andi	r2,r17,32
1000a1c4:	b811883a 	mov	r8,r23
1000a1c8:	3025883a 	mov	r18,r6
1000a1cc:	103f571e 	bne	r2,zero,10009f2c <__alt_data_end+0xf8009f2c>
1000a1d0:	8880040c 	andi	r2,r17,16
1000a1d4:	10017626 	beq	r2,zero,1000a7b0 <___vfiprintf_internal_r+0x1120>
1000a1d8:	d8812317 	ldw	r2,1164(sp)
1000a1dc:	002b883a 	mov	r21,zero
1000a1e0:	15000017 	ldw	r20,0(r2)
1000a1e4:	10800104 	addi	r2,r2,4
1000a1e8:	d8812315 	stw	r2,1164(sp)
1000a1ec:	003f5406 	br	10009f40 <__alt_data_end+0xf8009f40>
1000a1f0:	d8c12317 	ldw	r3,1164(sp)
1000a1f4:	00800c04 	movi	r2,48
1000a1f8:	01040074 	movhi	r4,4097
1000a1fc:	21068304 	addi	r4,r4,6668
1000a200:	1d000017 	ldw	r20,0(r3)
1000a204:	d8811d05 	stb	r2,1140(sp)
1000a208:	18c00104 	addi	r3,r3,4
1000a20c:	00801e04 	movi	r2,120
1000a210:	d8811d45 	stb	r2,1141(sp)
1000a214:	d9012715 	stw	r4,1180(sp)
1000a218:	b811883a 	mov	r8,r23
1000a21c:	3025883a 	mov	r18,r6
1000a220:	002b883a 	mov	r21,zero
1000a224:	8c400094 	ori	r17,r17,2
1000a228:	d8c12315 	stw	r3,1164(sp)
1000a22c:	00800084 	movi	r2,2
1000a230:	a009883a 	mov	r4,r20
1000a234:	003f2306 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a238:	dd811d85 	stb	r22,1142(sp)
1000a23c:	b811883a 	mov	r8,r23
1000a240:	18004426 	beq	r3,zero,1000a354 <___vfiprintf_internal_r+0xcc4>
1000a244:	05000044 	movi	r20,1
1000a248:	d8c10005 	stb	r3,1024(sp)
1000a24c:	d8011d85 	stb	zero,1142(sp)
1000a250:	a00f883a 	mov	r7,r20
1000a254:	ddc10004 	addi	r23,sp,1024
1000a258:	0025883a 	mov	r18,zero
1000a25c:	003e5d06 	br	10009bd4 <__alt_data_end+0xf8009bd4>
1000a260:	d9012217 	ldw	r4,1160(sp)
1000a264:	d9412017 	ldw	r5,1152(sp)
1000a268:	d9811a04 	addi	r6,sp,1128
1000a26c:	db012b15 	stw	r12,1196(sp)
1000a270:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a274:	db012b17 	ldw	r12,1196(sp)
1000a278:	10003c1e 	bne	r2,zero,1000a36c <___vfiprintf_internal_r+0xcdc>
1000a27c:	d9011b17 	ldw	r4,1132(sp)
1000a280:	d8c11c17 	ldw	r3,1136(sp)
1000a284:	d811883a 	mov	r8,sp
1000a288:	21400044 	addi	r5,r4,1
1000a28c:	003e6a06 	br	10009c38 <__alt_data_end+0xf8009c38>
1000a290:	d9411b17 	ldw	r5,1132(sp)
1000a294:	d8c11c17 	ldw	r3,1136(sp)
1000a298:	28800044 	addi	r2,r5,1
1000a29c:	d9011d87 	ldb	r4,1142(sp)
1000a2a0:	203e8526 	beq	r4,zero,10009cb8 <__alt_data_end+0xf8009cb8>
1000a2a4:	01000044 	movi	r4,1
1000a2a8:	d9411d84 	addi	r5,sp,1142
1000a2ac:	1907883a 	add	r3,r3,r4
1000a2b0:	41400015 	stw	r5,0(r8)
1000a2b4:	41000115 	stw	r4,4(r8)
1000a2b8:	d8c11c15 	stw	r3,1136(sp)
1000a2bc:	d8811b15 	stw	r2,1132(sp)
1000a2c0:	014001c4 	movi	r5,7
1000a2c4:	28809816 	blt	r5,r2,1000a528 <___vfiprintf_internal_r+0xe98>
1000a2c8:	100b883a 	mov	r5,r2
1000a2cc:	42000204 	addi	r8,r8,8
1000a2d0:	1105883a 	add	r2,r2,r4
1000a2d4:	003e7806 	br	10009cb8 <__alt_data_end+0xf8009cb8>
1000a2d8:	d9012217 	ldw	r4,1160(sp)
1000a2dc:	d9412017 	ldw	r5,1152(sp)
1000a2e0:	d9811a04 	addi	r6,sp,1128
1000a2e4:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a2e8:	1000201e 	bne	r2,zero,1000a36c <___vfiprintf_internal_r+0xcdc>
1000a2ec:	d9411b17 	ldw	r5,1132(sp)
1000a2f0:	d8c11c17 	ldw	r3,1136(sp)
1000a2f4:	d811883a 	mov	r8,sp
1000a2f8:	28800044 	addi	r2,r5,1
1000a2fc:	003e8c06 	br	10009d30 <__alt_data_end+0xf8009d30>
1000a300:	00c00044 	movi	r3,1
1000a304:	10c0ab26 	beq	r2,r3,1000a5b4 <___vfiprintf_internal_r+0xf24>
1000a308:	00c00084 	movi	r3,2
1000a30c:	10c0901e 	bne	r2,r3,1000a550 <___vfiprintf_internal_r+0xec0>
1000a310:	d9412717 	ldw	r5,1180(sp)
1000a314:	d88109c4 	addi	r2,sp,1063
1000a318:	a0c003cc 	andi	r3,r20,15
1000a31c:	a808973a 	slli	r4,r21,28
1000a320:	28c7883a 	add	r3,r5,r3
1000a324:	a028d13a 	srli	r20,r20,4
1000a328:	18c00003 	ldbu	r3,0(r3)
1000a32c:	a82ad13a 	srli	r21,r21,4
1000a330:	2528b03a 	or	r20,r4,r20
1000a334:	10c00005 	stb	r3,0(r2)
1000a338:	a546b03a 	or	r3,r20,r21
1000a33c:	102f883a 	mov	r23,r2
1000a340:	10bfffc4 	addi	r2,r2,-1
1000a344:	183ff41e 	bne	r3,zero,1000a318 <__alt_data_end+0xf800a318>
1000a348:	d8811f17 	ldw	r2,1148(sp)
1000a34c:	15cfc83a 	sub	r7,r2,r23
1000a350:	003e1806 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a354:	d8811c17 	ldw	r2,1136(sp)
1000a358:	10000426 	beq	r2,zero,1000a36c <___vfiprintf_internal_r+0xcdc>
1000a35c:	d9012217 	ldw	r4,1160(sp)
1000a360:	d9412017 	ldw	r5,1152(sp)
1000a364:	d9811a04 	addi	r6,sp,1128
1000a368:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a36c:	d8c12017 	ldw	r3,1152(sp)
1000a370:	1880030b 	ldhu	r2,12(r3)
1000a374:	1080100c 	andi	r2,r2,64
1000a378:	103dc31e 	bne	r2,zero,10009a88 <__alt_data_end+0xf8009a88>
1000a37c:	d8812417 	ldw	r2,1168(sp)
1000a380:	003dc206 	br	10009a8c <__alt_data_end+0xf8009a8c>
1000a384:	d9012217 	ldw	r4,1160(sp)
1000a388:	d9412017 	ldw	r5,1152(sp)
1000a38c:	d9811a04 	addi	r6,sp,1128
1000a390:	da412d15 	stw	r9,1204(sp)
1000a394:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a398:	da412d17 	ldw	r9,1204(sp)
1000a39c:	103ff31e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a3a0:	d8c11c17 	ldw	r3,1136(sp)
1000a3a4:	d9412117 	ldw	r5,1156(sp)
1000a3a8:	a140010e 	bge	r20,r5,1000a3b0 <___vfiprintf_internal_r+0xd20>
1000a3ac:	2829883a 	mov	r20,r5
1000a3b0:	d8812417 	ldw	r2,1168(sp)
1000a3b4:	1505883a 	add	r2,r2,r20
1000a3b8:	d8812415 	stw	r2,1168(sp)
1000a3bc:	18000726 	beq	r3,zero,1000a3dc <___vfiprintf_internal_r+0xd4c>
1000a3c0:	d9012217 	ldw	r4,1160(sp)
1000a3c4:	d9412017 	ldw	r5,1152(sp)
1000a3c8:	d9811a04 	addi	r6,sp,1128
1000a3cc:	da412d15 	stw	r9,1204(sp)
1000a3d0:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a3d4:	da412d17 	ldw	r9,1204(sp)
1000a3d8:	103fe41e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a3dc:	d8011b15 	stw	zero,1132(sp)
1000a3e0:	d811883a 	mov	r8,sp
1000a3e4:	003ce106 	br	1000976c <__alt_data_end+0xf800976c>
1000a3e8:	a809883a 	mov	r4,r21
1000a3ec:	b80b883a 	mov	r5,r23
1000a3f0:	d9811a04 	addi	r6,sp,1128
1000a3f4:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a3f8:	103fdc1e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a3fc:	d9011b17 	ldw	r4,1132(sp)
1000a400:	d8c11c17 	ldw	r3,1136(sp)
1000a404:	d811883a 	mov	r8,sp
1000a408:	21400044 	addi	r5,r4,1
1000a40c:	003e8106 	br	10009e14 <__alt_data_end+0xf8009e14>
1000a410:	1800cb1e 	bne	r3,zero,1000a740 <___vfiprintf_internal_r+0x10b0>
1000a414:	00800044 	movi	r2,1
1000a418:	ddc00015 	stw	r23,0(sp)
1000a41c:	d9c00115 	stw	r7,4(sp)
1000a420:	d9c11c15 	stw	r7,1136(sp)
1000a424:	d8811b15 	stw	r2,1132(sp)
1000a428:	3807883a 	mov	r3,r7
1000a42c:	d811883a 	mov	r8,sp
1000a430:	42000204 	addi	r8,r8,8
1000a434:	003e6406 	br	10009dc8 <__alt_data_end+0xf8009dc8>
1000a438:	d9012117 	ldw	r4,1156(sp)
1000a43c:	252dc83a 	sub	r22,r4,r20
1000a440:	05be2c0e 	bge	zero,r22,10009cf4 <__alt_data_end+0xf8009cf4>
1000a444:	07000404 	movi	fp,16
1000a448:	e581830e 	bge	fp,r22,1000aa58 <___vfiprintf_internal_r+0x13c8>
1000a44c:	05440074 	movhi	r21,4097
1000a450:	ad46e404 	addi	r21,r21,7056
1000a454:	dc412515 	stw	r17,1172(sp)
1000a458:	028001c4 	movi	r10,7
1000a45c:	b023883a 	mov	r17,r22
1000a460:	d9c12615 	stw	r7,1176(sp)
1000a464:	a82d883a 	mov	r22,r21
1000a468:	482b883a 	mov	r21,r9
1000a46c:	00000506 	br	1000a484 <___vfiprintf_internal_r+0xdf4>
1000a470:	29000084 	addi	r4,r5,2
1000a474:	42000204 	addi	r8,r8,8
1000a478:	100b883a 	mov	r5,r2
1000a47c:	8c7ffc04 	addi	r17,r17,-16
1000a480:	e4400d0e 	bge	fp,r17,1000a4b8 <___vfiprintf_internal_r+0xe28>
1000a484:	18c00404 	addi	r3,r3,16
1000a488:	28800044 	addi	r2,r5,1
1000a48c:	44000015 	stw	r16,0(r8)
1000a490:	47000115 	stw	fp,4(r8)
1000a494:	d8c11c15 	stw	r3,1136(sp)
1000a498:	d8811b15 	stw	r2,1132(sp)
1000a49c:	50bff40e 	bge	r10,r2,1000a470 <__alt_data_end+0xf800a470>
1000a4a0:	1800151e 	bne	r3,zero,1000a4f8 <___vfiprintf_internal_r+0xe68>
1000a4a4:	8c7ffc04 	addi	r17,r17,-16
1000a4a8:	000b883a 	mov	r5,zero
1000a4ac:	01000044 	movi	r4,1
1000a4b0:	d811883a 	mov	r8,sp
1000a4b4:	e47ff316 	blt	fp,r17,1000a484 <__alt_data_end+0xf800a484>
1000a4b8:	a813883a 	mov	r9,r21
1000a4bc:	d9c12617 	ldw	r7,1176(sp)
1000a4c0:	b02b883a 	mov	r21,r22
1000a4c4:	882d883a 	mov	r22,r17
1000a4c8:	dc412517 	ldw	r17,1172(sp)
1000a4cc:	1d87883a 	add	r3,r3,r22
1000a4d0:	45400015 	stw	r21,0(r8)
1000a4d4:	45800115 	stw	r22,4(r8)
1000a4d8:	d8c11c15 	stw	r3,1136(sp)
1000a4dc:	d9011b15 	stw	r4,1132(sp)
1000a4e0:	008001c4 	movi	r2,7
1000a4e4:	11009116 	blt	r2,r4,1000a72c <___vfiprintf_internal_r+0x109c>
1000a4e8:	42000204 	addi	r8,r8,8
1000a4ec:	20800044 	addi	r2,r4,1
1000a4f0:	200b883a 	mov	r5,r4
1000a4f4:	003dff06 	br	10009cf4 <__alt_data_end+0xf8009cf4>
1000a4f8:	d9012217 	ldw	r4,1160(sp)
1000a4fc:	d9412017 	ldw	r5,1152(sp)
1000a500:	d9811a04 	addi	r6,sp,1128
1000a504:	da812c15 	stw	r10,1200(sp)
1000a508:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a50c:	da812c17 	ldw	r10,1200(sp)
1000a510:	103f961e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a514:	d9411b17 	ldw	r5,1132(sp)
1000a518:	d8c11c17 	ldw	r3,1136(sp)
1000a51c:	d811883a 	mov	r8,sp
1000a520:	29000044 	addi	r4,r5,1
1000a524:	003fd506 	br	1000a47c <__alt_data_end+0xf800a47c>
1000a528:	1800701e 	bne	r3,zero,1000a6ec <___vfiprintf_internal_r+0x105c>
1000a52c:	000b883a 	mov	r5,zero
1000a530:	2005883a 	mov	r2,r4
1000a534:	d811883a 	mov	r8,sp
1000a538:	003ddf06 	br	10009cb8 <__alt_data_end+0xf8009cb8>
1000a53c:	18005d1e 	bne	r3,zero,1000a6b4 <___vfiprintf_internal_r+0x1024>
1000a540:	000b883a 	mov	r5,zero
1000a544:	00800044 	movi	r2,1
1000a548:	d811883a 	mov	r8,sp
1000a54c:	003de706 	br	10009cec <__alt_data_end+0xf8009cec>
1000a550:	d8c109c4 	addi	r3,sp,1063
1000a554:	a008d0fa 	srli	r4,r20,3
1000a558:	a80a977a 	slli	r5,r21,29
1000a55c:	a82ad0fa 	srli	r21,r21,3
1000a560:	a50001cc 	andi	r20,r20,7
1000a564:	a0800c04 	addi	r2,r20,48
1000a568:	2928b03a 	or	r20,r5,r4
1000a56c:	18800005 	stb	r2,0(r3)
1000a570:	a548b03a 	or	r4,r20,r21
1000a574:	182f883a 	mov	r23,r3
1000a578:	18ffffc4 	addi	r3,r3,-1
1000a57c:	203ff51e 	bne	r4,zero,1000a554 <__alt_data_end+0xf800a554>
1000a580:	8900004c 	andi	r4,r17,1
1000a584:	b80b883a 	mov	r5,r23
1000a588:	203f6f26 	beq	r4,zero,1000a348 <__alt_data_end+0xf800a348>
1000a58c:	10803fcc 	andi	r2,r2,255
1000a590:	1080201c 	xori	r2,r2,128
1000a594:	10bfe004 	addi	r2,r2,-128
1000a598:	01000c04 	movi	r4,48
1000a59c:	1100f526 	beq	r2,r4,1000a974 <___vfiprintf_internal_r+0x12e4>
1000a5a0:	293fffc5 	stb	r4,-1(r5)
1000a5a4:	d9011f17 	ldw	r4,1148(sp)
1000a5a8:	182f883a 	mov	r23,r3
1000a5ac:	20cfc83a 	sub	r7,r4,r3
1000a5b0:	003d8006 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a5b4:	a800021e 	bne	r21,zero,1000a5c0 <___vfiprintf_internal_r+0xf30>
1000a5b8:	00800244 	movi	r2,9
1000a5bc:	15001d2e 	bgeu	r2,r20,1000a634 <___vfiprintf_internal_r+0xfa4>
1000a5c0:	dc412515 	stw	r17,1172(sp)
1000a5c4:	d88109c4 	addi	r2,sp,1063
1000a5c8:	a823883a 	mov	r17,r21
1000a5cc:	4039883a 	mov	fp,r8
1000a5d0:	482b883a 	mov	r21,r9
1000a5d4:	a009883a 	mov	r4,r20
1000a5d8:	880b883a 	mov	r5,r17
1000a5dc:	01800284 	movi	r6,10
1000a5e0:	000f883a 	mov	r7,zero
1000a5e4:	102f883a 	mov	r23,r2
1000a5e8:	000bb700 	call	1000bb70 <__umoddi3>
1000a5ec:	10800c04 	addi	r2,r2,48
1000a5f0:	a009883a 	mov	r4,r20
1000a5f4:	880b883a 	mov	r5,r17
1000a5f8:	b8800005 	stb	r2,0(r23)
1000a5fc:	01800284 	movi	r6,10
1000a600:	000f883a 	mov	r7,zero
1000a604:	000b51c0 	call	1000b51c <__udivdi3>
1000a608:	1823883a 	mov	r17,r3
1000a60c:	10c6b03a 	or	r3,r2,r3
1000a610:	1029883a 	mov	r20,r2
1000a614:	b8bfffc4 	addi	r2,r23,-1
1000a618:	183fee1e 	bne	r3,zero,1000a5d4 <__alt_data_end+0xf800a5d4>
1000a61c:	d9411f17 	ldw	r5,1148(sp)
1000a620:	e011883a 	mov	r8,fp
1000a624:	dc412517 	ldw	r17,1172(sp)
1000a628:	a813883a 	mov	r9,r21
1000a62c:	2dcfc83a 	sub	r7,r5,r23
1000a630:	003d6006 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a634:	a5000c04 	addi	r20,r20,48
1000a638:	dd0109c5 	stb	r20,1063(sp)
1000a63c:	d9c12817 	ldw	r7,1184(sp)
1000a640:	ddc109c4 	addi	r23,sp,1063
1000a644:	003d5b06 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a648:	ddc10a04 	addi	r23,sp,1064
1000a64c:	003d5906 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a650:	1800891e 	bne	r3,zero,1000a878 <___vfiprintf_internal_r+0x11e8>
1000a654:	000b883a 	mov	r5,zero
1000a658:	00800044 	movi	r2,1
1000a65c:	d811883a 	mov	r8,sp
1000a660:	003f0e06 	br	1000a29c <__alt_data_end+0xf800a29c>
1000a664:	d9012217 	ldw	r4,1160(sp)
1000a668:	d9412017 	ldw	r5,1152(sp)
1000a66c:	d9811a04 	addi	r6,sp,1128
1000a670:	da412d15 	stw	r9,1204(sp)
1000a674:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a678:	da412d17 	ldw	r9,1204(sp)
1000a67c:	103f3b1e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a680:	d8c11c17 	ldw	r3,1136(sp)
1000a684:	d811883a 	mov	r8,sp
1000a688:	003dcf06 	br	10009dc8 <__alt_data_end+0xf8009dc8>
1000a68c:	00800084 	movi	r2,2
1000a690:	a548b03a 	or	r4,r20,r21
1000a694:	003e0b06 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a698:	d9012217 	ldw	r4,1160(sp)
1000a69c:	d9412017 	ldw	r5,1152(sp)
1000a6a0:	d9811a04 	addi	r6,sp,1128
1000a6a4:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a6a8:	103f301e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a6ac:	d811883a 	mov	r8,sp
1000a6b0:	003cbb06 	br	100099a0 <__alt_data_end+0xf80099a0>
1000a6b4:	d9012217 	ldw	r4,1160(sp)
1000a6b8:	d9412017 	ldw	r5,1152(sp)
1000a6bc:	d9811a04 	addi	r6,sp,1128
1000a6c0:	d9c12b15 	stw	r7,1196(sp)
1000a6c4:	da412d15 	stw	r9,1204(sp)
1000a6c8:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a6cc:	d9c12b17 	ldw	r7,1196(sp)
1000a6d0:	da412d17 	ldw	r9,1204(sp)
1000a6d4:	103f251e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a6d8:	d9411b17 	ldw	r5,1132(sp)
1000a6dc:	d8c11c17 	ldw	r3,1136(sp)
1000a6e0:	d811883a 	mov	r8,sp
1000a6e4:	28800044 	addi	r2,r5,1
1000a6e8:	003d8006 	br	10009cec <__alt_data_end+0xf8009cec>
1000a6ec:	d9012217 	ldw	r4,1160(sp)
1000a6f0:	d9412017 	ldw	r5,1152(sp)
1000a6f4:	d9811a04 	addi	r6,sp,1128
1000a6f8:	d9c12b15 	stw	r7,1196(sp)
1000a6fc:	da412d15 	stw	r9,1204(sp)
1000a700:	da812c15 	stw	r10,1200(sp)
1000a704:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a708:	d9c12b17 	ldw	r7,1196(sp)
1000a70c:	da412d17 	ldw	r9,1204(sp)
1000a710:	da812c17 	ldw	r10,1200(sp)
1000a714:	103f151e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a718:	d9411b17 	ldw	r5,1132(sp)
1000a71c:	d8c11c17 	ldw	r3,1136(sp)
1000a720:	d811883a 	mov	r8,sp
1000a724:	28800044 	addi	r2,r5,1
1000a728:	003d6306 	br	10009cb8 <__alt_data_end+0xf8009cb8>
1000a72c:	18009e1e 	bne	r3,zero,1000a9a8 <___vfiprintf_internal_r+0x1318>
1000a730:	000b883a 	mov	r5,zero
1000a734:	00800044 	movi	r2,1
1000a738:	d811883a 	mov	r8,sp
1000a73c:	003d6d06 	br	10009cf4 <__alt_data_end+0xf8009cf4>
1000a740:	d9012217 	ldw	r4,1160(sp)
1000a744:	d9412017 	ldw	r5,1152(sp)
1000a748:	d9811a04 	addi	r6,sp,1128
1000a74c:	d9c12b15 	stw	r7,1196(sp)
1000a750:	da412d15 	stw	r9,1204(sp)
1000a754:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a758:	d9c12b17 	ldw	r7,1196(sp)
1000a75c:	da412d17 	ldw	r9,1204(sp)
1000a760:	103f021e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a764:	d8811b17 	ldw	r2,1132(sp)
1000a768:	d8c11c17 	ldw	r3,1136(sp)
1000a76c:	d811883a 	mov	r8,sp
1000a770:	10800044 	addi	r2,r2,1
1000a774:	003d8a06 	br	10009da0 <__alt_data_end+0xf8009da0>
1000a778:	4829883a 	mov	r20,r9
1000a77c:	003c1706 	br	100097dc <__alt_data_end+0xf80097dc>
1000a780:	0529c83a 	sub	r20,zero,r20
1000a784:	a004c03a 	cmpne	r2,r20,zero
1000a788:	056bc83a 	sub	r21,zero,r21
1000a78c:	a8abc83a 	sub	r21,r21,r2
1000a790:	05800b44 	movi	r22,45
1000a794:	dd811d85 	stb	r22,1142(sp)
1000a798:	900f883a 	mov	r7,r18
1000a79c:	00800044 	movi	r2,1
1000a7a0:	a548b03a 	or	r4,r20,r21
1000a7a4:	003cf606 	br	10009b80 <__alt_data_end+0xf8009b80>
1000a7a8:	00800084 	movi	r2,2
1000a7ac:	003dc506 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a7b0:	8880100c 	andi	r2,r17,64
1000a7b4:	10005a26 	beq	r2,zero,1000a920 <___vfiprintf_internal_r+0x1290>
1000a7b8:	d9012317 	ldw	r4,1164(sp)
1000a7bc:	002b883a 	mov	r21,zero
1000a7c0:	2500000b 	ldhu	r20,0(r4)
1000a7c4:	21000104 	addi	r4,r4,4
1000a7c8:	d9012315 	stw	r4,1164(sp)
1000a7cc:	003ddc06 	br	10009f40 <__alt_data_end+0xf8009f40>
1000a7d0:	8880100c 	andi	r2,r17,64
1000a7d4:	10005826 	beq	r2,zero,1000a938 <___vfiprintf_internal_r+0x12a8>
1000a7d8:	d9412317 	ldw	r5,1164(sp)
1000a7dc:	002b883a 	mov	r21,zero
1000a7e0:	0005883a 	mov	r2,zero
1000a7e4:	2d00000b 	ldhu	r20,0(r5)
1000a7e8:	29400104 	addi	r5,r5,4
1000a7ec:	d9412315 	stw	r5,1164(sp)
1000a7f0:	a009883a 	mov	r4,r20
1000a7f4:	003db306 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a7f8:	8880040c 	andi	r2,r17,16
1000a7fc:	1000411e 	bne	r2,zero,1000a904 <___vfiprintf_internal_r+0x1274>
1000a800:	8c40100c 	andi	r17,r17,64
1000a804:	88008726 	beq	r17,zero,1000aa24 <___vfiprintf_internal_r+0x1394>
1000a808:	d9412317 	ldw	r5,1164(sp)
1000a80c:	d8c12417 	ldw	r3,1168(sp)
1000a810:	28800017 	ldw	r2,0(r5)
1000a814:	29400104 	addi	r5,r5,4
1000a818:	d9412315 	stw	r5,1164(sp)
1000a81c:	10c0000d 	sth	r3,0(r2)
1000a820:	003bd206 	br	1000976c <__alt_data_end+0xf800976c>
1000a824:	48c00007 	ldb	r3,0(r9)
1000a828:	003bf906 	br	10009810 <__alt_data_end+0xf8009810>
1000a82c:	8880100c 	andi	r2,r17,64
1000a830:	10002c26 	beq	r2,zero,1000a8e4 <___vfiprintf_internal_r+0x1254>
1000a834:	d9412317 	ldw	r5,1164(sp)
1000a838:	002b883a 	mov	r21,zero
1000a83c:	00800044 	movi	r2,1
1000a840:	2d00000b 	ldhu	r20,0(r5)
1000a844:	29400104 	addi	r5,r5,4
1000a848:	d9412315 	stw	r5,1164(sp)
1000a84c:	a009883a 	mov	r4,r20
1000a850:	003d9c06 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a854:	8880100c 	andi	r2,r17,64
1000a858:	10001b26 	beq	r2,zero,1000a8c8 <___vfiprintf_internal_r+0x1238>
1000a85c:	d9412317 	ldw	r5,1164(sp)
1000a860:	2d00000f 	ldh	r20,0(r5)
1000a864:	29400104 	addi	r5,r5,4
1000a868:	d9412315 	stw	r5,1164(sp)
1000a86c:	a02bd7fa 	srai	r21,r20,31
1000a870:	a805883a 	mov	r2,r21
1000a874:	003cbd06 	br	10009b6c <__alt_data_end+0xf8009b6c>
1000a878:	d9012217 	ldw	r4,1160(sp)
1000a87c:	d9412017 	ldw	r5,1152(sp)
1000a880:	d9811a04 	addi	r6,sp,1128
1000a884:	d9c12b15 	stw	r7,1196(sp)
1000a888:	da412d15 	stw	r9,1204(sp)
1000a88c:	da812c15 	stw	r10,1200(sp)
1000a890:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a894:	d9c12b17 	ldw	r7,1196(sp)
1000a898:	da412d17 	ldw	r9,1204(sp)
1000a89c:	da812c17 	ldw	r10,1200(sp)
1000a8a0:	103eb21e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a8a4:	d9411b17 	ldw	r5,1132(sp)
1000a8a8:	d8c11c17 	ldw	r3,1136(sp)
1000a8ac:	d811883a 	mov	r8,sp
1000a8b0:	28800044 	addi	r2,r5,1
1000a8b4:	003e7906 	br	1000a29c <__alt_data_end+0xf800a29c>
1000a8b8:	1829883a 	mov	r20,r3
1000a8bc:	003d7006 	br	10009e80 <__alt_data_end+0xf8009e80>
1000a8c0:	900f883a 	mov	r7,r18
1000a8c4:	003e2806 	br	1000a168 <__alt_data_end+0xf800a168>
1000a8c8:	d8812317 	ldw	r2,1164(sp)
1000a8cc:	15000017 	ldw	r20,0(r2)
1000a8d0:	10800104 	addi	r2,r2,4
1000a8d4:	d8812315 	stw	r2,1164(sp)
1000a8d8:	a02bd7fa 	srai	r21,r20,31
1000a8dc:	a805883a 	mov	r2,r21
1000a8e0:	003ca206 	br	10009b6c <__alt_data_end+0xf8009b6c>
1000a8e4:	d8812317 	ldw	r2,1164(sp)
1000a8e8:	002b883a 	mov	r21,zero
1000a8ec:	15000017 	ldw	r20,0(r2)
1000a8f0:	10800104 	addi	r2,r2,4
1000a8f4:	d8812315 	stw	r2,1164(sp)
1000a8f8:	a009883a 	mov	r4,r20
1000a8fc:	00800044 	movi	r2,1
1000a900:	003d7006 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a904:	d8c12317 	ldw	r3,1164(sp)
1000a908:	d9012417 	ldw	r4,1168(sp)
1000a90c:	18800017 	ldw	r2,0(r3)
1000a910:	18c00104 	addi	r3,r3,4
1000a914:	d8c12315 	stw	r3,1164(sp)
1000a918:	11000015 	stw	r4,0(r2)
1000a91c:	003b9306 	br	1000976c <__alt_data_end+0xf800976c>
1000a920:	d9412317 	ldw	r5,1164(sp)
1000a924:	002b883a 	mov	r21,zero
1000a928:	2d000017 	ldw	r20,0(r5)
1000a92c:	29400104 	addi	r5,r5,4
1000a930:	d9412315 	stw	r5,1164(sp)
1000a934:	003d8206 	br	10009f40 <__alt_data_end+0xf8009f40>
1000a938:	d8812317 	ldw	r2,1164(sp)
1000a93c:	002b883a 	mov	r21,zero
1000a940:	15000017 	ldw	r20,0(r2)
1000a944:	10800104 	addi	r2,r2,4
1000a948:	d8812315 	stw	r2,1164(sp)
1000a94c:	a009883a 	mov	r4,r20
1000a950:	0005883a 	mov	r2,zero
1000a954:	003d5b06 	br	10009ec4 <__alt_data_end+0xf8009ec4>
1000a958:	04bfffc4 	movi	r18,-1
1000a95c:	900d883a 	mov	r6,r18
1000a960:	003bac06 	br	10009814 <__alt_data_end+0xf8009814>
1000a964:	4a400044 	addi	r9,r9,1
1000a968:	8c400814 	ori	r17,r17,32
1000a96c:	10c00047 	ldb	r3,1(r2)
1000a970:	003ba706 	br	10009810 <__alt_data_end+0xf8009810>
1000a974:	d8c11f17 	ldw	r3,1148(sp)
1000a978:	1dcfc83a 	sub	r7,r3,r23
1000a97c:	003c8d06 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a980:	da012b15 	stw	r8,1196(sp)
1000a984:	da412d15 	stw	r9,1204(sp)
1000a988:	00022e40 	call	100022e4 <strlen>
1000a98c:	100f883a 	mov	r7,r2
1000a990:	dd811d83 	ldbu	r22,1142(sp)
1000a994:	dd412315 	stw	r21,1164(sp)
1000a998:	0025883a 	mov	r18,zero
1000a99c:	da012b17 	ldw	r8,1196(sp)
1000a9a0:	da412d17 	ldw	r9,1204(sp)
1000a9a4:	003c8306 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000a9a8:	d9012217 	ldw	r4,1160(sp)
1000a9ac:	d9412017 	ldw	r5,1152(sp)
1000a9b0:	d9811a04 	addi	r6,sp,1128
1000a9b4:	d9c12b15 	stw	r7,1196(sp)
1000a9b8:	da412d15 	stw	r9,1204(sp)
1000a9bc:	000957c0 	call	1000957c <__sprint_r.part.0>
1000a9c0:	d9c12b17 	ldw	r7,1196(sp)
1000a9c4:	da412d17 	ldw	r9,1204(sp)
1000a9c8:	103e681e 	bne	r2,zero,1000a36c <__alt_data_end+0xf800a36c>
1000a9cc:	d9411b17 	ldw	r5,1132(sp)
1000a9d0:	d8c11c17 	ldw	r3,1136(sp)
1000a9d4:	d811883a 	mov	r8,sp
1000a9d8:	28800044 	addi	r2,r5,1
1000a9dc:	003cc506 	br	10009cf4 <__alt_data_end+0xf8009cf4>
1000a9e0:	d9411b17 	ldw	r5,1132(sp)
1000a9e4:	01040074 	movhi	r4,4097
1000a9e8:	2106e804 	addi	r4,r4,7072
1000a9ec:	d9012515 	stw	r4,1172(sp)
1000a9f0:	29400044 	addi	r5,r5,1
1000a9f4:	003ca406 	br	10009c88 <__alt_data_end+0xf8009c88>
1000a9f8:	00800184 	movi	r2,6
1000a9fc:	300f883a 	mov	r7,r6
1000aa00:	1180012e 	bgeu	r2,r6,1000aa08 <___vfiprintf_internal_r+0x1378>
1000aa04:	100f883a 	mov	r7,r2
1000aa08:	3829883a 	mov	r20,r7
1000aa0c:	38001e16 	blt	r7,zero,1000aa88 <___vfiprintf_internal_r+0x13f8>
1000aa10:	dd412315 	stw	r21,1164(sp)
1000aa14:	05c40074 	movhi	r23,4097
1000aa18:	bdc68804 	addi	r23,r23,6688
1000aa1c:	0025883a 	mov	r18,zero
1000aa20:	003c6c06 	br	10009bd4 <__alt_data_end+0xf8009bd4>
1000aa24:	d9012317 	ldw	r4,1164(sp)
1000aa28:	d9412417 	ldw	r5,1168(sp)
1000aa2c:	20800017 	ldw	r2,0(r4)
1000aa30:	21000104 	addi	r4,r4,4
1000aa34:	d9012315 	stw	r4,1164(sp)
1000aa38:	11400015 	stw	r5,0(r2)
1000aa3c:	003b4b06 	br	1000976c <__alt_data_end+0xf800976c>
1000aa40:	d9411b17 	ldw	r5,1132(sp)
1000aa44:	00840074 	movhi	r2,4097
1000aa48:	1086e804 	addi	r2,r2,7072
1000aa4c:	d8812515 	stw	r2,1172(sp)
1000aa50:	29400044 	addi	r5,r5,1
1000aa54:	003cff06 	br	10009e54 <__alt_data_end+0xf8009e54>
1000aa58:	1009883a 	mov	r4,r2
1000aa5c:	05440074 	movhi	r21,4097
1000aa60:	ad46e404 	addi	r21,r21,7056
1000aa64:	003e9906 	br	1000a4cc <__alt_data_end+0xf800a4cc>
1000aa68:	900f883a 	mov	r7,r18
1000aa6c:	dd811d83 	ldbu	r22,1142(sp)
1000aa70:	dd412315 	stw	r21,1164(sp)
1000aa74:	0025883a 	mov	r18,zero
1000aa78:	003c4e06 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000aa7c:	1013883a 	mov	r9,r2
1000aa80:	000d883a 	mov	r6,zero
1000aa84:	003b6306 	br	10009814 <__alt_data_end+0xf8009814>
1000aa88:	0029883a 	mov	r20,zero
1000aa8c:	003fe006 	br	1000aa10 <__alt_data_end+0xf800aa10>
1000aa90:	043fffc4 	movi	r16,-1
1000aa94:	003bf306 	br	10009a64 <__alt_data_end+0xf8009a64>
1000aa98:	d9412317 	ldw	r5,1164(sp)
1000aa9c:	48c00043 	ldbu	r3,1(r9)
1000aaa0:	1013883a 	mov	r9,r2
1000aaa4:	29800017 	ldw	r6,0(r5)
1000aaa8:	29000104 	addi	r4,r5,4
1000aaac:	d9012315 	stw	r4,1164(sp)
1000aab0:	30000416 	blt	r6,zero,1000aac4 <___vfiprintf_internal_r+0x1434>
1000aab4:	18c03fcc 	andi	r3,r3,255
1000aab8:	18c0201c 	xori	r3,r3,128
1000aabc:	18ffe004 	addi	r3,r3,-128
1000aac0:	003b5306 	br	10009810 <__alt_data_end+0xf8009810>
1000aac4:	18c03fcc 	andi	r3,r3,255
1000aac8:	18c0201c 	xori	r3,r3,128
1000aacc:	01bfffc4 	movi	r6,-1
1000aad0:	18ffe004 	addi	r3,r3,-128
1000aad4:	003b4e06 	br	10009810 <__alt_data_end+0xf8009810>

1000aad8 <__vfiprintf_internal>:
1000aad8:	00840074 	movhi	r2,4097
1000aadc:	108de504 	addi	r2,r2,14228
1000aae0:	2007883a 	mov	r3,r4
1000aae4:	11000017 	ldw	r4,0(r2)
1000aae8:	2805883a 	mov	r2,r5
1000aaec:	300f883a 	mov	r7,r6
1000aaf0:	180b883a 	mov	r5,r3
1000aaf4:	100d883a 	mov	r6,r2
1000aaf8:	00096901 	jmpi	10009690 <___vfiprintf_internal_r>

1000aafc <_write_r>:
1000aafc:	defffd04 	addi	sp,sp,-12
1000ab00:	dc400115 	stw	r17,4(sp)
1000ab04:	dc000015 	stw	r16,0(sp)
1000ab08:	2023883a 	mov	r17,r4
1000ab0c:	04040074 	movhi	r16,4097
1000ab10:	8414b604 	addi	r16,r16,21208
1000ab14:	2809883a 	mov	r4,r5
1000ab18:	300b883a 	mov	r5,r6
1000ab1c:	380d883a 	mov	r6,r7
1000ab20:	dfc00215 	stw	ra,8(sp)
1000ab24:	80000015 	stw	zero,0(r16)
1000ab28:	000f3680 	call	1000f368 <write>
1000ab2c:	00ffffc4 	movi	r3,-1
1000ab30:	10c00526 	beq	r2,r3,1000ab48 <_write_r+0x4c>
1000ab34:	dfc00217 	ldw	ra,8(sp)
1000ab38:	dc400117 	ldw	r17,4(sp)
1000ab3c:	dc000017 	ldw	r16,0(sp)
1000ab40:	dec00304 	addi	sp,sp,12
1000ab44:	f800283a 	ret
1000ab48:	80c00017 	ldw	r3,0(r16)
1000ab4c:	183ff926 	beq	r3,zero,1000ab34 <__alt_data_end+0xf800ab34>
1000ab50:	88c00015 	stw	r3,0(r17)
1000ab54:	dfc00217 	ldw	ra,8(sp)
1000ab58:	dc400117 	ldw	r17,4(sp)
1000ab5c:	dc000017 	ldw	r16,0(sp)
1000ab60:	dec00304 	addi	sp,sp,12
1000ab64:	f800283a 	ret

1000ab68 <_close_r>:
1000ab68:	defffd04 	addi	sp,sp,-12
1000ab6c:	dc400115 	stw	r17,4(sp)
1000ab70:	dc000015 	stw	r16,0(sp)
1000ab74:	2023883a 	mov	r17,r4
1000ab78:	04040074 	movhi	r16,4097
1000ab7c:	8414b604 	addi	r16,r16,21208
1000ab80:	2809883a 	mov	r4,r5
1000ab84:	dfc00215 	stw	ra,8(sp)
1000ab88:	80000015 	stw	zero,0(r16)
1000ab8c:	000eab40 	call	1000eab4 <close>
1000ab90:	00ffffc4 	movi	r3,-1
1000ab94:	10c00526 	beq	r2,r3,1000abac <_close_r+0x44>
1000ab98:	dfc00217 	ldw	ra,8(sp)
1000ab9c:	dc400117 	ldw	r17,4(sp)
1000aba0:	dc000017 	ldw	r16,0(sp)
1000aba4:	dec00304 	addi	sp,sp,12
1000aba8:	f800283a 	ret
1000abac:	80c00017 	ldw	r3,0(r16)
1000abb0:	183ff926 	beq	r3,zero,1000ab98 <__alt_data_end+0xf800ab98>
1000abb4:	88c00015 	stw	r3,0(r17)
1000abb8:	dfc00217 	ldw	ra,8(sp)
1000abbc:	dc400117 	ldw	r17,4(sp)
1000abc0:	dc000017 	ldw	r16,0(sp)
1000abc4:	dec00304 	addi	sp,sp,12
1000abc8:	f800283a 	ret

1000abcc <_calloc_r>:
1000abcc:	defffe04 	addi	sp,sp,-8
1000abd0:	dc000015 	stw	r16,0(sp)
1000abd4:	2021883a 	mov	r16,r4
1000abd8:	2809883a 	mov	r4,r5
1000abdc:	300b883a 	mov	r5,r6
1000abe0:	dfc00115 	stw	ra,4(sp)
1000abe4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000abe8:	8009883a 	mov	r4,r16
1000abec:	100b883a 	mov	r5,r2
1000abf0:	000713c0 	call	1000713c <_malloc_r>
1000abf4:	1021883a 	mov	r16,r2
1000abf8:	10002826 	beq	r2,zero,1000ac9c <_calloc_r+0xd0>
1000abfc:	11bfff17 	ldw	r6,-4(r2)
1000ac00:	00ffff04 	movi	r3,-4
1000ac04:	00800904 	movi	r2,36
1000ac08:	30cc703a 	and	r6,r6,r3
1000ac0c:	30cd883a 	add	r6,r6,r3
1000ac10:	11801436 	bltu	r2,r6,1000ac64 <_calloc_r+0x98>
1000ac14:	00c004c4 	movi	r3,19
1000ac18:	19800936 	bltu	r3,r6,1000ac40 <_calloc_r+0x74>
1000ac1c:	8005883a 	mov	r2,r16
1000ac20:	10000015 	stw	zero,0(r2)
1000ac24:	10000115 	stw	zero,4(r2)
1000ac28:	10000215 	stw	zero,8(r2)
1000ac2c:	8005883a 	mov	r2,r16
1000ac30:	dfc00117 	ldw	ra,4(sp)
1000ac34:	dc000017 	ldw	r16,0(sp)
1000ac38:	dec00204 	addi	sp,sp,8
1000ac3c:	f800283a 	ret
1000ac40:	80000015 	stw	zero,0(r16)
1000ac44:	80000115 	stw	zero,4(r16)
1000ac48:	00c006c4 	movi	r3,27
1000ac4c:	19800d2e 	bgeu	r3,r6,1000ac84 <_calloc_r+0xb8>
1000ac50:	80000215 	stw	zero,8(r16)
1000ac54:	80000315 	stw	zero,12(r16)
1000ac58:	30800c26 	beq	r6,r2,1000ac8c <_calloc_r+0xc0>
1000ac5c:	80800404 	addi	r2,r16,16
1000ac60:	003fef06 	br	1000ac20 <__alt_data_end+0xf800ac20>
1000ac64:	8009883a 	mov	r4,r16
1000ac68:	000b883a 	mov	r5,zero
1000ac6c:	0007c300 	call	10007c30 <memset>
1000ac70:	8005883a 	mov	r2,r16
1000ac74:	dfc00117 	ldw	ra,4(sp)
1000ac78:	dc000017 	ldw	r16,0(sp)
1000ac7c:	dec00204 	addi	sp,sp,8
1000ac80:	f800283a 	ret
1000ac84:	80800204 	addi	r2,r16,8
1000ac88:	003fe506 	br	1000ac20 <__alt_data_end+0xf800ac20>
1000ac8c:	80000415 	stw	zero,16(r16)
1000ac90:	80800604 	addi	r2,r16,24
1000ac94:	80000515 	stw	zero,20(r16)
1000ac98:	003fe106 	br	1000ac20 <__alt_data_end+0xf800ac20>
1000ac9c:	0005883a 	mov	r2,zero
1000aca0:	003fe306 	br	1000ac30 <__alt_data_end+0xf800ac30>

1000aca4 <_fclose_r>:
1000aca4:	defffc04 	addi	sp,sp,-16
1000aca8:	dc000015 	stw	r16,0(sp)
1000acac:	dfc00315 	stw	ra,12(sp)
1000acb0:	dc800215 	stw	r18,8(sp)
1000acb4:	dc400115 	stw	r17,4(sp)
1000acb8:	2821883a 	mov	r16,r5
1000acbc:	28003126 	beq	r5,zero,1000ad84 <_fclose_r+0xe0>
1000acc0:	2023883a 	mov	r17,r4
1000acc4:	000645c0 	call	1000645c <__sfp_lock_acquire>
1000acc8:	88000226 	beq	r17,zero,1000acd4 <_fclose_r+0x30>
1000accc:	88800e17 	ldw	r2,56(r17)
1000acd0:	10003326 	beq	r2,zero,1000ada0 <_fclose_r+0xfc>
1000acd4:	8080030f 	ldh	r2,12(r16)
1000acd8:	10002226 	beq	r2,zero,1000ad64 <_fclose_r+0xc0>
1000acdc:	8809883a 	mov	r4,r17
1000ace0:	800b883a 	mov	r5,r16
1000ace4:	0005e840 	call	10005e84 <_fflush_r>
1000ace8:	80c00b17 	ldw	r3,44(r16)
1000acec:	1025883a 	mov	r18,r2
1000acf0:	18000426 	beq	r3,zero,1000ad04 <_fclose_r+0x60>
1000acf4:	81400717 	ldw	r5,28(r16)
1000acf8:	8809883a 	mov	r4,r17
1000acfc:	183ee83a 	callr	r3
1000ad00:	10003016 	blt	r2,zero,1000adc4 <_fclose_r+0x120>
1000ad04:	8080030b 	ldhu	r2,12(r16)
1000ad08:	1080200c 	andi	r2,r2,128
1000ad0c:	1000291e 	bne	r2,zero,1000adb4 <_fclose_r+0x110>
1000ad10:	81400c17 	ldw	r5,48(r16)
1000ad14:	28000526 	beq	r5,zero,1000ad2c <_fclose_r+0x88>
1000ad18:	80801004 	addi	r2,r16,64
1000ad1c:	28800226 	beq	r5,r2,1000ad28 <_fclose_r+0x84>
1000ad20:	8809883a 	mov	r4,r17
1000ad24:	00065d80 	call	100065d8 <_free_r>
1000ad28:	80000c15 	stw	zero,48(r16)
1000ad2c:	81401117 	ldw	r5,68(r16)
1000ad30:	28000326 	beq	r5,zero,1000ad40 <_fclose_r+0x9c>
1000ad34:	8809883a 	mov	r4,r17
1000ad38:	00065d80 	call	100065d8 <_free_r>
1000ad3c:	80001115 	stw	zero,68(r16)
1000ad40:	8000030d 	sth	zero,12(r16)
1000ad44:	00064600 	call	10006460 <__sfp_lock_release>
1000ad48:	9005883a 	mov	r2,r18
1000ad4c:	dfc00317 	ldw	ra,12(sp)
1000ad50:	dc800217 	ldw	r18,8(sp)
1000ad54:	dc400117 	ldw	r17,4(sp)
1000ad58:	dc000017 	ldw	r16,0(sp)
1000ad5c:	dec00404 	addi	sp,sp,16
1000ad60:	f800283a 	ret
1000ad64:	00064600 	call	10006460 <__sfp_lock_release>
1000ad68:	0005883a 	mov	r2,zero
1000ad6c:	dfc00317 	ldw	ra,12(sp)
1000ad70:	dc800217 	ldw	r18,8(sp)
1000ad74:	dc400117 	ldw	r17,4(sp)
1000ad78:	dc000017 	ldw	r16,0(sp)
1000ad7c:	dec00404 	addi	sp,sp,16
1000ad80:	f800283a 	ret
1000ad84:	0005883a 	mov	r2,zero
1000ad88:	dfc00317 	ldw	ra,12(sp)
1000ad8c:	dc800217 	ldw	r18,8(sp)
1000ad90:	dc400117 	ldw	r17,4(sp)
1000ad94:	dc000017 	ldw	r16,0(sp)
1000ad98:	dec00404 	addi	sp,sp,16
1000ad9c:	f800283a 	ret
1000ada0:	8809883a 	mov	r4,r17
1000ada4:	00061a40 	call	100061a4 <__sinit>
1000ada8:	8080030f 	ldh	r2,12(r16)
1000adac:	103fcb1e 	bne	r2,zero,1000acdc <__alt_data_end+0xf800acdc>
1000adb0:	003fec06 	br	1000ad64 <__alt_data_end+0xf800ad64>
1000adb4:	81400417 	ldw	r5,16(r16)
1000adb8:	8809883a 	mov	r4,r17
1000adbc:	00065d80 	call	100065d8 <_free_r>
1000adc0:	003fd306 	br	1000ad10 <__alt_data_end+0xf800ad10>
1000adc4:	04bfffc4 	movi	r18,-1
1000adc8:	003fce06 	br	1000ad04 <__alt_data_end+0xf800ad04>

1000adcc <fclose>:
1000adcc:	00840074 	movhi	r2,4097
1000add0:	108de504 	addi	r2,r2,14228
1000add4:	200b883a 	mov	r5,r4
1000add8:	11000017 	ldw	r4,0(r2)
1000addc:	000aca41 	jmpi	1000aca4 <_fclose_r>

1000ade0 <_fputwc_r>:
1000ade0:	3080030b 	ldhu	r2,12(r6)
1000ade4:	defff804 	addi	sp,sp,-32
1000ade8:	dcc00415 	stw	r19,16(sp)
1000adec:	dc800315 	stw	r18,12(sp)
1000adf0:	dc000115 	stw	r16,4(sp)
1000adf4:	dfc00715 	stw	ra,28(sp)
1000adf8:	dd400615 	stw	r21,24(sp)
1000adfc:	dd000515 	stw	r20,20(sp)
1000ae00:	dc400215 	stw	r17,8(sp)
1000ae04:	10c8000c 	andi	r3,r2,8192
1000ae08:	3021883a 	mov	r16,r6
1000ae0c:	2027883a 	mov	r19,r4
1000ae10:	2825883a 	mov	r18,r5
1000ae14:	1800051e 	bne	r3,zero,1000ae2c <_fputwc_r+0x4c>
1000ae18:	30c01917 	ldw	r3,100(r6)
1000ae1c:	10880014 	ori	r2,r2,8192
1000ae20:	3080030d 	sth	r2,12(r6)
1000ae24:	18880014 	ori	r2,r3,8192
1000ae28:	30801915 	stw	r2,100(r6)
1000ae2c:	0006f300 	call	10006f30 <__locale_mb_cur_max>
1000ae30:	00c00044 	movi	r3,1
1000ae34:	10c03e26 	beq	r2,r3,1000af30 <_fputwc_r+0x150>
1000ae38:	9809883a 	mov	r4,r19
1000ae3c:	d80b883a 	mov	r5,sp
1000ae40:	900d883a 	mov	r6,r18
1000ae44:	81c01704 	addi	r7,r16,92
1000ae48:	000b31c0 	call	1000b31c <_wcrtomb_r>
1000ae4c:	1029883a 	mov	r20,r2
1000ae50:	00bfffc4 	movi	r2,-1
1000ae54:	a0802026 	beq	r20,r2,1000aed8 <_fputwc_r+0xf8>
1000ae58:	d9400003 	ldbu	r5,0(sp)
1000ae5c:	a0001c26 	beq	r20,zero,1000aed0 <_fputwc_r+0xf0>
1000ae60:	0023883a 	mov	r17,zero
1000ae64:	05400284 	movi	r21,10
1000ae68:	00000906 	br	1000ae90 <_fputwc_r+0xb0>
1000ae6c:	80c00017 	ldw	r3,0(r16)
1000ae70:	19400005 	stb	r5,0(r3)
1000ae74:	80c00017 	ldw	r3,0(r16)
1000ae78:	18c00044 	addi	r3,r3,1
1000ae7c:	80c00015 	stw	r3,0(r16)
1000ae80:	8c400044 	addi	r17,r17,1
1000ae84:	dc47883a 	add	r3,sp,r17
1000ae88:	8d00112e 	bgeu	r17,r20,1000aed0 <_fputwc_r+0xf0>
1000ae8c:	19400003 	ldbu	r5,0(r3)
1000ae90:	80c00217 	ldw	r3,8(r16)
1000ae94:	18ffffc4 	addi	r3,r3,-1
1000ae98:	80c00215 	stw	r3,8(r16)
1000ae9c:	183ff30e 	bge	r3,zero,1000ae6c <__alt_data_end+0xf800ae6c>
1000aea0:	80800617 	ldw	r2,24(r16)
1000aea4:	18801916 	blt	r3,r2,1000af0c <_fputwc_r+0x12c>
1000aea8:	80800017 	ldw	r2,0(r16)
1000aeac:	11400005 	stb	r5,0(r2)
1000aeb0:	80800017 	ldw	r2,0(r16)
1000aeb4:	10c00003 	ldbu	r3,0(r2)
1000aeb8:	10800044 	addi	r2,r2,1
1000aebc:	1d402326 	beq	r3,r21,1000af4c <_fputwc_r+0x16c>
1000aec0:	8c400044 	addi	r17,r17,1
1000aec4:	80800015 	stw	r2,0(r16)
1000aec8:	dc47883a 	add	r3,sp,r17
1000aecc:	8d3fef36 	bltu	r17,r20,1000ae8c <__alt_data_end+0xf800ae8c>
1000aed0:	9005883a 	mov	r2,r18
1000aed4:	00000406 	br	1000aee8 <_fputwc_r+0x108>
1000aed8:	80c0030b 	ldhu	r3,12(r16)
1000aedc:	a005883a 	mov	r2,r20
1000aee0:	18c01014 	ori	r3,r3,64
1000aee4:	80c0030d 	sth	r3,12(r16)
1000aee8:	dfc00717 	ldw	ra,28(sp)
1000aeec:	dd400617 	ldw	r21,24(sp)
1000aef0:	dd000517 	ldw	r20,20(sp)
1000aef4:	dcc00417 	ldw	r19,16(sp)
1000aef8:	dc800317 	ldw	r18,12(sp)
1000aefc:	dc400217 	ldw	r17,8(sp)
1000af00:	dc000117 	ldw	r16,4(sp)
1000af04:	dec00804 	addi	sp,sp,32
1000af08:	f800283a 	ret
1000af0c:	9809883a 	mov	r4,r19
1000af10:	29403fcc 	andi	r5,r5,255
1000af14:	800d883a 	mov	r6,r16
1000af18:	000b1800 	call	1000b180 <__swbuf_r>
1000af1c:	10bfffe0 	cmpeqi	r2,r2,-1
1000af20:	10803fcc 	andi	r2,r2,255
1000af24:	103fd626 	beq	r2,zero,1000ae80 <__alt_data_end+0xf800ae80>
1000af28:	00bfffc4 	movi	r2,-1
1000af2c:	003fee06 	br	1000aee8 <__alt_data_end+0xf800aee8>
1000af30:	90ffffc4 	addi	r3,r18,-1
1000af34:	01003f84 	movi	r4,254
1000af38:	20ffbf36 	bltu	r4,r3,1000ae38 <__alt_data_end+0xf800ae38>
1000af3c:	900b883a 	mov	r5,r18
1000af40:	dc800005 	stb	r18,0(sp)
1000af44:	1029883a 	mov	r20,r2
1000af48:	003fc506 	br	1000ae60 <__alt_data_end+0xf800ae60>
1000af4c:	9809883a 	mov	r4,r19
1000af50:	a80b883a 	mov	r5,r21
1000af54:	800d883a 	mov	r6,r16
1000af58:	000b1800 	call	1000b180 <__swbuf_r>
1000af5c:	10bfffe0 	cmpeqi	r2,r2,-1
1000af60:	003fef06 	br	1000af20 <__alt_data_end+0xf800af20>

1000af64 <fputwc>:
1000af64:	defffc04 	addi	sp,sp,-16
1000af68:	dc000115 	stw	r16,4(sp)
1000af6c:	04040074 	movhi	r16,4097
1000af70:	840de504 	addi	r16,r16,14228
1000af74:	80800017 	ldw	r2,0(r16)
1000af78:	dc400215 	stw	r17,8(sp)
1000af7c:	dfc00315 	stw	ra,12(sp)
1000af80:	2023883a 	mov	r17,r4
1000af84:	280d883a 	mov	r6,r5
1000af88:	10000d26 	beq	r2,zero,1000afc0 <fputwc+0x5c>
1000af8c:	10c00e17 	ldw	r3,56(r2)
1000af90:	1009883a 	mov	r4,r2
1000af94:	1800041e 	bne	r3,zero,1000afa8 <fputwc+0x44>
1000af98:	d9400015 	stw	r5,0(sp)
1000af9c:	00061a40 	call	100061a4 <__sinit>
1000afa0:	81000017 	ldw	r4,0(r16)
1000afa4:	d9800017 	ldw	r6,0(sp)
1000afa8:	880b883a 	mov	r5,r17
1000afac:	dfc00317 	ldw	ra,12(sp)
1000afb0:	dc400217 	ldw	r17,8(sp)
1000afb4:	dc000117 	ldw	r16,4(sp)
1000afb8:	dec00404 	addi	sp,sp,16
1000afbc:	000ade01 	jmpi	1000ade0 <_fputwc_r>
1000afc0:	0009883a 	mov	r4,zero
1000afc4:	880b883a 	mov	r5,r17
1000afc8:	dfc00317 	ldw	ra,12(sp)
1000afcc:	dc400217 	ldw	r17,8(sp)
1000afd0:	dc000117 	ldw	r16,4(sp)
1000afd4:	dec00404 	addi	sp,sp,16
1000afd8:	000ade01 	jmpi	1000ade0 <_fputwc_r>

1000afdc <_fstat_r>:
1000afdc:	defffd04 	addi	sp,sp,-12
1000afe0:	dc400115 	stw	r17,4(sp)
1000afe4:	dc000015 	stw	r16,0(sp)
1000afe8:	2023883a 	mov	r17,r4
1000afec:	04040074 	movhi	r16,4097
1000aff0:	8414b604 	addi	r16,r16,21208
1000aff4:	2809883a 	mov	r4,r5
1000aff8:	300b883a 	mov	r5,r6
1000affc:	dfc00215 	stw	ra,8(sp)
1000b000:	80000015 	stw	zero,0(r16)
1000b004:	000ec000 	call	1000ec00 <fstat>
1000b008:	00ffffc4 	movi	r3,-1
1000b00c:	10c00526 	beq	r2,r3,1000b024 <_fstat_r+0x48>
1000b010:	dfc00217 	ldw	ra,8(sp)
1000b014:	dc400117 	ldw	r17,4(sp)
1000b018:	dc000017 	ldw	r16,0(sp)
1000b01c:	dec00304 	addi	sp,sp,12
1000b020:	f800283a 	ret
1000b024:	80c00017 	ldw	r3,0(r16)
1000b028:	183ff926 	beq	r3,zero,1000b010 <__alt_data_end+0xf800b010>
1000b02c:	88c00015 	stw	r3,0(r17)
1000b030:	dfc00217 	ldw	ra,8(sp)
1000b034:	dc400117 	ldw	r17,4(sp)
1000b038:	dc000017 	ldw	r16,0(sp)
1000b03c:	dec00304 	addi	sp,sp,12
1000b040:	f800283a 	ret

1000b044 <_isatty_r>:
1000b044:	defffd04 	addi	sp,sp,-12
1000b048:	dc400115 	stw	r17,4(sp)
1000b04c:	dc000015 	stw	r16,0(sp)
1000b050:	2023883a 	mov	r17,r4
1000b054:	04040074 	movhi	r16,4097
1000b058:	8414b604 	addi	r16,r16,21208
1000b05c:	2809883a 	mov	r4,r5
1000b060:	dfc00215 	stw	ra,8(sp)
1000b064:	80000015 	stw	zero,0(r16)
1000b068:	000ed040 	call	1000ed04 <isatty>
1000b06c:	00ffffc4 	movi	r3,-1
1000b070:	10c00526 	beq	r2,r3,1000b088 <_isatty_r+0x44>
1000b074:	dfc00217 	ldw	ra,8(sp)
1000b078:	dc400117 	ldw	r17,4(sp)
1000b07c:	dc000017 	ldw	r16,0(sp)
1000b080:	dec00304 	addi	sp,sp,12
1000b084:	f800283a 	ret
1000b088:	80c00017 	ldw	r3,0(r16)
1000b08c:	183ff926 	beq	r3,zero,1000b074 <__alt_data_end+0xf800b074>
1000b090:	88c00015 	stw	r3,0(r17)
1000b094:	dfc00217 	ldw	ra,8(sp)
1000b098:	dc400117 	ldw	r17,4(sp)
1000b09c:	dc000017 	ldw	r16,0(sp)
1000b0a0:	dec00304 	addi	sp,sp,12
1000b0a4:	f800283a 	ret

1000b0a8 <_lseek_r>:
1000b0a8:	defffd04 	addi	sp,sp,-12
1000b0ac:	dc400115 	stw	r17,4(sp)
1000b0b0:	dc000015 	stw	r16,0(sp)
1000b0b4:	2023883a 	mov	r17,r4
1000b0b8:	04040074 	movhi	r16,4097
1000b0bc:	8414b604 	addi	r16,r16,21208
1000b0c0:	2809883a 	mov	r4,r5
1000b0c4:	300b883a 	mov	r5,r6
1000b0c8:	380d883a 	mov	r6,r7
1000b0cc:	dfc00215 	stw	ra,8(sp)
1000b0d0:	80000015 	stw	zero,0(r16)
1000b0d4:	000eee00 	call	1000eee0 <lseek>
1000b0d8:	00ffffc4 	movi	r3,-1
1000b0dc:	10c00526 	beq	r2,r3,1000b0f4 <_lseek_r+0x4c>
1000b0e0:	dfc00217 	ldw	ra,8(sp)
1000b0e4:	dc400117 	ldw	r17,4(sp)
1000b0e8:	dc000017 	ldw	r16,0(sp)
1000b0ec:	dec00304 	addi	sp,sp,12
1000b0f0:	f800283a 	ret
1000b0f4:	80c00017 	ldw	r3,0(r16)
1000b0f8:	183ff926 	beq	r3,zero,1000b0e0 <__alt_data_end+0xf800b0e0>
1000b0fc:	88c00015 	stw	r3,0(r17)
1000b100:	dfc00217 	ldw	ra,8(sp)
1000b104:	dc400117 	ldw	r17,4(sp)
1000b108:	dc000017 	ldw	r16,0(sp)
1000b10c:	dec00304 	addi	sp,sp,12
1000b110:	f800283a 	ret

1000b114 <_read_r>:
1000b114:	defffd04 	addi	sp,sp,-12
1000b118:	dc400115 	stw	r17,4(sp)
1000b11c:	dc000015 	stw	r16,0(sp)
1000b120:	2023883a 	mov	r17,r4
1000b124:	04040074 	movhi	r16,4097
1000b128:	8414b604 	addi	r16,r16,21208
1000b12c:	2809883a 	mov	r4,r5
1000b130:	300b883a 	mov	r5,r6
1000b134:	380d883a 	mov	r6,r7
1000b138:	dfc00215 	stw	ra,8(sp)
1000b13c:	80000015 	stw	zero,0(r16)
1000b140:	000f0c00 	call	1000f0c0 <read>
1000b144:	00ffffc4 	movi	r3,-1
1000b148:	10c00526 	beq	r2,r3,1000b160 <_read_r+0x4c>
1000b14c:	dfc00217 	ldw	ra,8(sp)
1000b150:	dc400117 	ldw	r17,4(sp)
1000b154:	dc000017 	ldw	r16,0(sp)
1000b158:	dec00304 	addi	sp,sp,12
1000b15c:	f800283a 	ret
1000b160:	80c00017 	ldw	r3,0(r16)
1000b164:	183ff926 	beq	r3,zero,1000b14c <__alt_data_end+0xf800b14c>
1000b168:	88c00015 	stw	r3,0(r17)
1000b16c:	dfc00217 	ldw	ra,8(sp)
1000b170:	dc400117 	ldw	r17,4(sp)
1000b174:	dc000017 	ldw	r16,0(sp)
1000b178:	dec00304 	addi	sp,sp,12
1000b17c:	f800283a 	ret

1000b180 <__swbuf_r>:
1000b180:	defffc04 	addi	sp,sp,-16
1000b184:	dc800215 	stw	r18,8(sp)
1000b188:	dc400115 	stw	r17,4(sp)
1000b18c:	dc000015 	stw	r16,0(sp)
1000b190:	dfc00315 	stw	ra,12(sp)
1000b194:	2023883a 	mov	r17,r4
1000b198:	2825883a 	mov	r18,r5
1000b19c:	3021883a 	mov	r16,r6
1000b1a0:	20000226 	beq	r4,zero,1000b1ac <__swbuf_r+0x2c>
1000b1a4:	20800e17 	ldw	r2,56(r4)
1000b1a8:	10004d26 	beq	r2,zero,1000b2e0 <__swbuf_r+0x160>
1000b1ac:	80800617 	ldw	r2,24(r16)
1000b1b0:	80c0030b 	ldhu	r3,12(r16)
1000b1b4:	80800215 	stw	r2,8(r16)
1000b1b8:	1880020c 	andi	r2,r3,8
1000b1bc:	10004126 	beq	r2,zero,1000b2c4 <__swbuf_r+0x144>
1000b1c0:	80800417 	ldw	r2,16(r16)
1000b1c4:	10003f26 	beq	r2,zero,1000b2c4 <__swbuf_r+0x144>
1000b1c8:	1908000c 	andi	r4,r3,8192
1000b1cc:	94803fcc 	andi	r18,r18,255
1000b1d0:	20001726 	beq	r4,zero,1000b230 <__swbuf_r+0xb0>
1000b1d4:	80c00017 	ldw	r3,0(r16)
1000b1d8:	81000517 	ldw	r4,20(r16)
1000b1dc:	1885c83a 	sub	r2,r3,r2
1000b1e0:	11001d0e 	bge	r2,r4,1000b258 <__swbuf_r+0xd8>
1000b1e4:	81000217 	ldw	r4,8(r16)
1000b1e8:	19400044 	addi	r5,r3,1
1000b1ec:	81400015 	stw	r5,0(r16)
1000b1f0:	213fffc4 	addi	r4,r4,-1
1000b1f4:	81000215 	stw	r4,8(r16)
1000b1f8:	1c800005 	stb	r18,0(r3)
1000b1fc:	80c00517 	ldw	r3,20(r16)
1000b200:	10800044 	addi	r2,r2,1
1000b204:	18802226 	beq	r3,r2,1000b290 <__swbuf_r+0x110>
1000b208:	8080030b 	ldhu	r2,12(r16)
1000b20c:	1080004c 	andi	r2,r2,1
1000b210:	1000251e 	bne	r2,zero,1000b2a8 <__swbuf_r+0x128>
1000b214:	9005883a 	mov	r2,r18
1000b218:	dfc00317 	ldw	ra,12(sp)
1000b21c:	dc800217 	ldw	r18,8(sp)
1000b220:	dc400117 	ldw	r17,4(sp)
1000b224:	dc000017 	ldw	r16,0(sp)
1000b228:	dec00404 	addi	sp,sp,16
1000b22c:	f800283a 	ret
1000b230:	81401917 	ldw	r5,100(r16)
1000b234:	18c80014 	ori	r3,r3,8192
1000b238:	0137ffc4 	movi	r4,-8193
1000b23c:	2908703a 	and	r4,r5,r4
1000b240:	80c0030d 	sth	r3,12(r16)
1000b244:	80c00017 	ldw	r3,0(r16)
1000b248:	81001915 	stw	r4,100(r16)
1000b24c:	81000517 	ldw	r4,20(r16)
1000b250:	1885c83a 	sub	r2,r3,r2
1000b254:	113fe316 	blt	r2,r4,1000b1e4 <__alt_data_end+0xf800b1e4>
1000b258:	8809883a 	mov	r4,r17
1000b25c:	800b883a 	mov	r5,r16
1000b260:	0005e840 	call	10005e84 <_fflush_r>
1000b264:	10000e1e 	bne	r2,zero,1000b2a0 <__swbuf_r+0x120>
1000b268:	80c00017 	ldw	r3,0(r16)
1000b26c:	81000217 	ldw	r4,8(r16)
1000b270:	00800044 	movi	r2,1
1000b274:	19400044 	addi	r5,r3,1
1000b278:	213fffc4 	addi	r4,r4,-1
1000b27c:	81400015 	stw	r5,0(r16)
1000b280:	81000215 	stw	r4,8(r16)
1000b284:	1c800005 	stb	r18,0(r3)
1000b288:	80c00517 	ldw	r3,20(r16)
1000b28c:	18bfde1e 	bne	r3,r2,1000b208 <__alt_data_end+0xf800b208>
1000b290:	8809883a 	mov	r4,r17
1000b294:	800b883a 	mov	r5,r16
1000b298:	0005e840 	call	10005e84 <_fflush_r>
1000b29c:	103fdd26 	beq	r2,zero,1000b214 <__alt_data_end+0xf800b214>
1000b2a0:	00bfffc4 	movi	r2,-1
1000b2a4:	003fdc06 	br	1000b218 <__alt_data_end+0xf800b218>
1000b2a8:	00800284 	movi	r2,10
1000b2ac:	90bfd91e 	bne	r18,r2,1000b214 <__alt_data_end+0xf800b214>
1000b2b0:	8809883a 	mov	r4,r17
1000b2b4:	800b883a 	mov	r5,r16
1000b2b8:	0005e840 	call	10005e84 <_fflush_r>
1000b2bc:	103fd526 	beq	r2,zero,1000b214 <__alt_data_end+0xf800b214>
1000b2c0:	003ff706 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b2c4:	8809883a 	mov	r4,r17
1000b2c8:	800b883a 	mov	r5,r16
1000b2cc:	00044e80 	call	100044e8 <__swsetup_r>
1000b2d0:	80c0030b 	ldhu	r3,12(r16)
1000b2d4:	1000041e 	bne	r2,zero,1000b2e8 <__swbuf_r+0x168>
1000b2d8:	80800417 	ldw	r2,16(r16)
1000b2dc:	003fba06 	br	1000b1c8 <__alt_data_end+0xf800b1c8>
1000b2e0:	00061a40 	call	100061a4 <__sinit>
1000b2e4:	003fb106 	br	1000b1ac <__alt_data_end+0xf800b1ac>
1000b2e8:	18c01014 	ori	r3,r3,64
1000b2ec:	80c0030d 	sth	r3,12(r16)
1000b2f0:	00c00244 	movi	r3,9
1000b2f4:	00bfffc4 	movi	r2,-1
1000b2f8:	88c00015 	stw	r3,0(r17)
1000b2fc:	003fc606 	br	1000b218 <__alt_data_end+0xf800b218>

1000b300 <__swbuf>:
1000b300:	00c40074 	movhi	r3,4097
1000b304:	18cde504 	addi	r3,r3,14228
1000b308:	2005883a 	mov	r2,r4
1000b30c:	19000017 	ldw	r4,0(r3)
1000b310:	280d883a 	mov	r6,r5
1000b314:	100b883a 	mov	r5,r2
1000b318:	000b1801 	jmpi	1000b180 <__swbuf_r>

1000b31c <_wcrtomb_r>:
1000b31c:	defff604 	addi	sp,sp,-40
1000b320:	dc800815 	stw	r18,32(sp)
1000b324:	dc400715 	stw	r17,28(sp)
1000b328:	dc000615 	stw	r16,24(sp)
1000b32c:	00840074 	movhi	r2,4097
1000b330:	108de904 	addi	r2,r2,14244
1000b334:	dfc00915 	stw	ra,36(sp)
1000b338:	2021883a 	mov	r16,r4
1000b33c:	3823883a 	mov	r17,r7
1000b340:	14800017 	ldw	r18,0(r2)
1000b344:	28001426 	beq	r5,zero,1000b398 <_wcrtomb_r+0x7c>
1000b348:	d9400415 	stw	r5,16(sp)
1000b34c:	d9800515 	stw	r6,20(sp)
1000b350:	0006f240 	call	10006f24 <__locale_charset>
1000b354:	d9400417 	ldw	r5,16(sp)
1000b358:	d9800517 	ldw	r6,20(sp)
1000b35c:	8009883a 	mov	r4,r16
1000b360:	dc400015 	stw	r17,0(sp)
1000b364:	100f883a 	mov	r7,r2
1000b368:	903ee83a 	callr	r18
1000b36c:	00ffffc4 	movi	r3,-1
1000b370:	10c0031e 	bne	r2,r3,1000b380 <_wcrtomb_r+0x64>
1000b374:	88000015 	stw	zero,0(r17)
1000b378:	00c02284 	movi	r3,138
1000b37c:	80c00015 	stw	r3,0(r16)
1000b380:	dfc00917 	ldw	ra,36(sp)
1000b384:	dc800817 	ldw	r18,32(sp)
1000b388:	dc400717 	ldw	r17,28(sp)
1000b38c:	dc000617 	ldw	r16,24(sp)
1000b390:	dec00a04 	addi	sp,sp,40
1000b394:	f800283a 	ret
1000b398:	0006f240 	call	10006f24 <__locale_charset>
1000b39c:	8009883a 	mov	r4,r16
1000b3a0:	dc400015 	stw	r17,0(sp)
1000b3a4:	d9400104 	addi	r5,sp,4
1000b3a8:	000d883a 	mov	r6,zero
1000b3ac:	100f883a 	mov	r7,r2
1000b3b0:	903ee83a 	callr	r18
1000b3b4:	003fed06 	br	1000b36c <__alt_data_end+0xf800b36c>

1000b3b8 <wcrtomb>:
1000b3b8:	defff504 	addi	sp,sp,-44
1000b3bc:	dc400515 	stw	r17,20(sp)
1000b3c0:	dc000415 	stw	r16,16(sp)
1000b3c4:	dfc00a15 	stw	ra,40(sp)
1000b3c8:	dd400915 	stw	r21,36(sp)
1000b3cc:	dd000815 	stw	r20,32(sp)
1000b3d0:	dcc00715 	stw	r19,28(sp)
1000b3d4:	dc800615 	stw	r18,24(sp)
1000b3d8:	2021883a 	mov	r16,r4
1000b3dc:	3023883a 	mov	r17,r6
1000b3e0:	20001d26 	beq	r4,zero,1000b458 <wcrtomb+0xa0>
1000b3e4:	04840074 	movhi	r18,4097
1000b3e8:	948de504 	addi	r18,r18,14228
1000b3ec:	95400017 	ldw	r21,0(r18)
1000b3f0:	00840074 	movhi	r2,4097
1000b3f4:	108de904 	addi	r2,r2,14244
1000b3f8:	15000017 	ldw	r20,0(r2)
1000b3fc:	2827883a 	mov	r19,r5
1000b400:	0006f240 	call	10006f24 <__locale_charset>
1000b404:	a809883a 	mov	r4,r21
1000b408:	dc400015 	stw	r17,0(sp)
1000b40c:	800b883a 	mov	r5,r16
1000b410:	980d883a 	mov	r6,r19
1000b414:	100f883a 	mov	r7,r2
1000b418:	a03ee83a 	callr	r20
1000b41c:	00ffffc4 	movi	r3,-1
1000b420:	10c0041e 	bne	r2,r3,1000b434 <wcrtomb+0x7c>
1000b424:	90c00017 	ldw	r3,0(r18)
1000b428:	01002284 	movi	r4,138
1000b42c:	88000015 	stw	zero,0(r17)
1000b430:	19000015 	stw	r4,0(r3)
1000b434:	dfc00a17 	ldw	ra,40(sp)
1000b438:	dd400917 	ldw	r21,36(sp)
1000b43c:	dd000817 	ldw	r20,32(sp)
1000b440:	dcc00717 	ldw	r19,28(sp)
1000b444:	dc800617 	ldw	r18,24(sp)
1000b448:	dc400517 	ldw	r17,20(sp)
1000b44c:	dc000417 	ldw	r16,16(sp)
1000b450:	dec00b04 	addi	sp,sp,44
1000b454:	f800283a 	ret
1000b458:	04840074 	movhi	r18,4097
1000b45c:	948de504 	addi	r18,r18,14228
1000b460:	94c00017 	ldw	r19,0(r18)
1000b464:	00840074 	movhi	r2,4097
1000b468:	108de904 	addi	r2,r2,14244
1000b46c:	14000017 	ldw	r16,0(r2)
1000b470:	0006f240 	call	10006f24 <__locale_charset>
1000b474:	9809883a 	mov	r4,r19
1000b478:	dc400015 	stw	r17,0(sp)
1000b47c:	d9400104 	addi	r5,sp,4
1000b480:	000d883a 	mov	r6,zero
1000b484:	100f883a 	mov	r7,r2
1000b488:	803ee83a 	callr	r16
1000b48c:	003fe306 	br	1000b41c <__alt_data_end+0xf800b41c>

1000b490 <__ascii_wctomb>:
1000b490:	28000526 	beq	r5,zero,1000b4a8 <__ascii_wctomb+0x18>
1000b494:	00803fc4 	movi	r2,255
1000b498:	11800536 	bltu	r2,r6,1000b4b0 <__ascii_wctomb+0x20>
1000b49c:	29800005 	stb	r6,0(r5)
1000b4a0:	00800044 	movi	r2,1
1000b4a4:	f800283a 	ret
1000b4a8:	0005883a 	mov	r2,zero
1000b4ac:	f800283a 	ret
1000b4b0:	00802284 	movi	r2,138
1000b4b4:	20800015 	stw	r2,0(r4)
1000b4b8:	00bfffc4 	movi	r2,-1
1000b4bc:	f800283a 	ret

1000b4c0 <_wctomb_r>:
1000b4c0:	defff904 	addi	sp,sp,-28
1000b4c4:	00840074 	movhi	r2,4097
1000b4c8:	108de904 	addi	r2,r2,14244
1000b4cc:	dfc00615 	stw	ra,24(sp)
1000b4d0:	dc400515 	stw	r17,20(sp)
1000b4d4:	dc000415 	stw	r16,16(sp)
1000b4d8:	3823883a 	mov	r17,r7
1000b4dc:	14000017 	ldw	r16,0(r2)
1000b4e0:	d9000115 	stw	r4,4(sp)
1000b4e4:	d9400215 	stw	r5,8(sp)
1000b4e8:	d9800315 	stw	r6,12(sp)
1000b4ec:	0006f240 	call	10006f24 <__locale_charset>
1000b4f0:	d9000117 	ldw	r4,4(sp)
1000b4f4:	d9400217 	ldw	r5,8(sp)
1000b4f8:	d9800317 	ldw	r6,12(sp)
1000b4fc:	dc400015 	stw	r17,0(sp)
1000b500:	100f883a 	mov	r7,r2
1000b504:	803ee83a 	callr	r16
1000b508:	dfc00617 	ldw	ra,24(sp)
1000b50c:	dc400517 	ldw	r17,20(sp)
1000b510:	dc000417 	ldw	r16,16(sp)
1000b514:	dec00704 	addi	sp,sp,28
1000b518:	f800283a 	ret

1000b51c <__udivdi3>:
1000b51c:	defff504 	addi	sp,sp,-44
1000b520:	dc800315 	stw	r18,12(sp)
1000b524:	dc400215 	stw	r17,8(sp)
1000b528:	dfc00a15 	stw	ra,40(sp)
1000b52c:	df000915 	stw	fp,36(sp)
1000b530:	ddc00815 	stw	r23,32(sp)
1000b534:	dd800715 	stw	r22,28(sp)
1000b538:	dd400615 	stw	r21,24(sp)
1000b53c:	dd000515 	stw	r20,20(sp)
1000b540:	dcc00415 	stw	r19,16(sp)
1000b544:	dc000115 	stw	r16,4(sp)
1000b548:	2025883a 	mov	r18,r4
1000b54c:	2823883a 	mov	r17,r5
1000b550:	3800481e 	bne	r7,zero,1000b674 <__udivdi3+0x158>
1000b554:	3021883a 	mov	r16,r6
1000b558:	2027883a 	mov	r19,r4
1000b55c:	29805a2e 	bgeu	r5,r6,1000b6c8 <__udivdi3+0x1ac>
1000b560:	00bfffd4 	movui	r2,65535
1000b564:	2829883a 	mov	r20,r5
1000b568:	1180b436 	bltu	r2,r6,1000b83c <__udivdi3+0x320>
1000b56c:	00803fc4 	movi	r2,255
1000b570:	11816736 	bltu	r2,r6,1000bb10 <__udivdi3+0x5f4>
1000b574:	0005883a 	mov	r2,zero
1000b578:	0007883a 	mov	r3,zero
1000b57c:	3084d83a 	srl	r2,r6,r2
1000b580:	01040074 	movhi	r4,4097
1000b584:	2106ec04 	addi	r4,r4,7088
1000b588:	2085883a 	add	r2,r4,r2
1000b58c:	10800003 	ldbu	r2,0(r2)
1000b590:	10c7883a 	add	r3,r2,r3
1000b594:	00800804 	movi	r2,32
1000b598:	10c5c83a 	sub	r2,r2,r3
1000b59c:	10000526 	beq	r2,zero,1000b5b4 <__udivdi3+0x98>
1000b5a0:	88a2983a 	sll	r17,r17,r2
1000b5a4:	90c6d83a 	srl	r3,r18,r3
1000b5a8:	30a0983a 	sll	r16,r6,r2
1000b5ac:	90a6983a 	sll	r19,r18,r2
1000b5b0:	88e8b03a 	or	r20,r17,r3
1000b5b4:	8022d43a 	srli	r17,r16,16
1000b5b8:	a009883a 	mov	r4,r20
1000b5bc:	857fffcc 	andi	r21,r16,65535
1000b5c0:	880b883a 	mov	r5,r17
1000b5c4:	000c2b00 	call	1000c2b0 <__umodsi3>
1000b5c8:	a009883a 	mov	r4,r20
1000b5cc:	880b883a 	mov	r5,r17
1000b5d0:	102d883a 	mov	r22,r2
1000b5d4:	000c2a80 	call	1000c2a8 <__udivsi3>
1000b5d8:	1009883a 	mov	r4,r2
1000b5dc:	a80b883a 	mov	r5,r21
1000b5e0:	1025883a 	mov	r18,r2
1000b5e4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b5e8:	1009883a 	mov	r4,r2
1000b5ec:	b006943a 	slli	r3,r22,16
1000b5f0:	9804d43a 	srli	r2,r19,16
1000b5f4:	1886b03a 	or	r3,r3,r2
1000b5f8:	1900052e 	bgeu	r3,r4,1000b610 <__udivdi3+0xf4>
1000b5fc:	1c07883a 	add	r3,r3,r16
1000b600:	90bfffc4 	addi	r2,r18,-1
1000b604:	1c000136 	bltu	r3,r16,1000b60c <__udivdi3+0xf0>
1000b608:	19015636 	bltu	r3,r4,1000bb64 <__udivdi3+0x648>
1000b60c:	1025883a 	mov	r18,r2
1000b610:	1929c83a 	sub	r20,r3,r4
1000b614:	880b883a 	mov	r5,r17
1000b618:	a009883a 	mov	r4,r20
1000b61c:	000c2b00 	call	1000c2b0 <__umodsi3>
1000b620:	102d883a 	mov	r22,r2
1000b624:	880b883a 	mov	r5,r17
1000b628:	a009883a 	mov	r4,r20
1000b62c:	b02c943a 	slli	r22,r22,16
1000b630:	000c2a80 	call	1000c2a8 <__udivsi3>
1000b634:	1009883a 	mov	r4,r2
1000b638:	a80b883a 	mov	r5,r21
1000b63c:	9cffffcc 	andi	r19,r19,65535
1000b640:	1023883a 	mov	r17,r2
1000b644:	b4e6b03a 	or	r19,r22,r19
1000b648:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b64c:	9880052e 	bgeu	r19,r2,1000b664 <__udivdi3+0x148>
1000b650:	9c27883a 	add	r19,r19,r16
1000b654:	88ffffc4 	addi	r3,r17,-1
1000b658:	9c011436 	bltu	r19,r16,1000baac <__udivdi3+0x590>
1000b65c:	9881132e 	bgeu	r19,r2,1000baac <__udivdi3+0x590>
1000b660:	8c7fff84 	addi	r17,r17,-2
1000b664:	9024943a 	slli	r18,r18,16
1000b668:	0007883a 	mov	r3,zero
1000b66c:	8c84b03a 	or	r2,r17,r18
1000b670:	00006106 	br	1000b7f8 <__udivdi3+0x2dc>
1000b674:	29c05e36 	bltu	r5,r7,1000b7f0 <__udivdi3+0x2d4>
1000b678:	00bfffd4 	movui	r2,65535
1000b67c:	11c06a2e 	bgeu	r2,r7,1000b828 <__udivdi3+0x30c>
1000b680:	00804034 	movhi	r2,256
1000b684:	10bfffc4 	addi	r2,r2,-1
1000b688:	11c11236 	bltu	r2,r7,1000bad4 <__udivdi3+0x5b8>
1000b68c:	00c00404 	movi	r3,16
1000b690:	180b883a 	mov	r5,r3
1000b694:	38c6d83a 	srl	r3,r7,r3
1000b698:	01040074 	movhi	r4,4097
1000b69c:	2106ec04 	addi	r4,r4,7088
1000b6a0:	04000804 	movi	r16,32
1000b6a4:	20c7883a 	add	r3,r4,r3
1000b6a8:	18800003 	ldbu	r2,0(r3)
1000b6ac:	1145883a 	add	r2,r2,r5
1000b6b0:	80a1c83a 	sub	r16,r16,r2
1000b6b4:	80006c1e 	bne	r16,zero,1000b868 <__udivdi3+0x34c>
1000b6b8:	3c411836 	bltu	r7,r17,1000bb1c <__udivdi3+0x600>
1000b6bc:	9185403a 	cmpgeu	r2,r18,r6
1000b6c0:	0007883a 	mov	r3,zero
1000b6c4:	00004c06 	br	1000b7f8 <__udivdi3+0x2dc>
1000b6c8:	3000041e 	bne	r6,zero,1000b6dc <__udivdi3+0x1c0>
1000b6cc:	01000044 	movi	r4,1
1000b6d0:	000b883a 	mov	r5,zero
1000b6d4:	000c2a80 	call	1000c2a8 <__udivsi3>
1000b6d8:	1021883a 	mov	r16,r2
1000b6dc:	00bfffd4 	movui	r2,65535
1000b6e0:	14005c2e 	bgeu	r2,r16,1000b854 <__udivdi3+0x338>
1000b6e4:	00804034 	movhi	r2,256
1000b6e8:	10bfffc4 	addi	r2,r2,-1
1000b6ec:	14010236 	bltu	r2,r16,1000baf8 <__udivdi3+0x5dc>
1000b6f0:	00800404 	movi	r2,16
1000b6f4:	1007883a 	mov	r3,r2
1000b6f8:	8084d83a 	srl	r2,r16,r2
1000b6fc:	01040074 	movhi	r4,4097
1000b700:	2106ec04 	addi	r4,r4,7088
1000b704:	2085883a 	add	r2,r4,r2
1000b708:	10800003 	ldbu	r2,0(r2)
1000b70c:	10c7883a 	add	r3,r2,r3
1000b710:	00800804 	movi	r2,32
1000b714:	10c5c83a 	sub	r2,r2,r3
1000b718:	1000aa1e 	bne	r2,zero,1000b9c4 <__udivdi3+0x4a8>
1000b71c:	8028d43a 	srli	r20,r16,16
1000b720:	8c23c83a 	sub	r17,r17,r16
1000b724:	857fffcc 	andi	r21,r16,65535
1000b728:	00c00044 	movi	r3,1
1000b72c:	8809883a 	mov	r4,r17
1000b730:	a00b883a 	mov	r5,r20
1000b734:	d8c00015 	stw	r3,0(sp)
1000b738:	000c2b00 	call	1000c2b0 <__umodsi3>
1000b73c:	8809883a 	mov	r4,r17
1000b740:	a00b883a 	mov	r5,r20
1000b744:	102d883a 	mov	r22,r2
1000b748:	000c2a80 	call	1000c2a8 <__udivsi3>
1000b74c:	1009883a 	mov	r4,r2
1000b750:	a80b883a 	mov	r5,r21
1000b754:	1025883a 	mov	r18,r2
1000b758:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b75c:	1009883a 	mov	r4,r2
1000b760:	b00e943a 	slli	r7,r22,16
1000b764:	9804d43a 	srli	r2,r19,16
1000b768:	d8c00017 	ldw	r3,0(sp)
1000b76c:	388eb03a 	or	r7,r7,r2
1000b770:	3900052e 	bgeu	r7,r4,1000b788 <__udivdi3+0x26c>
1000b774:	3c0f883a 	add	r7,r7,r16
1000b778:	90bfffc4 	addi	r2,r18,-1
1000b77c:	3c000136 	bltu	r7,r16,1000b784 <__udivdi3+0x268>
1000b780:	3900f536 	bltu	r7,r4,1000bb58 <__udivdi3+0x63c>
1000b784:	1025883a 	mov	r18,r2
1000b788:	3923c83a 	sub	r17,r7,r4
1000b78c:	8809883a 	mov	r4,r17
1000b790:	a00b883a 	mov	r5,r20
1000b794:	d8c00015 	stw	r3,0(sp)
1000b798:	000c2b00 	call	1000c2b0 <__umodsi3>
1000b79c:	102d883a 	mov	r22,r2
1000b7a0:	8809883a 	mov	r4,r17
1000b7a4:	a00b883a 	mov	r5,r20
1000b7a8:	b02c943a 	slli	r22,r22,16
1000b7ac:	000c2a80 	call	1000c2a8 <__udivsi3>
1000b7b0:	1009883a 	mov	r4,r2
1000b7b4:	a80b883a 	mov	r5,r21
1000b7b8:	9cffffcc 	andi	r19,r19,65535
1000b7bc:	1023883a 	mov	r17,r2
1000b7c0:	b4e6b03a 	or	r19,r22,r19
1000b7c4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b7c8:	d8c00017 	ldw	r3,0(sp)
1000b7cc:	9880052e 	bgeu	r19,r2,1000b7e4 <__udivdi3+0x2c8>
1000b7d0:	9c27883a 	add	r19,r19,r16
1000b7d4:	893fffc4 	addi	r4,r17,-1
1000b7d8:	9c00b236 	bltu	r19,r16,1000baa4 <__udivdi3+0x588>
1000b7dc:	9880b12e 	bgeu	r19,r2,1000baa4 <__udivdi3+0x588>
1000b7e0:	8c7fff84 	addi	r17,r17,-2
1000b7e4:	9024943a 	slli	r18,r18,16
1000b7e8:	8c84b03a 	or	r2,r17,r18
1000b7ec:	00000206 	br	1000b7f8 <__udivdi3+0x2dc>
1000b7f0:	0007883a 	mov	r3,zero
1000b7f4:	0005883a 	mov	r2,zero
1000b7f8:	dfc00a17 	ldw	ra,40(sp)
1000b7fc:	df000917 	ldw	fp,36(sp)
1000b800:	ddc00817 	ldw	r23,32(sp)
1000b804:	dd800717 	ldw	r22,28(sp)
1000b808:	dd400617 	ldw	r21,24(sp)
1000b80c:	dd000517 	ldw	r20,20(sp)
1000b810:	dcc00417 	ldw	r19,16(sp)
1000b814:	dc800317 	ldw	r18,12(sp)
1000b818:	dc400217 	ldw	r17,8(sp)
1000b81c:	dc000117 	ldw	r16,4(sp)
1000b820:	dec00b04 	addi	sp,sp,44
1000b824:	f800283a 	ret
1000b828:	00803fc4 	movi	r2,255
1000b82c:	11c0ac36 	bltu	r2,r7,1000bae0 <__udivdi3+0x5c4>
1000b830:	0007883a 	mov	r3,zero
1000b834:	000b883a 	mov	r5,zero
1000b838:	003f9606 	br	1000b694 <__alt_data_end+0xf800b694>
1000b83c:	00804034 	movhi	r2,256
1000b840:	10bfffc4 	addi	r2,r2,-1
1000b844:	1180a936 	bltu	r2,r6,1000baec <__udivdi3+0x5d0>
1000b848:	00800404 	movi	r2,16
1000b84c:	1007883a 	mov	r3,r2
1000b850:	003f4a06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000b854:	00803fc4 	movi	r2,255
1000b858:	1400aa36 	bltu	r2,r16,1000bb04 <__udivdi3+0x5e8>
1000b85c:	0005883a 	mov	r2,zero
1000b860:	0007883a 	mov	r3,zero
1000b864:	003fa406 	br	1000b6f8 <__alt_data_end+0xf800b6f8>
1000b868:	3c0e983a 	sll	r7,r7,r16
1000b86c:	3086d83a 	srl	r3,r6,r2
1000b870:	88aed83a 	srl	r23,r17,r2
1000b874:	9084d83a 	srl	r2,r18,r2
1000b878:	38e6b03a 	or	r19,r7,r3
1000b87c:	9828d43a 	srli	r20,r19,16
1000b880:	8c22983a 	sll	r17,r17,r16
1000b884:	b809883a 	mov	r4,r23
1000b888:	a00b883a 	mov	r5,r20
1000b88c:	342a983a 	sll	r21,r6,r16
1000b890:	88a2b03a 	or	r17,r17,r2
1000b894:	000c2b00 	call	1000c2b0 <__umodsi3>
1000b898:	b809883a 	mov	r4,r23
1000b89c:	a00b883a 	mov	r5,r20
1000b8a0:	1039883a 	mov	fp,r2
1000b8a4:	9dbfffcc 	andi	r22,r19,65535
1000b8a8:	000c2a80 	call	1000c2a8 <__udivsi3>
1000b8ac:	1009883a 	mov	r4,r2
1000b8b0:	b00b883a 	mov	r5,r22
1000b8b4:	102f883a 	mov	r23,r2
1000b8b8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b8bc:	1009883a 	mov	r4,r2
1000b8c0:	e00e943a 	slli	r7,fp,16
1000b8c4:	8804d43a 	srli	r2,r17,16
1000b8c8:	388eb03a 	or	r7,r7,r2
1000b8cc:	3900042e 	bgeu	r7,r4,1000b8e0 <__udivdi3+0x3c4>
1000b8d0:	3ccf883a 	add	r7,r7,r19
1000b8d4:	b8bfffc4 	addi	r2,r23,-1
1000b8d8:	3cc0972e 	bgeu	r7,r19,1000bb38 <__udivdi3+0x61c>
1000b8dc:	102f883a 	mov	r23,r2
1000b8e0:	3939c83a 	sub	fp,r7,r4
1000b8e4:	a00b883a 	mov	r5,r20
1000b8e8:	e009883a 	mov	r4,fp
1000b8ec:	000c2b00 	call	1000c2b0 <__umodsi3>
1000b8f0:	a00b883a 	mov	r5,r20
1000b8f4:	e009883a 	mov	r4,fp
1000b8f8:	d8800015 	stw	r2,0(sp)
1000b8fc:	000c2a80 	call	1000c2a8 <__udivsi3>
1000b900:	1009883a 	mov	r4,r2
1000b904:	b00b883a 	mov	r5,r22
1000b908:	1029883a 	mov	r20,r2
1000b90c:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b910:	d8c00017 	ldw	r3,0(sp)
1000b914:	8c7fffcc 	andi	r17,r17,65535
1000b918:	1806943a 	slli	r3,r3,16
1000b91c:	1c46b03a 	or	r3,r3,r17
1000b920:	1880042e 	bgeu	r3,r2,1000b934 <__udivdi3+0x418>
1000b924:	1cc7883a 	add	r3,r3,r19
1000b928:	a13fffc4 	addi	r4,r20,-1
1000b92c:	1cc07e2e 	bgeu	r3,r19,1000bb28 <__udivdi3+0x60c>
1000b930:	2029883a 	mov	r20,r4
1000b934:	b82e943a 	slli	r23,r23,16
1000b938:	a822d43a 	srli	r17,r21,16
1000b93c:	ad7fffcc 	andi	r21,r21,65535
1000b940:	a5e8b03a 	or	r20,r20,r23
1000b944:	a5bfffcc 	andi	r22,r20,65535
1000b948:	b009883a 	mov	r4,r22
1000b94c:	a80b883a 	mov	r5,r21
1000b950:	18afc83a 	sub	r23,r3,r2
1000b954:	a026d43a 	srli	r19,r20,16
1000b958:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b95c:	b009883a 	mov	r4,r22
1000b960:	880b883a 	mov	r5,r17
1000b964:	1039883a 	mov	fp,r2
1000b968:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b96c:	a80b883a 	mov	r5,r21
1000b970:	9809883a 	mov	r4,r19
1000b974:	102d883a 	mov	r22,r2
1000b978:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b97c:	9809883a 	mov	r4,r19
1000b980:	880b883a 	mov	r5,r17
1000b984:	102b883a 	mov	r21,r2
1000b988:	000c2b80 	call	1000c2b8 <__mulsi3>
1000b98c:	100b883a 	mov	r5,r2
1000b990:	e004d43a 	srli	r2,fp,16
1000b994:	ad89883a 	add	r4,r21,r22
1000b998:	2089883a 	add	r4,r4,r2
1000b99c:	2540022e 	bgeu	r4,r21,1000b9a8 <__udivdi3+0x48c>
1000b9a0:	00800074 	movhi	r2,1
1000b9a4:	288b883a 	add	r5,r5,r2
1000b9a8:	2004d43a 	srli	r2,r4,16
1000b9ac:	288b883a 	add	r5,r5,r2
1000b9b0:	b9404536 	bltu	r23,r5,1000bac8 <__udivdi3+0x5ac>
1000b9b4:	b9403f26 	beq	r23,r5,1000bab4 <__udivdi3+0x598>
1000b9b8:	a005883a 	mov	r2,r20
1000b9bc:	0007883a 	mov	r3,zero
1000b9c0:	003f8d06 	br	1000b7f8 <__alt_data_end+0xf800b7f8>
1000b9c4:	80a0983a 	sll	r16,r16,r2
1000b9c8:	88eed83a 	srl	r23,r17,r3
1000b9cc:	90c6d83a 	srl	r3,r18,r3
1000b9d0:	8028d43a 	srli	r20,r16,16
1000b9d4:	88a2983a 	sll	r17,r17,r2
1000b9d8:	b809883a 	mov	r4,r23
1000b9dc:	a00b883a 	mov	r5,r20
1000b9e0:	88ecb03a 	or	r22,r17,r3
1000b9e4:	90a6983a 	sll	r19,r18,r2
1000b9e8:	000c2b00 	call	1000c2b0 <__umodsi3>
1000b9ec:	b809883a 	mov	r4,r23
1000b9f0:	a00b883a 	mov	r5,r20
1000b9f4:	1023883a 	mov	r17,r2
1000b9f8:	857fffcc 	andi	r21,r16,65535
1000b9fc:	000c2a80 	call	1000c2a8 <__udivsi3>
1000ba00:	1009883a 	mov	r4,r2
1000ba04:	a80b883a 	mov	r5,r21
1000ba08:	102f883a 	mov	r23,r2
1000ba0c:	000c2b80 	call	1000c2b8 <__mulsi3>
1000ba10:	1009883a 	mov	r4,r2
1000ba14:	880c943a 	slli	r6,r17,16
1000ba18:	b004d43a 	srli	r2,r22,16
1000ba1c:	308cb03a 	or	r6,r6,r2
1000ba20:	3100062e 	bgeu	r6,r4,1000ba3c <__udivdi3+0x520>
1000ba24:	340d883a 	add	r6,r6,r16
1000ba28:	b8bfffc4 	addi	r2,r23,-1
1000ba2c:	34004836 	bltu	r6,r16,1000bb50 <__udivdi3+0x634>
1000ba30:	3100472e 	bgeu	r6,r4,1000bb50 <__udivdi3+0x634>
1000ba34:	bdffff84 	addi	r23,r23,-2
1000ba38:	340d883a 	add	r6,r6,r16
1000ba3c:	3125c83a 	sub	r18,r6,r4
1000ba40:	9009883a 	mov	r4,r18
1000ba44:	a00b883a 	mov	r5,r20
1000ba48:	000c2b00 	call	1000c2b0 <__umodsi3>
1000ba4c:	1023883a 	mov	r17,r2
1000ba50:	9009883a 	mov	r4,r18
1000ba54:	a00b883a 	mov	r5,r20
1000ba58:	8822943a 	slli	r17,r17,16
1000ba5c:	000c2a80 	call	1000c2a8 <__udivsi3>
1000ba60:	1009883a 	mov	r4,r2
1000ba64:	a80b883a 	mov	r5,r21
1000ba68:	b5bfffcc 	andi	r22,r22,65535
1000ba6c:	1025883a 	mov	r18,r2
1000ba70:	8da2b03a 	or	r17,r17,r22
1000ba74:	000c2b80 	call	1000c2b8 <__mulsi3>
1000ba78:	8880062e 	bgeu	r17,r2,1000ba94 <__udivdi3+0x578>
1000ba7c:	8c23883a 	add	r17,r17,r16
1000ba80:	90ffffc4 	addi	r3,r18,-1
1000ba84:	8c003036 	bltu	r17,r16,1000bb48 <__udivdi3+0x62c>
1000ba88:	88802f2e 	bgeu	r17,r2,1000bb48 <__udivdi3+0x62c>
1000ba8c:	94bfff84 	addi	r18,r18,-2
1000ba90:	8c23883a 	add	r17,r17,r16
1000ba94:	b806943a 	slli	r3,r23,16
1000ba98:	88a3c83a 	sub	r17,r17,r2
1000ba9c:	90c6b03a 	or	r3,r18,r3
1000baa0:	003f2206 	br	1000b72c <__alt_data_end+0xf800b72c>
1000baa4:	2023883a 	mov	r17,r4
1000baa8:	003f4e06 	br	1000b7e4 <__alt_data_end+0xf800b7e4>
1000baac:	1823883a 	mov	r17,r3
1000bab0:	003eec06 	br	1000b664 <__alt_data_end+0xf800b664>
1000bab4:	2008943a 	slli	r4,r4,16
1000bab8:	9420983a 	sll	r16,r18,r16
1000babc:	e73fffcc 	andi	fp,fp,65535
1000bac0:	2709883a 	add	r4,r4,fp
1000bac4:	813fbc2e 	bgeu	r16,r4,1000b9b8 <__alt_data_end+0xf800b9b8>
1000bac8:	a0bfffc4 	addi	r2,r20,-1
1000bacc:	0007883a 	mov	r3,zero
1000bad0:	003f4906 	br	1000b7f8 <__alt_data_end+0xf800b7f8>
1000bad4:	00c00604 	movi	r3,24
1000bad8:	180b883a 	mov	r5,r3
1000badc:	003eed06 	br	1000b694 <__alt_data_end+0xf800b694>
1000bae0:	00c00204 	movi	r3,8
1000bae4:	180b883a 	mov	r5,r3
1000bae8:	003eea06 	br	1000b694 <__alt_data_end+0xf800b694>
1000baec:	00800604 	movi	r2,24
1000baf0:	1007883a 	mov	r3,r2
1000baf4:	003ea106 	br	1000b57c <__alt_data_end+0xf800b57c>
1000baf8:	00800604 	movi	r2,24
1000bafc:	1007883a 	mov	r3,r2
1000bb00:	003efd06 	br	1000b6f8 <__alt_data_end+0xf800b6f8>
1000bb04:	00800204 	movi	r2,8
1000bb08:	1007883a 	mov	r3,r2
1000bb0c:	003efa06 	br	1000b6f8 <__alt_data_end+0xf800b6f8>
1000bb10:	00800204 	movi	r2,8
1000bb14:	1007883a 	mov	r3,r2
1000bb18:	003e9806 	br	1000b57c <__alt_data_end+0xf800b57c>
1000bb1c:	0007883a 	mov	r3,zero
1000bb20:	00800044 	movi	r2,1
1000bb24:	003f3406 	br	1000b7f8 <__alt_data_end+0xf800b7f8>
1000bb28:	18bf812e 	bgeu	r3,r2,1000b930 <__alt_data_end+0xf800b930>
1000bb2c:	a53fff84 	addi	r20,r20,-2
1000bb30:	1cc7883a 	add	r3,r3,r19
1000bb34:	003f7f06 	br	1000b934 <__alt_data_end+0xf800b934>
1000bb38:	393f682e 	bgeu	r7,r4,1000b8dc <__alt_data_end+0xf800b8dc>
1000bb3c:	bdffff84 	addi	r23,r23,-2
1000bb40:	3ccf883a 	add	r7,r7,r19
1000bb44:	003f6606 	br	1000b8e0 <__alt_data_end+0xf800b8e0>
1000bb48:	1825883a 	mov	r18,r3
1000bb4c:	003fd106 	br	1000ba94 <__alt_data_end+0xf800ba94>
1000bb50:	102f883a 	mov	r23,r2
1000bb54:	003fb906 	br	1000ba3c <__alt_data_end+0xf800ba3c>
1000bb58:	94bfff84 	addi	r18,r18,-2
1000bb5c:	3c0f883a 	add	r7,r7,r16
1000bb60:	003f0906 	br	1000b788 <__alt_data_end+0xf800b788>
1000bb64:	94bfff84 	addi	r18,r18,-2
1000bb68:	1c07883a 	add	r3,r3,r16
1000bb6c:	003ea806 	br	1000b610 <__alt_data_end+0xf800b610>

1000bb70 <__umoddi3>:
1000bb70:	defff304 	addi	sp,sp,-52
1000bb74:	dd000715 	stw	r20,28(sp)
1000bb78:	dc800515 	stw	r18,20(sp)
1000bb7c:	dc400415 	stw	r17,16(sp)
1000bb80:	dfc00c15 	stw	ra,48(sp)
1000bb84:	df000b15 	stw	fp,44(sp)
1000bb88:	ddc00a15 	stw	r23,40(sp)
1000bb8c:	dd800915 	stw	r22,36(sp)
1000bb90:	dd400815 	stw	r21,32(sp)
1000bb94:	dcc00615 	stw	r19,24(sp)
1000bb98:	dc000315 	stw	r16,12(sp)
1000bb9c:	2025883a 	mov	r18,r4
1000bba0:	2823883a 	mov	r17,r5
1000bba4:	2829883a 	mov	r20,r5
1000bba8:	38003d1e 	bne	r7,zero,1000bca0 <__umoddi3+0x130>
1000bbac:	3021883a 	mov	r16,r6
1000bbb0:	2027883a 	mov	r19,r4
1000bbb4:	2980532e 	bgeu	r5,r6,1000bd04 <__umoddi3+0x194>
1000bbb8:	00bfffd4 	movui	r2,65535
1000bbbc:	1180a636 	bltu	r2,r6,1000be58 <__umoddi3+0x2e8>
1000bbc0:	00803fc4 	movi	r2,255
1000bbc4:	11816336 	bltu	r2,r6,1000c154 <__umoddi3+0x5e4>
1000bbc8:	0005883a 	mov	r2,zero
1000bbcc:	0009883a 	mov	r4,zero
1000bbd0:	3084d83a 	srl	r2,r6,r2
1000bbd4:	00c40074 	movhi	r3,4097
1000bbd8:	18c6ec04 	addi	r3,r3,7088
1000bbdc:	1885883a 	add	r2,r3,r2
1000bbe0:	10800003 	ldbu	r2,0(r2)
1000bbe4:	1109883a 	add	r4,r2,r4
1000bbe8:	00800804 	movi	r2,32
1000bbec:	1105c83a 	sub	r2,r2,r4
1000bbf0:	10011026 	beq	r2,zero,1000c034 <__umoddi3+0x4c4>
1000bbf4:	9108d83a 	srl	r4,r18,r4
1000bbf8:	88a2983a 	sll	r17,r17,r2
1000bbfc:	30a0983a 	sll	r16,r6,r2
1000bc00:	90a6983a 	sll	r19,r18,r2
1000bc04:	8928b03a 	or	r20,r17,r4
1000bc08:	1025883a 	mov	r18,r2
1000bc0c:	8022d43a 	srli	r17,r16,16
1000bc10:	a009883a 	mov	r4,r20
1000bc14:	857fffcc 	andi	r21,r16,65535
1000bc18:	880b883a 	mov	r5,r17
1000bc1c:	000c2b00 	call	1000c2b0 <__umodsi3>
1000bc20:	a009883a 	mov	r4,r20
1000bc24:	880b883a 	mov	r5,r17
1000bc28:	102d883a 	mov	r22,r2
1000bc2c:	000c2a80 	call	1000c2a8 <__udivsi3>
1000bc30:	1009883a 	mov	r4,r2
1000bc34:	a80b883a 	mov	r5,r21
1000bc38:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bc3c:	1009883a 	mov	r4,r2
1000bc40:	b006943a 	slli	r3,r22,16
1000bc44:	9804d43a 	srli	r2,r19,16
1000bc48:	1886b03a 	or	r3,r3,r2
1000bc4c:	1900042e 	bgeu	r3,r4,1000bc60 <__umoddi3+0xf0>
1000bc50:	1c07883a 	add	r3,r3,r16
1000bc54:	1c000236 	bltu	r3,r16,1000bc60 <__umoddi3+0xf0>
1000bc58:	1900012e 	bgeu	r3,r4,1000bc60 <__umoddi3+0xf0>
1000bc5c:	1c07883a 	add	r3,r3,r16
1000bc60:	1929c83a 	sub	r20,r3,r4
1000bc64:	a009883a 	mov	r4,r20
1000bc68:	880b883a 	mov	r5,r17
1000bc6c:	000c2b00 	call	1000c2b0 <__umodsi3>
1000bc70:	102d883a 	mov	r22,r2
1000bc74:	a009883a 	mov	r4,r20
1000bc78:	880b883a 	mov	r5,r17
1000bc7c:	b02c943a 	slli	r22,r22,16
1000bc80:	000c2a80 	call	1000c2a8 <__udivsi3>
1000bc84:	1009883a 	mov	r4,r2
1000bc88:	a80b883a 	mov	r5,r21
1000bc8c:	9cffffcc 	andi	r19,r19,65535
1000bc90:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bc94:	b4e6b03a 	or	r19,r22,r19
1000bc98:	9880582e 	bgeu	r19,r2,1000bdfc <__umoddi3+0x28c>
1000bc9c:	00005306 	br	1000bdec <__umoddi3+0x27c>
1000bca0:	29c05a36 	bltu	r5,r7,1000be0c <__umoddi3+0x29c>
1000bca4:	00bfffd4 	movui	r2,65535
1000bca8:	11c0662e 	bgeu	r2,r7,1000be44 <__umoddi3+0x2d4>
1000bcac:	00804034 	movhi	r2,256
1000bcb0:	10bfffc4 	addi	r2,r2,-1
1000bcb4:	11c11b36 	bltu	r2,r7,1000c124 <__umoddi3+0x5b4>
1000bcb8:	00c00404 	movi	r3,16
1000bcbc:	1827883a 	mov	r19,r3
1000bcc0:	38c6d83a 	srl	r3,r7,r3
1000bcc4:	01040074 	movhi	r4,4097
1000bcc8:	2106ec04 	addi	r4,r4,7088
1000bccc:	04000804 	movi	r16,32
1000bcd0:	20c7883a 	add	r3,r4,r3
1000bcd4:	18800003 	ldbu	r2,0(r3)
1000bcd8:	14e7883a 	add	r19,r2,r19
1000bcdc:	84e1c83a 	sub	r16,r16,r19
1000bce0:	8000681e 	bne	r16,zero,1000be84 <__umoddi3+0x314>
1000bce4:	3c400136 	bltu	r7,r17,1000bcec <__umoddi3+0x17c>
1000bce8:	91812736 	bltu	r18,r6,1000c188 <__umoddi3+0x618>
1000bcec:	9185c83a 	sub	r2,r18,r6
1000bcf0:	89e3c83a 	sub	r17,r17,r7
1000bcf4:	90a5803a 	cmpltu	r18,r18,r2
1000bcf8:	8ca9c83a 	sub	r20,r17,r18
1000bcfc:	a007883a 	mov	r3,r20
1000bd00:	00004406 	br	1000be14 <__umoddi3+0x2a4>
1000bd04:	3000041e 	bne	r6,zero,1000bd18 <__umoddi3+0x1a8>
1000bd08:	01000044 	movi	r4,1
1000bd0c:	000b883a 	mov	r5,zero
1000bd10:	000c2a80 	call	1000c2a8 <__udivsi3>
1000bd14:	1021883a 	mov	r16,r2
1000bd18:	00bfffd4 	movui	r2,65535
1000bd1c:	1400542e 	bgeu	r2,r16,1000be70 <__umoddi3+0x300>
1000bd20:	00804034 	movhi	r2,256
1000bd24:	10bfffc4 	addi	r2,r2,-1
1000bd28:	14010736 	bltu	r2,r16,1000c148 <__umoddi3+0x5d8>
1000bd2c:	00800404 	movi	r2,16
1000bd30:	1007883a 	mov	r3,r2
1000bd34:	8084d83a 	srl	r2,r16,r2
1000bd38:	01040074 	movhi	r4,4097
1000bd3c:	2106ec04 	addi	r4,r4,7088
1000bd40:	05400804 	movi	r21,32
1000bd44:	2085883a 	add	r2,r4,r2
1000bd48:	10800003 	ldbu	r2,0(r2)
1000bd4c:	10c7883a 	add	r3,r2,r3
1000bd50:	a8ebc83a 	sub	r21,r21,r3
1000bd54:	a800b91e 	bne	r21,zero,1000c03c <__umoddi3+0x4cc>
1000bd58:	8028d43a 	srli	r20,r16,16
1000bd5c:	8c23c83a 	sub	r17,r17,r16
1000bd60:	85bfffcc 	andi	r22,r16,65535
1000bd64:	0025883a 	mov	r18,zero
1000bd68:	8809883a 	mov	r4,r17
1000bd6c:	a00b883a 	mov	r5,r20
1000bd70:	000c2b00 	call	1000c2b0 <__umodsi3>
1000bd74:	8809883a 	mov	r4,r17
1000bd78:	a00b883a 	mov	r5,r20
1000bd7c:	102b883a 	mov	r21,r2
1000bd80:	000c2a80 	call	1000c2a8 <__udivsi3>
1000bd84:	1009883a 	mov	r4,r2
1000bd88:	b00b883a 	mov	r5,r22
1000bd8c:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bd90:	1009883a 	mov	r4,r2
1000bd94:	a806943a 	slli	r3,r21,16
1000bd98:	9804d43a 	srli	r2,r19,16
1000bd9c:	1886b03a 	or	r3,r3,r2
1000bda0:	1900032e 	bgeu	r3,r4,1000bdb0 <__umoddi3+0x240>
1000bda4:	1c07883a 	add	r3,r3,r16
1000bda8:	1c000136 	bltu	r3,r16,1000bdb0 <__umoddi3+0x240>
1000bdac:	1900f436 	bltu	r3,r4,1000c180 <__umoddi3+0x610>
1000bdb0:	1923c83a 	sub	r17,r3,r4
1000bdb4:	8809883a 	mov	r4,r17
1000bdb8:	a00b883a 	mov	r5,r20
1000bdbc:	000c2b00 	call	1000c2b0 <__umodsi3>
1000bdc0:	102b883a 	mov	r21,r2
1000bdc4:	8809883a 	mov	r4,r17
1000bdc8:	a00b883a 	mov	r5,r20
1000bdcc:	a82a943a 	slli	r21,r21,16
1000bdd0:	000c2a80 	call	1000c2a8 <__udivsi3>
1000bdd4:	1009883a 	mov	r4,r2
1000bdd8:	b00b883a 	mov	r5,r22
1000bddc:	9cffffcc 	andi	r19,r19,65535
1000bde0:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bde4:	ace6b03a 	or	r19,r21,r19
1000bde8:	9880042e 	bgeu	r19,r2,1000bdfc <__umoddi3+0x28c>
1000bdec:	9c27883a 	add	r19,r19,r16
1000bdf0:	9c000236 	bltu	r19,r16,1000bdfc <__umoddi3+0x28c>
1000bdf4:	9880012e 	bgeu	r19,r2,1000bdfc <__umoddi3+0x28c>
1000bdf8:	9c27883a 	add	r19,r19,r16
1000bdfc:	9885c83a 	sub	r2,r19,r2
1000be00:	1484d83a 	srl	r2,r2,r18
1000be04:	0007883a 	mov	r3,zero
1000be08:	00000206 	br	1000be14 <__umoddi3+0x2a4>
1000be0c:	2005883a 	mov	r2,r4
1000be10:	2807883a 	mov	r3,r5
1000be14:	dfc00c17 	ldw	ra,48(sp)
1000be18:	df000b17 	ldw	fp,44(sp)
1000be1c:	ddc00a17 	ldw	r23,40(sp)
1000be20:	dd800917 	ldw	r22,36(sp)
1000be24:	dd400817 	ldw	r21,32(sp)
1000be28:	dd000717 	ldw	r20,28(sp)
1000be2c:	dcc00617 	ldw	r19,24(sp)
1000be30:	dc800517 	ldw	r18,20(sp)
1000be34:	dc400417 	ldw	r17,16(sp)
1000be38:	dc000317 	ldw	r16,12(sp)
1000be3c:	dec00d04 	addi	sp,sp,52
1000be40:	f800283a 	ret
1000be44:	00803fc4 	movi	r2,255
1000be48:	11c0b336 	bltu	r2,r7,1000c118 <__umoddi3+0x5a8>
1000be4c:	0007883a 	mov	r3,zero
1000be50:	0027883a 	mov	r19,zero
1000be54:	003f9a06 	br	1000bcc0 <__alt_data_end+0xf800bcc0>
1000be58:	00804034 	movhi	r2,256
1000be5c:	10bfffc4 	addi	r2,r2,-1
1000be60:	1180b336 	bltu	r2,r6,1000c130 <__umoddi3+0x5c0>
1000be64:	00800404 	movi	r2,16
1000be68:	1009883a 	mov	r4,r2
1000be6c:	003f5806 	br	1000bbd0 <__alt_data_end+0xf800bbd0>
1000be70:	00803fc4 	movi	r2,255
1000be74:	1400b136 	bltu	r2,r16,1000c13c <__umoddi3+0x5cc>
1000be78:	0005883a 	mov	r2,zero
1000be7c:	0007883a 	mov	r3,zero
1000be80:	003fac06 	br	1000bd34 <__alt_data_end+0xf800bd34>
1000be84:	34c4d83a 	srl	r2,r6,r19
1000be88:	3c0e983a 	sll	r7,r7,r16
1000be8c:	8cf8d83a 	srl	fp,r17,r19
1000be90:	8c22983a 	sll	r17,r17,r16
1000be94:	38a8b03a 	or	r20,r7,r2
1000be98:	a02ad43a 	srli	r21,r20,16
1000be9c:	94c4d83a 	srl	r2,r18,r19
1000bea0:	e009883a 	mov	r4,fp
1000bea4:	a80b883a 	mov	r5,r21
1000bea8:	342c983a 	sll	r22,r6,r16
1000beac:	88a2b03a 	or	r17,r17,r2
1000beb0:	000c2b00 	call	1000c2b0 <__umodsi3>
1000beb4:	e009883a 	mov	r4,fp
1000beb8:	a80b883a 	mov	r5,r21
1000bebc:	a5ffffcc 	andi	r23,r20,65535
1000bec0:	d8800215 	stw	r2,8(sp)
1000bec4:	000c2a80 	call	1000c2a8 <__udivsi3>
1000bec8:	1009883a 	mov	r4,r2
1000becc:	b80b883a 	mov	r5,r23
1000bed0:	1039883a 	mov	fp,r2
1000bed4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bed8:	d8c00217 	ldw	r3,8(sp)
1000bedc:	1009883a 	mov	r4,r2
1000bee0:	8804d43a 	srli	r2,r17,16
1000bee4:	1806943a 	slli	r3,r3,16
1000bee8:	9424983a 	sll	r18,r18,r16
1000beec:	1886b03a 	or	r3,r3,r2
1000bef0:	1900042e 	bgeu	r3,r4,1000bf04 <__umoddi3+0x394>
1000bef4:	1d07883a 	add	r3,r3,r20
1000bef8:	e0bfffc4 	addi	r2,fp,-1
1000befc:	1d009c2e 	bgeu	r3,r20,1000c170 <__umoddi3+0x600>
1000bf00:	1039883a 	mov	fp,r2
1000bf04:	1907c83a 	sub	r3,r3,r4
1000bf08:	1809883a 	mov	r4,r3
1000bf0c:	a80b883a 	mov	r5,r21
1000bf10:	d8c00215 	stw	r3,8(sp)
1000bf14:	000c2b00 	call	1000c2b0 <__umodsi3>
1000bf18:	d8c00217 	ldw	r3,8(sp)
1000bf1c:	a80b883a 	mov	r5,r21
1000bf20:	d8800015 	stw	r2,0(sp)
1000bf24:	1809883a 	mov	r4,r3
1000bf28:	000c2a80 	call	1000c2a8 <__udivsi3>
1000bf2c:	1009883a 	mov	r4,r2
1000bf30:	b80b883a 	mov	r5,r23
1000bf34:	102b883a 	mov	r21,r2
1000bf38:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bf3c:	d9c00017 	ldw	r7,0(sp)
1000bf40:	8c7fffcc 	andi	r17,r17,65535
1000bf44:	380e943a 	slli	r7,r7,16
1000bf48:	3c4eb03a 	or	r7,r7,r17
1000bf4c:	3880042e 	bgeu	r7,r2,1000bf60 <__umoddi3+0x3f0>
1000bf50:	3d0f883a 	add	r7,r7,r20
1000bf54:	a8ffffc4 	addi	r3,r21,-1
1000bf58:	3d00812e 	bgeu	r7,r20,1000c160 <__umoddi3+0x5f0>
1000bf5c:	182b883a 	mov	r21,r3
1000bf60:	e038943a 	slli	fp,fp,16
1000bf64:	b010d43a 	srli	r8,r22,16
1000bf68:	b1bfffcc 	andi	r6,r22,65535
1000bf6c:	af2ab03a 	or	r21,r21,fp
1000bf70:	a82ed43a 	srli	r23,r21,16
1000bf74:	ad7fffcc 	andi	r21,r21,65535
1000bf78:	300b883a 	mov	r5,r6
1000bf7c:	a809883a 	mov	r4,r21
1000bf80:	38a3c83a 	sub	r17,r7,r2
1000bf84:	d9800115 	stw	r6,4(sp)
1000bf88:	da000015 	stw	r8,0(sp)
1000bf8c:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bf90:	da000017 	ldw	r8,0(sp)
1000bf94:	a809883a 	mov	r4,r21
1000bf98:	1039883a 	mov	fp,r2
1000bf9c:	400b883a 	mov	r5,r8
1000bfa0:	da000215 	stw	r8,8(sp)
1000bfa4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bfa8:	d9800117 	ldw	r6,4(sp)
1000bfac:	b809883a 	mov	r4,r23
1000bfb0:	d8800015 	stw	r2,0(sp)
1000bfb4:	300b883a 	mov	r5,r6
1000bfb8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bfbc:	d8c00217 	ldw	r3,8(sp)
1000bfc0:	b809883a 	mov	r4,r23
1000bfc4:	102b883a 	mov	r21,r2
1000bfc8:	180b883a 	mov	r5,r3
1000bfcc:	000c2b80 	call	1000c2b8 <__mulsi3>
1000bfd0:	d9c00017 	ldw	r7,0(sp)
1000bfd4:	1007883a 	mov	r3,r2
1000bfd8:	e004d43a 	srli	r2,fp,16
1000bfdc:	a9c9883a 	add	r4,r21,r7
1000bfe0:	2089883a 	add	r4,r4,r2
1000bfe4:	2540022e 	bgeu	r4,r21,1000bff0 <__umoddi3+0x480>
1000bfe8:	00800074 	movhi	r2,1
1000bfec:	1887883a 	add	r3,r3,r2
1000bff0:	2004d43a 	srli	r2,r4,16
1000bff4:	2008943a 	slli	r4,r4,16
1000bff8:	e73fffcc 	andi	fp,fp,65535
1000bffc:	1887883a 	add	r3,r3,r2
1000c000:	2709883a 	add	r4,r4,fp
1000c004:	88c03e36 	bltu	r17,r3,1000c100 <__umoddi3+0x590>
1000c008:	88c06226 	beq	r17,r3,1000c194 <__umoddi3+0x624>
1000c00c:	88c7c83a 	sub	r3,r17,r3
1000c010:	202d883a 	mov	r22,r4
1000c014:	95adc83a 	sub	r22,r18,r22
1000c018:	95a5803a 	cmpltu	r18,r18,r22
1000c01c:	1c87c83a 	sub	r3,r3,r18
1000c020:	1cc4983a 	sll	r2,r3,r19
1000c024:	b42cd83a 	srl	r22,r22,r16
1000c028:	1c06d83a 	srl	r3,r3,r16
1000c02c:	1584b03a 	or	r2,r2,r22
1000c030:	003f7806 	br	1000be14 <__alt_data_end+0xf800be14>
1000c034:	0025883a 	mov	r18,zero
1000c038:	003ef406 	br	1000bc0c <__alt_data_end+0xf800bc0c>
1000c03c:	8560983a 	sll	r16,r16,r21
1000c040:	88e6d83a 	srl	r19,r17,r3
1000c044:	90c6d83a 	srl	r3,r18,r3
1000c048:	8028d43a 	srli	r20,r16,16
1000c04c:	8d62983a 	sll	r17,r17,r21
1000c050:	9809883a 	mov	r4,r19
1000c054:	a00b883a 	mov	r5,r20
1000c058:	88eeb03a 	or	r23,r17,r3
1000c05c:	000c2b00 	call	1000c2b0 <__umodsi3>
1000c060:	9809883a 	mov	r4,r19
1000c064:	a00b883a 	mov	r5,r20
1000c068:	1023883a 	mov	r17,r2
1000c06c:	85bfffcc 	andi	r22,r16,65535
1000c070:	000c2a80 	call	1000c2a8 <__udivsi3>
1000c074:	1009883a 	mov	r4,r2
1000c078:	b00b883a 	mov	r5,r22
1000c07c:	000c2b80 	call	1000c2b8 <__mulsi3>
1000c080:	1007883a 	mov	r3,r2
1000c084:	8808943a 	slli	r4,r17,16
1000c088:	b804d43a 	srli	r2,r23,16
1000c08c:	9566983a 	sll	r19,r18,r21
1000c090:	2088b03a 	or	r4,r4,r2
1000c094:	20c0042e 	bgeu	r4,r3,1000c0a8 <__umoddi3+0x538>
1000c098:	2409883a 	add	r4,r4,r16
1000c09c:	24000236 	bltu	r4,r16,1000c0a8 <__umoddi3+0x538>
1000c0a0:	20c0012e 	bgeu	r4,r3,1000c0a8 <__umoddi3+0x538>
1000c0a4:	2409883a 	add	r4,r4,r16
1000c0a8:	20e5c83a 	sub	r18,r4,r3
1000c0ac:	9009883a 	mov	r4,r18
1000c0b0:	a00b883a 	mov	r5,r20
1000c0b4:	000c2b00 	call	1000c2b0 <__umodsi3>
1000c0b8:	1023883a 	mov	r17,r2
1000c0bc:	9009883a 	mov	r4,r18
1000c0c0:	a00b883a 	mov	r5,r20
1000c0c4:	8822943a 	slli	r17,r17,16
1000c0c8:	000c2a80 	call	1000c2a8 <__udivsi3>
1000c0cc:	1009883a 	mov	r4,r2
1000c0d0:	b00b883a 	mov	r5,r22
1000c0d4:	bdffffcc 	andi	r23,r23,65535
1000c0d8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000c0dc:	8de2b03a 	or	r17,r17,r23
1000c0e0:	8880042e 	bgeu	r17,r2,1000c0f4 <__umoddi3+0x584>
1000c0e4:	8c23883a 	add	r17,r17,r16
1000c0e8:	8c000236 	bltu	r17,r16,1000c0f4 <__umoddi3+0x584>
1000c0ec:	8880012e 	bgeu	r17,r2,1000c0f4 <__umoddi3+0x584>
1000c0f0:	8c23883a 	add	r17,r17,r16
1000c0f4:	88a3c83a 	sub	r17,r17,r2
1000c0f8:	a825883a 	mov	r18,r21
1000c0fc:	003f1a06 	br	1000bd68 <__alt_data_end+0xf800bd68>
1000c100:	25adc83a 	sub	r22,r4,r22
1000c104:	1d07c83a 	sub	r3,r3,r20
1000c108:	2589803a 	cmpltu	r4,r4,r22
1000c10c:	1907c83a 	sub	r3,r3,r4
1000c110:	88c7c83a 	sub	r3,r17,r3
1000c114:	003fbf06 	br	1000c014 <__alt_data_end+0xf800c014>
1000c118:	00c00204 	movi	r3,8
1000c11c:	1827883a 	mov	r19,r3
1000c120:	003ee706 	br	1000bcc0 <__alt_data_end+0xf800bcc0>
1000c124:	00c00604 	movi	r3,24
1000c128:	1827883a 	mov	r19,r3
1000c12c:	003ee406 	br	1000bcc0 <__alt_data_end+0xf800bcc0>
1000c130:	00800604 	movi	r2,24
1000c134:	1009883a 	mov	r4,r2
1000c138:	003ea506 	br	1000bbd0 <__alt_data_end+0xf800bbd0>
1000c13c:	00800204 	movi	r2,8
1000c140:	1007883a 	mov	r3,r2
1000c144:	003efb06 	br	1000bd34 <__alt_data_end+0xf800bd34>
1000c148:	00800604 	movi	r2,24
1000c14c:	1007883a 	mov	r3,r2
1000c150:	003ef806 	br	1000bd34 <__alt_data_end+0xf800bd34>
1000c154:	00800204 	movi	r2,8
1000c158:	1009883a 	mov	r4,r2
1000c15c:	003e9c06 	br	1000bbd0 <__alt_data_end+0xf800bbd0>
1000c160:	38bf7e2e 	bgeu	r7,r2,1000bf5c <__alt_data_end+0xf800bf5c>
1000c164:	ad7fff84 	addi	r21,r21,-2
1000c168:	3d0f883a 	add	r7,r7,r20
1000c16c:	003f7c06 	br	1000bf60 <__alt_data_end+0xf800bf60>
1000c170:	193f632e 	bgeu	r3,r4,1000bf00 <__alt_data_end+0xf800bf00>
1000c174:	e73fff84 	addi	fp,fp,-2
1000c178:	1d07883a 	add	r3,r3,r20
1000c17c:	003f6106 	br	1000bf04 <__alt_data_end+0xf800bf04>
1000c180:	1c07883a 	add	r3,r3,r16
1000c184:	003f0a06 	br	1000bdb0 <__alt_data_end+0xf800bdb0>
1000c188:	9005883a 	mov	r2,r18
1000c18c:	a007883a 	mov	r3,r20
1000c190:	003f2006 	br	1000be14 <__alt_data_end+0xf800be14>
1000c194:	913fda36 	bltu	r18,r4,1000c100 <__alt_data_end+0xf800c100>
1000c198:	202d883a 	mov	r22,r4
1000c19c:	0007883a 	mov	r3,zero
1000c1a0:	003f9c06 	br	1000c014 <__alt_data_end+0xf800c014>

1000c1a4 <udivmodsi4>:
1000c1a4:	2900182e 	bgeu	r5,r4,1000c208 <udivmodsi4+0x64>
1000c1a8:	28001716 	blt	r5,zero,1000c208 <udivmodsi4+0x64>
1000c1ac:	00800804 	movi	r2,32
1000c1b0:	00c00044 	movi	r3,1
1000c1b4:	00000206 	br	1000c1c0 <udivmodsi4+0x1c>
1000c1b8:	10001126 	beq	r2,zero,1000c200 <udivmodsi4+0x5c>
1000c1bc:	28000516 	blt	r5,zero,1000c1d4 <udivmodsi4+0x30>
1000c1c0:	294b883a 	add	r5,r5,r5
1000c1c4:	10bfffc4 	addi	r2,r2,-1
1000c1c8:	18c7883a 	add	r3,r3,r3
1000c1cc:	293ffa36 	bltu	r5,r4,1000c1b8 <__alt_data_end+0xf800c1b8>
1000c1d0:	18000b26 	beq	r3,zero,1000c200 <udivmodsi4+0x5c>
1000c1d4:	0005883a 	mov	r2,zero
1000c1d8:	21400236 	bltu	r4,r5,1000c1e4 <udivmodsi4+0x40>
1000c1dc:	2149c83a 	sub	r4,r4,r5
1000c1e0:	10c4b03a 	or	r2,r2,r3
1000c1e4:	1806d07a 	srli	r3,r3,1
1000c1e8:	280ad07a 	srli	r5,r5,1
1000c1ec:	183ffa1e 	bne	r3,zero,1000c1d8 <__alt_data_end+0xf800c1d8>
1000c1f0:	3000011e 	bne	r6,zero,1000c1f8 <udivmodsi4+0x54>
1000c1f4:	f800283a 	ret
1000c1f8:	2005883a 	mov	r2,r4
1000c1fc:	f800283a 	ret
1000c200:	0005883a 	mov	r2,zero
1000c204:	003ffa06 	br	1000c1f0 <__alt_data_end+0xf800c1f0>
1000c208:	00c00044 	movi	r3,1
1000c20c:	0005883a 	mov	r2,zero
1000c210:	003ff106 	br	1000c1d8 <__alt_data_end+0xf800c1d8>

1000c214 <__divsi3>:
1000c214:	deffff04 	addi	sp,sp,-4
1000c218:	dfc00015 	stw	ra,0(sp)
1000c21c:	20000916 	blt	r4,zero,1000c244 <__divsi3+0x30>
1000c220:	000f883a 	mov	r7,zero
1000c224:	28000a16 	blt	r5,zero,1000c250 <__divsi3+0x3c>
1000c228:	000d883a 	mov	r6,zero
1000c22c:	000c1a40 	call	1000c1a4 <udivmodsi4>
1000c230:	38000126 	beq	r7,zero,1000c238 <__divsi3+0x24>
1000c234:	0085c83a 	sub	r2,zero,r2
1000c238:	dfc00017 	ldw	ra,0(sp)
1000c23c:	dec00104 	addi	sp,sp,4
1000c240:	f800283a 	ret
1000c244:	0109c83a 	sub	r4,zero,r4
1000c248:	01c00044 	movi	r7,1
1000c24c:	283ff60e 	bge	r5,zero,1000c228 <__alt_data_end+0xf800c228>
1000c250:	014bc83a 	sub	r5,zero,r5
1000c254:	39c0005c 	xori	r7,r7,1
1000c258:	003ff306 	br	1000c228 <__alt_data_end+0xf800c228>

1000c25c <__modsi3>:
1000c25c:	20000316 	blt	r4,zero,1000c26c <__modsi3+0x10>
1000c260:	28000c16 	blt	r5,zero,1000c294 <__modsi3+0x38>
1000c264:	01800044 	movi	r6,1
1000c268:	000c1a41 	jmpi	1000c1a4 <udivmodsi4>
1000c26c:	deffff04 	addi	sp,sp,-4
1000c270:	dfc00015 	stw	ra,0(sp)
1000c274:	0109c83a 	sub	r4,zero,r4
1000c278:	28000916 	blt	r5,zero,1000c2a0 <__modsi3+0x44>
1000c27c:	01800044 	movi	r6,1
1000c280:	000c1a40 	call	1000c1a4 <udivmodsi4>
1000c284:	0085c83a 	sub	r2,zero,r2
1000c288:	dfc00017 	ldw	ra,0(sp)
1000c28c:	dec00104 	addi	sp,sp,4
1000c290:	f800283a 	ret
1000c294:	014bc83a 	sub	r5,zero,r5
1000c298:	01800044 	movi	r6,1
1000c29c:	000c1a41 	jmpi	1000c1a4 <udivmodsi4>
1000c2a0:	014bc83a 	sub	r5,zero,r5
1000c2a4:	003ff506 	br	1000c27c <__alt_data_end+0xf800c27c>

1000c2a8 <__udivsi3>:
1000c2a8:	000d883a 	mov	r6,zero
1000c2ac:	000c1a41 	jmpi	1000c1a4 <udivmodsi4>

1000c2b0 <__umodsi3>:
1000c2b0:	01800044 	movi	r6,1
1000c2b4:	000c1a41 	jmpi	1000c1a4 <udivmodsi4>

1000c2b8 <__mulsi3>:
1000c2b8:	0005883a 	mov	r2,zero
1000c2bc:	20000726 	beq	r4,zero,1000c2dc <__mulsi3+0x24>
1000c2c0:	20c0004c 	andi	r3,r4,1
1000c2c4:	2008d07a 	srli	r4,r4,1
1000c2c8:	18000126 	beq	r3,zero,1000c2d0 <__mulsi3+0x18>
1000c2cc:	1145883a 	add	r2,r2,r5
1000c2d0:	294b883a 	add	r5,r5,r5
1000c2d4:	203ffa1e 	bne	r4,zero,1000c2c0 <__alt_data_end+0xf800c2c0>
1000c2d8:	f800283a 	ret
1000c2dc:	f800283a 	ret

1000c2e0 <__adddf3>:
1000c2e0:	00800434 	movhi	r2,16
1000c2e4:	10bfffc4 	addi	r2,r2,-1
1000c2e8:	defffb04 	addi	sp,sp,-20
1000c2ec:	2890703a 	and	r8,r5,r2
1000c2f0:	2806d7fa 	srli	r3,r5,31
1000c2f4:	3884703a 	and	r2,r7,r2
1000c2f8:	2014d77a 	srli	r10,r4,29
1000c2fc:	3812d53a 	srli	r9,r7,20
1000c300:	dc400115 	stw	r17,4(sp)
1000c304:	100490fa 	slli	r2,r2,3
1000c308:	2822d53a 	srli	r17,r5,20
1000c30c:	380ed7fa 	srli	r7,r7,31
1000c310:	400a90fa 	slli	r5,r8,3
1000c314:	3010d77a 	srli	r8,r6,29
1000c318:	dc800215 	stw	r18,8(sp)
1000c31c:	dc000015 	stw	r16,0(sp)
1000c320:	dfc00415 	stw	ra,16(sp)
1000c324:	dcc00315 	stw	r19,12(sp)
1000c328:	1c803fcc 	andi	r18,r3,255
1000c32c:	202090fa 	slli	r16,r4,3
1000c330:	8c41ffcc 	andi	r17,r17,2047
1000c334:	2a8ab03a 	or	r5,r5,r10
1000c338:	4901ffcc 	andi	r4,r9,2047
1000c33c:	1204b03a 	or	r2,r2,r8
1000c340:	300c90fa 	slli	r6,r6,3
1000c344:	91c07126 	beq	r18,r7,1000c50c <__adddf3+0x22c>
1000c348:	8907c83a 	sub	r3,r17,r4
1000c34c:	00c0a00e 	bge	zero,r3,1000c5d0 <__adddf3+0x2f0>
1000c350:	2000291e 	bne	r4,zero,1000c3f8 <__adddf3+0x118>
1000c354:	1188b03a 	or	r4,r2,r6
1000c358:	20008b1e 	bne	r4,zero,1000c588 <__adddf3+0x2a8>
1000c35c:	808001cc 	andi	r2,r16,7
1000c360:	10005a26 	beq	r2,zero,1000c4cc <__adddf3+0x1ec>
1000c364:	80c003cc 	andi	r3,r16,15
1000c368:	00800104 	movi	r2,4
1000c36c:	18805726 	beq	r3,r2,1000c4cc <__adddf3+0x1ec>
1000c370:	81000104 	addi	r4,r16,4
1000c374:	2421803a 	cmpltu	r16,r4,r16
1000c378:	2c0b883a 	add	r5,r5,r16
1000c37c:	2880202c 	andhi	r2,r5,128
1000c380:	9007883a 	mov	r3,r18
1000c384:	2021883a 	mov	r16,r4
1000c388:	10005326 	beq	r2,zero,1000c4d8 <__adddf3+0x1f8>
1000c38c:	8c400044 	addi	r17,r17,1
1000c390:	0081ffc4 	movi	r2,2047
1000c394:	8880ae26 	beq	r17,r2,1000c650 <__adddf3+0x370>
1000c398:	00bfe034 	movhi	r2,65408
1000c39c:	10bfffc4 	addi	r2,r2,-1
1000c3a0:	288a703a 	and	r5,r5,r2
1000c3a4:	2804977a 	slli	r2,r5,29
1000c3a8:	280a927a 	slli	r5,r5,9
1000c3ac:	8020d0fa 	srli	r16,r16,3
1000c3b0:	280ad33a 	srli	r5,r5,12
1000c3b4:	1404b03a 	or	r2,r2,r16
1000c3b8:	8c41ffcc 	andi	r17,r17,2047
1000c3bc:	8822953a 	slli	r17,r17,20
1000c3c0:	18c03fcc 	andi	r3,r3,255
1000c3c4:	180897fa 	slli	r4,r3,31
1000c3c8:	00c00434 	movhi	r3,16
1000c3cc:	18ffffc4 	addi	r3,r3,-1
1000c3d0:	28c6703a 	and	r3,r5,r3
1000c3d4:	1c46b03a 	or	r3,r3,r17
1000c3d8:	1906b03a 	or	r3,r3,r4
1000c3dc:	dfc00417 	ldw	ra,16(sp)
1000c3e0:	dcc00317 	ldw	r19,12(sp)
1000c3e4:	dc800217 	ldw	r18,8(sp)
1000c3e8:	dc400117 	ldw	r17,4(sp)
1000c3ec:	dc000017 	ldw	r16,0(sp)
1000c3f0:	dec00504 	addi	sp,sp,20
1000c3f4:	f800283a 	ret
1000c3f8:	0101ffc4 	movi	r4,2047
1000c3fc:	893fd726 	beq	r17,r4,1000c35c <__alt_data_end+0xf800c35c>
1000c400:	10802034 	orhi	r2,r2,128
1000c404:	01000e04 	movi	r4,56
1000c408:	20c09416 	blt	r4,r3,1000c65c <__adddf3+0x37c>
1000c40c:	010007c4 	movi	r4,31
1000c410:	20c0b716 	blt	r4,r3,1000c6f0 <__adddf3+0x410>
1000c414:	01000804 	movi	r4,32
1000c418:	20c9c83a 	sub	r4,r4,r3
1000c41c:	30ced83a 	srl	r7,r6,r3
1000c420:	1110983a 	sll	r8,r2,r4
1000c424:	3108983a 	sll	r4,r6,r4
1000c428:	10c6d83a 	srl	r3,r2,r3
1000c42c:	41c4b03a 	or	r2,r8,r7
1000c430:	2008c03a 	cmpne	r4,r4,zero
1000c434:	110cb03a 	or	r6,r2,r4
1000c438:	818dc83a 	sub	r6,r16,r6
1000c43c:	81a1803a 	cmpltu	r16,r16,r6
1000c440:	28cbc83a 	sub	r5,r5,r3
1000c444:	2c0bc83a 	sub	r5,r5,r16
1000c448:	3021883a 	mov	r16,r6
1000c44c:	2880202c 	andhi	r2,r5,128
1000c450:	103fc226 	beq	r2,zero,1000c35c <__alt_data_end+0xf800c35c>
1000c454:	04c02034 	movhi	r19,128
1000c458:	9cffffc4 	addi	r19,r19,-1
1000c45c:	2ce6703a 	and	r19,r5,r19
1000c460:	98006c26 	beq	r19,zero,1000c614 <__adddf3+0x334>
1000c464:	9809883a 	mov	r4,r19
1000c468:	000e9b80 	call	1000e9b8 <__clzsi2>
1000c46c:	10fffe04 	addi	r3,r2,-8
1000c470:	010007c4 	movi	r4,31
1000c474:	20c06d16 	blt	r4,r3,1000c62c <__adddf3+0x34c>
1000c478:	01000a04 	movi	r4,40
1000c47c:	2085c83a 	sub	r2,r4,r2
1000c480:	8084d83a 	srl	r2,r16,r2
1000c484:	98e6983a 	sll	r19,r19,r3
1000c488:	80e0983a 	sll	r16,r16,r3
1000c48c:	14c4b03a 	or	r2,r2,r19
1000c490:	1c406a16 	blt	r3,r17,1000c63c <__adddf3+0x35c>
1000c494:	1c63c83a 	sub	r17,r3,r17
1000c498:	89400044 	addi	r5,r17,1
1000c49c:	00c007c4 	movi	r3,31
1000c4a0:	19408616 	blt	r3,r5,1000c6bc <__adddf3+0x3dc>
1000c4a4:	1c47c83a 	sub	r3,r3,r17
1000c4a8:	8148d83a 	srl	r4,r16,r5
1000c4ac:	80e0983a 	sll	r16,r16,r3
1000c4b0:	10c6983a 	sll	r3,r2,r3
1000c4b4:	114ad83a 	srl	r5,r2,r5
1000c4b8:	8004c03a 	cmpne	r2,r16,zero
1000c4bc:	20e0b03a 	or	r16,r4,r3
1000c4c0:	80a0b03a 	or	r16,r16,r2
1000c4c4:	0023883a 	mov	r17,zero
1000c4c8:	003fa406 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c4cc:	2880202c 	andhi	r2,r5,128
1000c4d0:	9007883a 	mov	r3,r18
1000c4d4:	103fad1e 	bne	r2,zero,1000c38c <__alt_data_end+0xf800c38c>
1000c4d8:	2804977a 	slli	r2,r5,29
1000c4dc:	8020d0fa 	srli	r16,r16,3
1000c4e0:	0101ffc4 	movi	r4,2047
1000c4e4:	280ad0fa 	srli	r5,r5,3
1000c4e8:	1404b03a 	or	r2,r2,r16
1000c4ec:	8900031e 	bne	r17,r4,1000c4fc <__adddf3+0x21c>
1000c4f0:	1148b03a 	or	r4,r2,r5
1000c4f4:	20005626 	beq	r4,zero,1000c650 <__adddf3+0x370>
1000c4f8:	29400234 	orhi	r5,r5,8
1000c4fc:	01000434 	movhi	r4,16
1000c500:	213fffc4 	addi	r4,r4,-1
1000c504:	290a703a 	and	r5,r5,r4
1000c508:	003fab06 	br	1000c3b8 <__alt_data_end+0xf800c3b8>
1000c50c:	890fc83a 	sub	r7,r17,r4
1000c510:	01c0560e 	bge	zero,r7,1000c66c <__adddf3+0x38c>
1000c514:	20002426 	beq	r4,zero,1000c5a8 <__adddf3+0x2c8>
1000c518:	0101ffc4 	movi	r4,2047
1000c51c:	893f8f26 	beq	r17,r4,1000c35c <__alt_data_end+0xf800c35c>
1000c520:	10802034 	orhi	r2,r2,128
1000c524:	01000e04 	movi	r4,56
1000c528:	21c09d0e 	bge	r4,r7,1000c7a0 <__adddf3+0x4c0>
1000c52c:	118cb03a 	or	r6,r2,r6
1000c530:	300cc03a 	cmpne	r6,r6,zero
1000c534:	000f883a 	mov	r7,zero
1000c538:	340d883a 	add	r6,r6,r16
1000c53c:	3421803a 	cmpltu	r16,r6,r16
1000c540:	394b883a 	add	r5,r7,r5
1000c544:	2c0b883a 	add	r5,r5,r16
1000c548:	3021883a 	mov	r16,r6
1000c54c:	2880202c 	andhi	r2,r5,128
1000c550:	103f8226 	beq	r2,zero,1000c35c <__alt_data_end+0xf800c35c>
1000c554:	8c400044 	addi	r17,r17,1
1000c558:	0081ffc4 	movi	r2,2047
1000c55c:	8880cb26 	beq	r17,r2,1000c88c <__adddf3+0x5ac>
1000c560:	00bfe034 	movhi	r2,65408
1000c564:	10bfffc4 	addi	r2,r2,-1
1000c568:	288a703a 	and	r5,r5,r2
1000c56c:	8006d07a 	srli	r3,r16,1
1000c570:	280497fa 	slli	r2,r5,31
1000c574:	8400004c 	andi	r16,r16,1
1000c578:	80e0b03a 	or	r16,r16,r3
1000c57c:	80a0b03a 	or	r16,r16,r2
1000c580:	280ad07a 	srli	r5,r5,1
1000c584:	003f7506 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c588:	18ffffc4 	addi	r3,r3,-1
1000c58c:	1800481e 	bne	r3,zero,1000c6b0 <__adddf3+0x3d0>
1000c590:	818dc83a 	sub	r6,r16,r6
1000c594:	81a1803a 	cmpltu	r16,r16,r6
1000c598:	288bc83a 	sub	r5,r5,r2
1000c59c:	2c0bc83a 	sub	r5,r5,r16
1000c5a0:	3021883a 	mov	r16,r6
1000c5a4:	003fa906 	br	1000c44c <__alt_data_end+0xf800c44c>
1000c5a8:	1188b03a 	or	r4,r2,r6
1000c5ac:	203f6b26 	beq	r4,zero,1000c35c <__alt_data_end+0xf800c35c>
1000c5b0:	39ffffc4 	addi	r7,r7,-1
1000c5b4:	3800931e 	bne	r7,zero,1000c804 <__adddf3+0x524>
1000c5b8:	340d883a 	add	r6,r6,r16
1000c5bc:	3421803a 	cmpltu	r16,r6,r16
1000c5c0:	114b883a 	add	r5,r2,r5
1000c5c4:	2c0b883a 	add	r5,r5,r16
1000c5c8:	3021883a 	mov	r16,r6
1000c5cc:	003fdf06 	br	1000c54c <__alt_data_end+0xf800c54c>
1000c5d0:	1800531e 	bne	r3,zero,1000c720 <__adddf3+0x440>
1000c5d4:	88c00044 	addi	r3,r17,1
1000c5d8:	18c1ffcc 	andi	r3,r3,2047
1000c5dc:	01000044 	movi	r4,1
1000c5e0:	20c0a00e 	bge	r4,r3,1000c864 <__adddf3+0x584>
1000c5e4:	8187c83a 	sub	r3,r16,r6
1000c5e8:	80c9803a 	cmpltu	r4,r16,r3
1000c5ec:	28a7c83a 	sub	r19,r5,r2
1000c5f0:	9927c83a 	sub	r19,r19,r4
1000c5f4:	9900202c 	andhi	r4,r19,128
1000c5f8:	20006226 	beq	r4,zero,1000c784 <__adddf3+0x4a4>
1000c5fc:	3421c83a 	sub	r16,r6,r16
1000c600:	1145c83a 	sub	r2,r2,r5
1000c604:	340d803a 	cmpltu	r6,r6,r16
1000c608:	11a7c83a 	sub	r19,r2,r6
1000c60c:	3825883a 	mov	r18,r7
1000c610:	983f941e 	bne	r19,zero,1000c464 <__alt_data_end+0xf800c464>
1000c614:	8009883a 	mov	r4,r16
1000c618:	000e9b80 	call	1000e9b8 <__clzsi2>
1000c61c:	10800804 	addi	r2,r2,32
1000c620:	10fffe04 	addi	r3,r2,-8
1000c624:	010007c4 	movi	r4,31
1000c628:	20ff930e 	bge	r4,r3,1000c478 <__alt_data_end+0xf800c478>
1000c62c:	10bff604 	addi	r2,r2,-40
1000c630:	8084983a 	sll	r2,r16,r2
1000c634:	0021883a 	mov	r16,zero
1000c638:	1c7f960e 	bge	r3,r17,1000c494 <__alt_data_end+0xf800c494>
1000c63c:	017fe034 	movhi	r5,65408
1000c640:	297fffc4 	addi	r5,r5,-1
1000c644:	88e3c83a 	sub	r17,r17,r3
1000c648:	114a703a 	and	r5,r2,r5
1000c64c:	003f4306 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c650:	000b883a 	mov	r5,zero
1000c654:	0005883a 	mov	r2,zero
1000c658:	003f5706 	br	1000c3b8 <__alt_data_end+0xf800c3b8>
1000c65c:	118cb03a 	or	r6,r2,r6
1000c660:	300cc03a 	cmpne	r6,r6,zero
1000c664:	0007883a 	mov	r3,zero
1000c668:	003f7306 	br	1000c438 <__alt_data_end+0xf800c438>
1000c66c:	3800961e 	bne	r7,zero,1000c8c8 <__adddf3+0x5e8>
1000c670:	89000044 	addi	r4,r17,1
1000c674:	2201ffcc 	andi	r8,r4,2047
1000c678:	01c00044 	movi	r7,1
1000c67c:	3a00680e 	bge	r7,r8,1000c820 <__adddf3+0x540>
1000c680:	01c1ffc4 	movi	r7,2047
1000c684:	21c0a726 	beq	r4,r7,1000c924 <__adddf3+0x644>
1000c688:	340d883a 	add	r6,r6,r16
1000c68c:	3421803a 	cmpltu	r16,r6,r16
1000c690:	114b883a 	add	r5,r2,r5
1000c694:	2c0b883a 	add	r5,r5,r16
1000c698:	282097fa 	slli	r16,r5,31
1000c69c:	300cd07a 	srli	r6,r6,1
1000c6a0:	280ad07a 	srli	r5,r5,1
1000c6a4:	2023883a 	mov	r17,r4
1000c6a8:	81a0b03a 	or	r16,r16,r6
1000c6ac:	003f2b06 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c6b0:	0101ffc4 	movi	r4,2047
1000c6b4:	893f531e 	bne	r17,r4,1000c404 <__alt_data_end+0xf800c404>
1000c6b8:	003f2806 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c6bc:	893ff844 	addi	r4,r17,-31
1000c6c0:	00c00804 	movi	r3,32
1000c6c4:	1108d83a 	srl	r4,r2,r4
1000c6c8:	28c05126 	beq	r5,r3,1000c810 <__adddf3+0x530>
1000c6cc:	00c00fc4 	movi	r3,63
1000c6d0:	1c63c83a 	sub	r17,r3,r17
1000c6d4:	1444983a 	sll	r2,r2,r17
1000c6d8:	1420b03a 	or	r16,r2,r16
1000c6dc:	8020c03a 	cmpne	r16,r16,zero
1000c6e0:	8120b03a 	or	r16,r16,r4
1000c6e4:	000b883a 	mov	r5,zero
1000c6e8:	0023883a 	mov	r17,zero
1000c6ec:	003f1b06 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c6f0:	193ff804 	addi	r4,r3,-32
1000c6f4:	01c00804 	movi	r7,32
1000c6f8:	1108d83a 	srl	r4,r2,r4
1000c6fc:	19c04626 	beq	r3,r7,1000c818 <__adddf3+0x538>
1000c700:	01c01004 	movi	r7,64
1000c704:	38c7c83a 	sub	r3,r7,r3
1000c708:	10c4983a 	sll	r2,r2,r3
1000c70c:	118cb03a 	or	r6,r2,r6
1000c710:	300cc03a 	cmpne	r6,r6,zero
1000c714:	310cb03a 	or	r6,r6,r4
1000c718:	0007883a 	mov	r3,zero
1000c71c:	003f4606 	br	1000c438 <__alt_data_end+0xf800c438>
1000c720:	88002b26 	beq	r17,zero,1000c7d0 <__adddf3+0x4f0>
1000c724:	0201ffc4 	movi	r8,2047
1000c728:	22002f26 	beq	r4,r8,1000c7e8 <__adddf3+0x508>
1000c72c:	00c7c83a 	sub	r3,zero,r3
1000c730:	29402034 	orhi	r5,r5,128
1000c734:	02000e04 	movi	r8,56
1000c738:	40c07616 	blt	r8,r3,1000c914 <__adddf3+0x634>
1000c73c:	020007c4 	movi	r8,31
1000c740:	40c0d216 	blt	r8,r3,1000ca8c <__adddf3+0x7ac>
1000c744:	02000804 	movi	r8,32
1000c748:	40d1c83a 	sub	r8,r8,r3
1000c74c:	2a14983a 	sll	r10,r5,r8
1000c750:	80d2d83a 	srl	r9,r16,r3
1000c754:	8210983a 	sll	r8,r16,r8
1000c758:	28cad83a 	srl	r5,r5,r3
1000c75c:	5252b03a 	or	r9,r10,r9
1000c760:	4006c03a 	cmpne	r3,r8,zero
1000c764:	48e0b03a 	or	r16,r9,r3
1000c768:	3421c83a 	sub	r16,r6,r16
1000c76c:	114bc83a 	sub	r5,r2,r5
1000c770:	340d803a 	cmpltu	r6,r6,r16
1000c774:	298bc83a 	sub	r5,r5,r6
1000c778:	2023883a 	mov	r17,r4
1000c77c:	3825883a 	mov	r18,r7
1000c780:	003f3206 	br	1000c44c <__alt_data_end+0xf800c44c>
1000c784:	98c4b03a 	or	r2,r19,r3
1000c788:	10001c1e 	bne	r2,zero,1000c7fc <__adddf3+0x51c>
1000c78c:	0007883a 	mov	r3,zero
1000c790:	000b883a 	mov	r5,zero
1000c794:	0021883a 	mov	r16,zero
1000c798:	0023883a 	mov	r17,zero
1000c79c:	003f4e06 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000c7a0:	010007c4 	movi	r4,31
1000c7a4:	21c03c16 	blt	r4,r7,1000c898 <__adddf3+0x5b8>
1000c7a8:	01000804 	movi	r4,32
1000c7ac:	21c9c83a 	sub	r4,r4,r7
1000c7b0:	31d0d83a 	srl	r8,r6,r7
1000c7b4:	1112983a 	sll	r9,r2,r4
1000c7b8:	3108983a 	sll	r4,r6,r4
1000c7bc:	11ced83a 	srl	r7,r2,r7
1000c7c0:	4a04b03a 	or	r2,r9,r8
1000c7c4:	2008c03a 	cmpne	r4,r4,zero
1000c7c8:	110cb03a 	or	r6,r2,r4
1000c7cc:	003f5a06 	br	1000c538 <__alt_data_end+0xf800c538>
1000c7d0:	2c10b03a 	or	r8,r5,r16
1000c7d4:	40000426 	beq	r8,zero,1000c7e8 <__adddf3+0x508>
1000c7d8:	00c6303a 	nor	r3,zero,r3
1000c7dc:	183fe226 	beq	r3,zero,1000c768 <__alt_data_end+0xf800c768>
1000c7e0:	0201ffc4 	movi	r8,2047
1000c7e4:	223fd31e 	bne	r4,r8,1000c734 <__alt_data_end+0xf800c734>
1000c7e8:	100b883a 	mov	r5,r2
1000c7ec:	3021883a 	mov	r16,r6
1000c7f0:	2023883a 	mov	r17,r4
1000c7f4:	3825883a 	mov	r18,r7
1000c7f8:	003ed806 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c7fc:	1821883a 	mov	r16,r3
1000c800:	003f1706 	br	1000c460 <__alt_data_end+0xf800c460>
1000c804:	0101ffc4 	movi	r4,2047
1000c808:	893f461e 	bne	r17,r4,1000c524 <__alt_data_end+0xf800c524>
1000c80c:	003ed306 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c810:	0005883a 	mov	r2,zero
1000c814:	003fb006 	br	1000c6d8 <__alt_data_end+0xf800c6d8>
1000c818:	0005883a 	mov	r2,zero
1000c81c:	003fbb06 	br	1000c70c <__alt_data_end+0xf800c70c>
1000c820:	2c06b03a 	or	r3,r5,r16
1000c824:	8800841e 	bne	r17,zero,1000ca38 <__adddf3+0x758>
1000c828:	1800b226 	beq	r3,zero,1000caf4 <__adddf3+0x814>
1000c82c:	1186b03a 	or	r3,r2,r6
1000c830:	183eca26 	beq	r3,zero,1000c35c <__alt_data_end+0xf800c35c>
1000c834:	340d883a 	add	r6,r6,r16
1000c838:	114b883a 	add	r5,r2,r5
1000c83c:	3421803a 	cmpltu	r16,r6,r16
1000c840:	2c0b883a 	add	r5,r5,r16
1000c844:	2880202c 	andhi	r2,r5,128
1000c848:	1000c026 	beq	r2,zero,1000cb4c <__adddf3+0x86c>
1000c84c:	00bfe034 	movhi	r2,65408
1000c850:	10bfffc4 	addi	r2,r2,-1
1000c854:	288a703a 	and	r5,r5,r2
1000c858:	3021883a 	mov	r16,r6
1000c85c:	3823883a 	mov	r17,r7
1000c860:	003ebe06 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c864:	2c06b03a 	or	r3,r5,r16
1000c868:	8800221e 	bne	r17,zero,1000c8f4 <__adddf3+0x614>
1000c86c:	1800481e 	bne	r3,zero,1000c990 <__adddf3+0x6b0>
1000c870:	1186b03a 	or	r3,r2,r6
1000c874:	18000426 	beq	r3,zero,1000c888 <__adddf3+0x5a8>
1000c878:	100b883a 	mov	r5,r2
1000c87c:	3021883a 	mov	r16,r6
1000c880:	3825883a 	mov	r18,r7
1000c884:	003eb506 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c888:	0007883a 	mov	r3,zero
1000c88c:	000b883a 	mov	r5,zero
1000c890:	0021883a 	mov	r16,zero
1000c894:	003f1006 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000c898:	393ff804 	addi	r4,r7,-32
1000c89c:	02000804 	movi	r8,32
1000c8a0:	1108d83a 	srl	r4,r2,r4
1000c8a4:	3a007726 	beq	r7,r8,1000ca84 <__adddf3+0x7a4>
1000c8a8:	02001004 	movi	r8,64
1000c8ac:	41cfc83a 	sub	r7,r8,r7
1000c8b0:	11c4983a 	sll	r2,r2,r7
1000c8b4:	118cb03a 	or	r6,r2,r6
1000c8b8:	300cc03a 	cmpne	r6,r6,zero
1000c8bc:	310cb03a 	or	r6,r6,r4
1000c8c0:	000f883a 	mov	r7,zero
1000c8c4:	003f1c06 	br	1000c538 <__alt_data_end+0xf800c538>
1000c8c8:	88001a1e 	bne	r17,zero,1000c934 <__adddf3+0x654>
1000c8cc:	2c10b03a 	or	r8,r5,r16
1000c8d0:	40005526 	beq	r8,zero,1000ca28 <__adddf3+0x748>
1000c8d4:	01ce303a 	nor	r7,zero,r7
1000c8d8:	3800511e 	bne	r7,zero,1000ca20 <__adddf3+0x740>
1000c8dc:	81a1883a 	add	r16,r16,r6
1000c8e0:	114b883a 	add	r5,r2,r5
1000c8e4:	818d803a 	cmpltu	r6,r16,r6
1000c8e8:	298b883a 	add	r5,r5,r6
1000c8ec:	2023883a 	mov	r17,r4
1000c8f0:	003f1606 	br	1000c54c <__alt_data_end+0xf800c54c>
1000c8f4:	1800341e 	bne	r3,zero,1000c9c8 <__adddf3+0x6e8>
1000c8f8:	1186b03a 	or	r3,r2,r6
1000c8fc:	18006f26 	beq	r3,zero,1000cabc <__adddf3+0x7dc>
1000c900:	100b883a 	mov	r5,r2
1000c904:	3021883a 	mov	r16,r6
1000c908:	3825883a 	mov	r18,r7
1000c90c:	0441ffc4 	movi	r17,2047
1000c910:	003e9206 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c914:	2c20b03a 	or	r16,r5,r16
1000c918:	8020c03a 	cmpne	r16,r16,zero
1000c91c:	000b883a 	mov	r5,zero
1000c920:	003f9106 	br	1000c768 <__alt_data_end+0xf800c768>
1000c924:	2023883a 	mov	r17,r4
1000c928:	000b883a 	mov	r5,zero
1000c92c:	0021883a 	mov	r16,zero
1000c930:	003ee906 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000c934:	0201ffc4 	movi	r8,2047
1000c938:	22003b26 	beq	r4,r8,1000ca28 <__adddf3+0x748>
1000c93c:	01cfc83a 	sub	r7,zero,r7
1000c940:	29402034 	orhi	r5,r5,128
1000c944:	02000e04 	movi	r8,56
1000c948:	41c06216 	blt	r8,r7,1000cad4 <__adddf3+0x7f4>
1000c94c:	020007c4 	movi	r8,31
1000c950:	41c07016 	blt	r8,r7,1000cb14 <__adddf3+0x834>
1000c954:	02000804 	movi	r8,32
1000c958:	41d1c83a 	sub	r8,r8,r7
1000c95c:	2a14983a 	sll	r10,r5,r8
1000c960:	81d2d83a 	srl	r9,r16,r7
1000c964:	8210983a 	sll	r8,r16,r8
1000c968:	29cad83a 	srl	r5,r5,r7
1000c96c:	5252b03a 	or	r9,r10,r9
1000c970:	400ec03a 	cmpne	r7,r8,zero
1000c974:	49e0b03a 	or	r16,r9,r7
1000c978:	81a1883a 	add	r16,r16,r6
1000c97c:	2885883a 	add	r2,r5,r2
1000c980:	818d803a 	cmpltu	r6,r16,r6
1000c984:	118b883a 	add	r5,r2,r6
1000c988:	2023883a 	mov	r17,r4
1000c98c:	003eef06 	br	1000c54c <__alt_data_end+0xf800c54c>
1000c990:	1186b03a 	or	r3,r2,r6
1000c994:	183e7126 	beq	r3,zero,1000c35c <__alt_data_end+0xf800c35c>
1000c998:	8187c83a 	sub	r3,r16,r6
1000c99c:	80d1803a 	cmpltu	r8,r16,r3
1000c9a0:	2889c83a 	sub	r4,r5,r2
1000c9a4:	2209c83a 	sub	r4,r4,r8
1000c9a8:	2200202c 	andhi	r8,r4,128
1000c9ac:	40005426 	beq	r8,zero,1000cb00 <__adddf3+0x820>
1000c9b0:	3421c83a 	sub	r16,r6,r16
1000c9b4:	114bc83a 	sub	r5,r2,r5
1000c9b8:	340d803a 	cmpltu	r6,r6,r16
1000c9bc:	298bc83a 	sub	r5,r5,r6
1000c9c0:	3825883a 	mov	r18,r7
1000c9c4:	003e6506 	br	1000c35c <__alt_data_end+0xf800c35c>
1000c9c8:	1186b03a 	or	r3,r2,r6
1000c9cc:	18002b26 	beq	r3,zero,1000ca7c <__adddf3+0x79c>
1000c9d0:	2806d0fa 	srli	r3,r5,3
1000c9d4:	8020d0fa 	srli	r16,r16,3
1000c9d8:	280a977a 	slli	r5,r5,29
1000c9dc:	1900022c 	andhi	r4,r3,8
1000c9e0:	2c20b03a 	or	r16,r5,r16
1000c9e4:	20000826 	beq	r4,zero,1000ca08 <__adddf3+0x728>
1000c9e8:	1008d0fa 	srli	r4,r2,3
1000c9ec:	2140022c 	andhi	r5,r4,8
1000c9f0:	2800051e 	bne	r5,zero,1000ca08 <__adddf3+0x728>
1000c9f4:	300cd0fa 	srli	r6,r6,3
1000c9f8:	1004977a 	slli	r2,r2,29
1000c9fc:	2007883a 	mov	r3,r4
1000ca00:	3825883a 	mov	r18,r7
1000ca04:	11a0b03a 	or	r16,r2,r6
1000ca08:	800ad77a 	srli	r5,r16,29
1000ca0c:	180690fa 	slli	r3,r3,3
1000ca10:	802090fa 	slli	r16,r16,3
1000ca14:	0441ffc4 	movi	r17,2047
1000ca18:	28cab03a 	or	r5,r5,r3
1000ca1c:	003e4f06 	br	1000c35c <__alt_data_end+0xf800c35c>
1000ca20:	0201ffc4 	movi	r8,2047
1000ca24:	223fc71e 	bne	r4,r8,1000c944 <__alt_data_end+0xf800c944>
1000ca28:	100b883a 	mov	r5,r2
1000ca2c:	3021883a 	mov	r16,r6
1000ca30:	2023883a 	mov	r17,r4
1000ca34:	003e4906 	br	1000c35c <__alt_data_end+0xf800c35c>
1000ca38:	18002a26 	beq	r3,zero,1000cae4 <__adddf3+0x804>
1000ca3c:	1186b03a 	or	r3,r2,r6
1000ca40:	18000e26 	beq	r3,zero,1000ca7c <__adddf3+0x79c>
1000ca44:	2806d0fa 	srli	r3,r5,3
1000ca48:	8020d0fa 	srli	r16,r16,3
1000ca4c:	280a977a 	slli	r5,r5,29
1000ca50:	1900022c 	andhi	r4,r3,8
1000ca54:	2c20b03a 	or	r16,r5,r16
1000ca58:	203feb26 	beq	r4,zero,1000ca08 <__alt_data_end+0xf800ca08>
1000ca5c:	1008d0fa 	srli	r4,r2,3
1000ca60:	2140022c 	andhi	r5,r4,8
1000ca64:	283fe81e 	bne	r5,zero,1000ca08 <__alt_data_end+0xf800ca08>
1000ca68:	300cd0fa 	srli	r6,r6,3
1000ca6c:	1004977a 	slli	r2,r2,29
1000ca70:	2007883a 	mov	r3,r4
1000ca74:	11a0b03a 	or	r16,r2,r6
1000ca78:	003fe306 	br	1000ca08 <__alt_data_end+0xf800ca08>
1000ca7c:	0441ffc4 	movi	r17,2047
1000ca80:	003e3606 	br	1000c35c <__alt_data_end+0xf800c35c>
1000ca84:	0005883a 	mov	r2,zero
1000ca88:	003f8a06 	br	1000c8b4 <__alt_data_end+0xf800c8b4>
1000ca8c:	1a3ff804 	addi	r8,r3,-32
1000ca90:	02400804 	movi	r9,32
1000ca94:	2a10d83a 	srl	r8,r5,r8
1000ca98:	1a402a26 	beq	r3,r9,1000cb44 <__adddf3+0x864>
1000ca9c:	02401004 	movi	r9,64
1000caa0:	48c7c83a 	sub	r3,r9,r3
1000caa4:	28ca983a 	sll	r5,r5,r3
1000caa8:	2c20b03a 	or	r16,r5,r16
1000caac:	8020c03a 	cmpne	r16,r16,zero
1000cab0:	8220b03a 	or	r16,r16,r8
1000cab4:	000b883a 	mov	r5,zero
1000cab8:	003f2b06 	br	1000c768 <__alt_data_end+0xf800c768>
1000cabc:	0007883a 	mov	r3,zero
1000cac0:	01402034 	movhi	r5,128
1000cac4:	297fffc4 	addi	r5,r5,-1
1000cac8:	043ffe04 	movi	r16,-8
1000cacc:	0441ffc4 	movi	r17,2047
1000cad0:	003e8106 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000cad4:	2c20b03a 	or	r16,r5,r16
1000cad8:	8020c03a 	cmpne	r16,r16,zero
1000cadc:	000b883a 	mov	r5,zero
1000cae0:	003fa506 	br	1000c978 <__alt_data_end+0xf800c978>
1000cae4:	100b883a 	mov	r5,r2
1000cae8:	3021883a 	mov	r16,r6
1000caec:	0441ffc4 	movi	r17,2047
1000caf0:	003e1a06 	br	1000c35c <__alt_data_end+0xf800c35c>
1000caf4:	100b883a 	mov	r5,r2
1000caf8:	3021883a 	mov	r16,r6
1000cafc:	003e1706 	br	1000c35c <__alt_data_end+0xf800c35c>
1000cb00:	20c4b03a 	or	r2,r4,r3
1000cb04:	103f6026 	beq	r2,zero,1000c888 <__alt_data_end+0xf800c888>
1000cb08:	200b883a 	mov	r5,r4
1000cb0c:	1821883a 	mov	r16,r3
1000cb10:	003e1206 	br	1000c35c <__alt_data_end+0xf800c35c>
1000cb14:	3a3ff804 	addi	r8,r7,-32
1000cb18:	02400804 	movi	r9,32
1000cb1c:	2a10d83a 	srl	r8,r5,r8
1000cb20:	3a400c26 	beq	r7,r9,1000cb54 <__adddf3+0x874>
1000cb24:	02401004 	movi	r9,64
1000cb28:	49cfc83a 	sub	r7,r9,r7
1000cb2c:	29ca983a 	sll	r5,r5,r7
1000cb30:	2c20b03a 	or	r16,r5,r16
1000cb34:	8020c03a 	cmpne	r16,r16,zero
1000cb38:	8220b03a 	or	r16,r16,r8
1000cb3c:	000b883a 	mov	r5,zero
1000cb40:	003f8d06 	br	1000c978 <__alt_data_end+0xf800c978>
1000cb44:	000b883a 	mov	r5,zero
1000cb48:	003fd706 	br	1000caa8 <__alt_data_end+0xf800caa8>
1000cb4c:	3021883a 	mov	r16,r6
1000cb50:	003e0206 	br	1000c35c <__alt_data_end+0xf800c35c>
1000cb54:	000b883a 	mov	r5,zero
1000cb58:	003ff506 	br	1000cb30 <__alt_data_end+0xf800cb30>

1000cb5c <__divdf3>:
1000cb5c:	defff004 	addi	sp,sp,-64
1000cb60:	dd000a15 	stw	r20,40(sp)
1000cb64:	2828d53a 	srli	r20,r5,20
1000cb68:	dd800c15 	stw	r22,48(sp)
1000cb6c:	282cd7fa 	srli	r22,r5,31
1000cb70:	df000e15 	stw	fp,56(sp)
1000cb74:	dcc00915 	stw	r19,36(sp)
1000cb78:	dc800815 	stw	r18,32(sp)
1000cb7c:	04c00434 	movhi	r19,16
1000cb80:	9cffffc4 	addi	r19,r19,-1
1000cb84:	dfc00f15 	stw	ra,60(sp)
1000cb88:	ddc00d15 	stw	r23,52(sp)
1000cb8c:	dd400b15 	stw	r21,44(sp)
1000cb90:	dc400715 	stw	r17,28(sp)
1000cb94:	dc000615 	stw	r16,24(sp)
1000cb98:	a501ffcc 	andi	r20,r20,2047
1000cb9c:	2025883a 	mov	r18,r4
1000cba0:	2ce6703a 	and	r19,r5,r19
1000cba4:	b7003fcc 	andi	fp,r22,255
1000cba8:	a0006a26 	beq	r20,zero,1000cd54 <__divdf3+0x1f8>
1000cbac:	0081ffc4 	movi	r2,2047
1000cbb0:	2021883a 	mov	r16,r4
1000cbb4:	a0803726 	beq	r20,r2,1000cc94 <__divdf3+0x138>
1000cbb8:	98800434 	orhi	r2,r19,16
1000cbbc:	100490fa 	slli	r2,r2,3
1000cbc0:	2026d77a 	srli	r19,r4,29
1000cbc4:	202090fa 	slli	r16,r4,3
1000cbc8:	a53f0044 	addi	r20,r20,-1023
1000cbcc:	14e6b03a 	or	r19,r2,r19
1000cbd0:	002b883a 	mov	r21,zero
1000cbd4:	0013883a 	mov	r9,zero
1000cbd8:	3804d53a 	srli	r2,r7,20
1000cbdc:	382ed7fa 	srli	r23,r7,31
1000cbe0:	04400434 	movhi	r17,16
1000cbe4:	8c7fffc4 	addi	r17,r17,-1
1000cbe8:	1081ffcc 	andi	r2,r2,2047
1000cbec:	3025883a 	mov	r18,r6
1000cbf0:	3c62703a 	and	r17,r7,r17
1000cbf4:	ba803fcc 	andi	r10,r23,255
1000cbf8:	10007326 	beq	r2,zero,1000cdc8 <__divdf3+0x26c>
1000cbfc:	0101ffc4 	movi	r4,2047
1000cc00:	11006b26 	beq	r2,r4,1000cdb0 <__divdf3+0x254>
1000cc04:	89000434 	orhi	r4,r17,16
1000cc08:	200890fa 	slli	r4,r4,3
1000cc0c:	3022d77a 	srli	r17,r6,29
1000cc10:	302490fa 	slli	r18,r6,3
1000cc14:	10bf0044 	addi	r2,r2,-1023
1000cc18:	2462b03a 	or	r17,r4,r17
1000cc1c:	000f883a 	mov	r7,zero
1000cc20:	b5caf03a 	xor	r5,r22,r23
1000cc24:	3d48b03a 	or	r4,r7,r21
1000cc28:	00c003c4 	movi	r3,15
1000cc2c:	2811883a 	mov	r8,r5
1000cc30:	2d403fcc 	andi	r21,r5,255
1000cc34:	19009436 	bltu	r3,r4,1000ce88 <__divdf3+0x32c>
1000cc38:	2109883a 	add	r4,r4,r4
1000cc3c:	00c40074 	movhi	r3,4097
1000cc40:	18f31504 	addi	r3,r3,-13228
1000cc44:	2109883a 	add	r4,r4,r4
1000cc48:	20c9883a 	add	r4,r4,r3
1000cc4c:	20c00017 	ldw	r3,0(r4)
1000cc50:	1800683a 	jmp	r3
1000cc54:	1000ce88 	cmpgei	zero,r2,826
1000cc58:	1000ccf0 	cmpltui	zero,r2,819
1000cc5c:	1000ce78 	rdprs	zero,r2,825
1000cc60:	1000ccc0 	call	11000ccc <_gp+0xfe553c>
1000cc64:	1000ce78 	rdprs	zero,r2,825
1000cc68:	1000ce60 	cmpeqi	zero,r2,825
1000cc6c:	1000ce78 	rdprs	zero,r2,825
1000cc70:	1000ccc0 	call	11000ccc <_gp+0xfe553c>
1000cc74:	1000ccf0 	cmpltui	zero,r2,819
1000cc78:	1000ccf0 	cmpltui	zero,r2,819
1000cc7c:	1000ce60 	cmpeqi	zero,r2,825
1000cc80:	1000ccc0 	call	11000ccc <_gp+0xfe553c>
1000cc84:	1000ccb0 	cmpltui	zero,r2,818
1000cc88:	1000ccb0 	cmpltui	zero,r2,818
1000cc8c:	1000ccb0 	cmpltui	zero,r2,818
1000cc90:	1000d218 	cmpnei	zero,r2,840
1000cc94:	9904b03a 	or	r2,r19,r4
1000cc98:	10006e1e 	bne	r2,zero,1000ce54 <__divdf3+0x2f8>
1000cc9c:	05400204 	movi	r21,8
1000cca0:	0027883a 	mov	r19,zero
1000cca4:	0021883a 	mov	r16,zero
1000cca8:	02400084 	movi	r9,2
1000ccac:	003fca06 	br	1000cbd8 <__alt_data_end+0xf800cbd8>
1000ccb0:	9823883a 	mov	r17,r19
1000ccb4:	8025883a 	mov	r18,r16
1000ccb8:	e015883a 	mov	r10,fp
1000ccbc:	480f883a 	mov	r7,r9
1000ccc0:	00800084 	movi	r2,2
1000ccc4:	38800926 	beq	r7,r2,1000ccec <__divdf3+0x190>
1000ccc8:	008000c4 	movi	r2,3
1000cccc:	38820226 	beq	r7,r2,1000d4d8 <__divdf3+0x97c>
1000ccd0:	00800044 	movi	r2,1
1000ccd4:	3881b81e 	bne	r7,r2,1000d3b8 <__divdf3+0x85c>
1000ccd8:	5011883a 	mov	r8,r10
1000ccdc:	0005883a 	mov	r2,zero
1000cce0:	0027883a 	mov	r19,zero
1000cce4:	0021883a 	mov	r16,zero
1000cce8:	00000506 	br	1000cd00 <__divdf3+0x1a4>
1000ccec:	502b883a 	mov	r21,r10
1000ccf0:	aa00004c 	andi	r8,r21,1
1000ccf4:	0081ffc4 	movi	r2,2047
1000ccf8:	0027883a 	mov	r19,zero
1000ccfc:	0021883a 	mov	r16,zero
1000cd00:	1004953a 	slli	r2,r2,20
1000cd04:	42003fcc 	andi	r8,r8,255
1000cd08:	401097fa 	slli	r8,r8,31
1000cd0c:	00c00434 	movhi	r3,16
1000cd10:	18ffffc4 	addi	r3,r3,-1
1000cd14:	98e6703a 	and	r19,r19,r3
1000cd18:	9886b03a 	or	r3,r19,r2
1000cd1c:	1a06b03a 	or	r3,r3,r8
1000cd20:	8005883a 	mov	r2,r16
1000cd24:	dfc00f17 	ldw	ra,60(sp)
1000cd28:	df000e17 	ldw	fp,56(sp)
1000cd2c:	ddc00d17 	ldw	r23,52(sp)
1000cd30:	dd800c17 	ldw	r22,48(sp)
1000cd34:	dd400b17 	ldw	r21,44(sp)
1000cd38:	dd000a17 	ldw	r20,40(sp)
1000cd3c:	dcc00917 	ldw	r19,36(sp)
1000cd40:	dc800817 	ldw	r18,32(sp)
1000cd44:	dc400717 	ldw	r17,28(sp)
1000cd48:	dc000617 	ldw	r16,24(sp)
1000cd4c:	dec01004 	addi	sp,sp,64
1000cd50:	f800283a 	ret
1000cd54:	9904b03a 	or	r2,r19,r4
1000cd58:	10003926 	beq	r2,zero,1000ce40 <__divdf3+0x2e4>
1000cd5c:	98015326 	beq	r19,zero,1000d2ac <__divdf3+0x750>
1000cd60:	9809883a 	mov	r4,r19
1000cd64:	d9800215 	stw	r6,8(sp)
1000cd68:	d9c00515 	stw	r7,20(sp)
1000cd6c:	000e9b80 	call	1000e9b8 <__clzsi2>
1000cd70:	d9800217 	ldw	r6,8(sp)
1000cd74:	d9c00517 	ldw	r7,20(sp)
1000cd78:	00c009c4 	movi	r3,39
1000cd7c:	18814716 	blt	r3,r2,1000d29c <__divdf3+0x740>
1000cd80:	01400a04 	movi	r5,40
1000cd84:	143ffe04 	addi	r16,r2,-8
1000cd88:	288bc83a 	sub	r5,r5,r2
1000cd8c:	9c26983a 	sll	r19,r19,r16
1000cd90:	914ad83a 	srl	r5,r18,r5
1000cd94:	9420983a 	sll	r16,r18,r16
1000cd98:	2ce6b03a 	or	r19,r5,r19
1000cd9c:	053f0344 	movi	r20,-1011
1000cda0:	a0a9c83a 	sub	r20,r20,r2
1000cda4:	002b883a 	mov	r21,zero
1000cda8:	0013883a 	mov	r9,zero
1000cdac:	003f8a06 	br	1000cbd8 <__alt_data_end+0xf800cbd8>
1000cdb0:	8988b03a 	or	r4,r17,r6
1000cdb4:	2000201e 	bne	r4,zero,1000ce38 <__divdf3+0x2dc>
1000cdb8:	0023883a 	mov	r17,zero
1000cdbc:	0025883a 	mov	r18,zero
1000cdc0:	01c00084 	movi	r7,2
1000cdc4:	003f9606 	br	1000cc20 <__alt_data_end+0xf800cc20>
1000cdc8:	8988b03a 	or	r4,r17,r6
1000cdcc:	20001626 	beq	r4,zero,1000ce28 <__divdf3+0x2cc>
1000cdd0:	88012826 	beq	r17,zero,1000d274 <__divdf3+0x718>
1000cdd4:	8809883a 	mov	r4,r17
1000cdd8:	d9800215 	stw	r6,8(sp)
1000cddc:	da400315 	stw	r9,12(sp)
1000cde0:	da800415 	stw	r10,16(sp)
1000cde4:	000e9b80 	call	1000e9b8 <__clzsi2>
1000cde8:	d9800217 	ldw	r6,8(sp)
1000cdec:	da400317 	ldw	r9,12(sp)
1000cdf0:	da800417 	ldw	r10,16(sp)
1000cdf4:	010009c4 	movi	r4,39
1000cdf8:	20811a16 	blt	r4,r2,1000d264 <__divdf3+0x708>
1000cdfc:	01000a04 	movi	r4,40
1000ce00:	14bffe04 	addi	r18,r2,-8
1000ce04:	2089c83a 	sub	r4,r4,r2
1000ce08:	8ca2983a 	sll	r17,r17,r18
1000ce0c:	3108d83a 	srl	r4,r6,r4
1000ce10:	34a4983a 	sll	r18,r6,r18
1000ce14:	2462b03a 	or	r17,r4,r17
1000ce18:	013f0344 	movi	r4,-1011
1000ce1c:	2085c83a 	sub	r2,r4,r2
1000ce20:	000f883a 	mov	r7,zero
1000ce24:	003f7e06 	br	1000cc20 <__alt_data_end+0xf800cc20>
1000ce28:	0023883a 	mov	r17,zero
1000ce2c:	0025883a 	mov	r18,zero
1000ce30:	01c00044 	movi	r7,1
1000ce34:	003f7a06 	br	1000cc20 <__alt_data_end+0xf800cc20>
1000ce38:	01c000c4 	movi	r7,3
1000ce3c:	003f7806 	br	1000cc20 <__alt_data_end+0xf800cc20>
1000ce40:	05400104 	movi	r21,4
1000ce44:	0027883a 	mov	r19,zero
1000ce48:	0021883a 	mov	r16,zero
1000ce4c:	02400044 	movi	r9,1
1000ce50:	003f6106 	br	1000cbd8 <__alt_data_end+0xf800cbd8>
1000ce54:	05400304 	movi	r21,12
1000ce58:	024000c4 	movi	r9,3
1000ce5c:	003f5e06 	br	1000cbd8 <__alt_data_end+0xf800cbd8>
1000ce60:	0011883a 	mov	r8,zero
1000ce64:	04c00434 	movhi	r19,16
1000ce68:	9cffffc4 	addi	r19,r19,-1
1000ce6c:	043fffc4 	movi	r16,-1
1000ce70:	0081ffc4 	movi	r2,2047
1000ce74:	003fa206 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000ce78:	0005883a 	mov	r2,zero
1000ce7c:	0027883a 	mov	r19,zero
1000ce80:	0021883a 	mov	r16,zero
1000ce84:	003f9e06 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000ce88:	a085c83a 	sub	r2,r20,r2
1000ce8c:	d8800115 	stw	r2,4(sp)
1000ce90:	8cc11b36 	bltu	r17,r19,1000d300 <__divdf3+0x7a4>
1000ce94:	9c411926 	beq	r19,r17,1000d2fc <__divdf3+0x7a0>
1000ce98:	d8c00117 	ldw	r3,4(sp)
1000ce9c:	002d883a 	mov	r22,zero
1000cea0:	18ffffc4 	addi	r3,r3,-1
1000cea4:	d8c00115 	stw	r3,4(sp)
1000cea8:	9006d63a 	srli	r3,r18,24
1000ceac:	8822923a 	slli	r17,r17,8
1000ceb0:	9024923a 	slli	r18,r18,8
1000ceb4:	9809883a 	mov	r4,r19
1000ceb8:	1c6eb03a 	or	r23,r3,r17
1000cebc:	b828d43a 	srli	r20,r23,16
1000cec0:	dc800015 	stw	r18,0(sp)
1000cec4:	bcbfffcc 	andi	r18,r23,65535
1000cec8:	a00b883a 	mov	r5,r20
1000cecc:	000c2a80 	call	1000c2a8 <__udivsi3>
1000ced0:	1009883a 	mov	r4,r2
1000ced4:	900b883a 	mov	r5,r18
1000ced8:	1039883a 	mov	fp,r2
1000cedc:	000c2b80 	call	1000c2b8 <__mulsi3>
1000cee0:	9809883a 	mov	r4,r19
1000cee4:	a00b883a 	mov	r5,r20
1000cee8:	1023883a 	mov	r17,r2
1000ceec:	000c2b00 	call	1000c2b0 <__umodsi3>
1000cef0:	1004943a 	slli	r2,r2,16
1000cef4:	8008d43a 	srli	r4,r16,16
1000cef8:	110ab03a 	or	r5,r2,r4
1000cefc:	2c40062e 	bgeu	r5,r17,1000cf18 <__divdf3+0x3bc>
1000cf00:	2dcb883a 	add	r5,r5,r23
1000cf04:	e0bfffc4 	addi	r2,fp,-1
1000cf08:	2dc11136 	bltu	r5,r23,1000d350 <__divdf3+0x7f4>
1000cf0c:	2c41102e 	bgeu	r5,r17,1000d350 <__divdf3+0x7f4>
1000cf10:	e73fff84 	addi	fp,fp,-2
1000cf14:	2dcb883a 	add	r5,r5,r23
1000cf18:	2c67c83a 	sub	r19,r5,r17
1000cf1c:	9809883a 	mov	r4,r19
1000cf20:	a00b883a 	mov	r5,r20
1000cf24:	000c2a80 	call	1000c2a8 <__udivsi3>
1000cf28:	1009883a 	mov	r4,r2
1000cf2c:	900b883a 	mov	r5,r18
1000cf30:	1023883a 	mov	r17,r2
1000cf34:	000c2b80 	call	1000c2b8 <__mulsi3>
1000cf38:	9809883a 	mov	r4,r19
1000cf3c:	a00b883a 	mov	r5,r20
1000cf40:	d8800215 	stw	r2,8(sp)
1000cf44:	000c2b00 	call	1000c2b0 <__umodsi3>
1000cf48:	1004943a 	slli	r2,r2,16
1000cf4c:	da000217 	ldw	r8,8(sp)
1000cf50:	843fffcc 	andi	r16,r16,65535
1000cf54:	140eb03a 	or	r7,r2,r16
1000cf58:	3a00062e 	bgeu	r7,r8,1000cf74 <__divdf3+0x418>
1000cf5c:	3dcf883a 	add	r7,r7,r23
1000cf60:	88bfffc4 	addi	r2,r17,-1
1000cf64:	3dc0f836 	bltu	r7,r23,1000d348 <__divdf3+0x7ec>
1000cf68:	3a00f72e 	bgeu	r7,r8,1000d348 <__divdf3+0x7ec>
1000cf6c:	8c7fff84 	addi	r17,r17,-2
1000cf70:	3dcf883a 	add	r7,r7,r23
1000cf74:	e004943a 	slli	r2,fp,16
1000cf78:	d8c00017 	ldw	r3,0(sp)
1000cf7c:	3a0fc83a 	sub	r7,r7,r8
1000cf80:	88a2b03a 	or	r17,r17,r2
1000cf84:	1f3fffcc 	andi	fp,r3,65535
1000cf88:	8a7fffcc 	andi	r9,r17,65535
1000cf8c:	4809883a 	mov	r4,r9
1000cf90:	e00b883a 	mov	r5,fp
1000cf94:	1826d43a 	srli	r19,r3,16
1000cf98:	d9c00515 	stw	r7,20(sp)
1000cf9c:	da400315 	stw	r9,12(sp)
1000cfa0:	000c2b80 	call	1000c2b8 <__mulsi3>
1000cfa4:	da400317 	ldw	r9,12(sp)
1000cfa8:	8820d43a 	srli	r16,r17,16
1000cfac:	980b883a 	mov	r5,r19
1000cfb0:	4809883a 	mov	r4,r9
1000cfb4:	d8800215 	stw	r2,8(sp)
1000cfb8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000cfbc:	8009883a 	mov	r4,r16
1000cfc0:	e00b883a 	mov	r5,fp
1000cfc4:	d8800415 	stw	r2,16(sp)
1000cfc8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000cfcc:	8009883a 	mov	r4,r16
1000cfd0:	980b883a 	mov	r5,r19
1000cfd4:	d8800315 	stw	r2,12(sp)
1000cfd8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000cfdc:	da000217 	ldw	r8,8(sp)
1000cfe0:	da400317 	ldw	r9,12(sp)
1000cfe4:	da800417 	ldw	r10,16(sp)
1000cfe8:	100b883a 	mov	r5,r2
1000cfec:	4004d43a 	srli	r2,r8,16
1000cff0:	4a89883a 	add	r4,r9,r10
1000cff4:	d9c00517 	ldw	r7,20(sp)
1000cff8:	2089883a 	add	r4,r4,r2
1000cffc:	2240022e 	bgeu	r4,r9,1000d008 <__divdf3+0x4ac>
1000d000:	00800074 	movhi	r2,1
1000d004:	288b883a 	add	r5,r5,r2
1000d008:	2004d43a 	srli	r2,r4,16
1000d00c:	2020943a 	slli	r16,r4,16
1000d010:	423fffcc 	andi	r8,r8,65535
1000d014:	288b883a 	add	r5,r5,r2
1000d018:	8221883a 	add	r16,r16,r8
1000d01c:	3940ab36 	bltu	r7,r5,1000d2cc <__divdf3+0x770>
1000d020:	3940a926 	beq	r7,r5,1000d2c8 <__divdf3+0x76c>
1000d024:	394bc83a 	sub	r5,r7,r5
1000d028:	b421c83a 	sub	r16,r22,r16
1000d02c:	b42d803a 	cmpltu	r22,r22,r16
1000d030:	2dadc83a 	sub	r22,r5,r22
1000d034:	b5c0da26 	beq	r22,r23,1000d3a0 <__divdf3+0x844>
1000d038:	b009883a 	mov	r4,r22
1000d03c:	a00b883a 	mov	r5,r20
1000d040:	000c2a80 	call	1000c2a8 <__udivsi3>
1000d044:	1009883a 	mov	r4,r2
1000d048:	900b883a 	mov	r5,r18
1000d04c:	d8800215 	stw	r2,8(sp)
1000d050:	000c2b80 	call	1000c2b8 <__mulsi3>
1000d054:	b009883a 	mov	r4,r22
1000d058:	a00b883a 	mov	r5,r20
1000d05c:	d8800515 	stw	r2,20(sp)
1000d060:	000c2b00 	call	1000c2b0 <__umodsi3>
1000d064:	1004943a 	slli	r2,r2,16
1000d068:	8008d43a 	srli	r4,r16,16
1000d06c:	d9c00517 	ldw	r7,20(sp)
1000d070:	da000217 	ldw	r8,8(sp)
1000d074:	110ab03a 	or	r5,r2,r4
1000d078:	29c0062e 	bgeu	r5,r7,1000d094 <__divdf3+0x538>
1000d07c:	2dcb883a 	add	r5,r5,r23
1000d080:	40bfffc4 	addi	r2,r8,-1
1000d084:	2dc0ca36 	bltu	r5,r23,1000d3b0 <__divdf3+0x854>
1000d088:	29c0c92e 	bgeu	r5,r7,1000d3b0 <__divdf3+0x854>
1000d08c:	423fff84 	addi	r8,r8,-2
1000d090:	2dcb883a 	add	r5,r5,r23
1000d094:	29cfc83a 	sub	r7,r5,r7
1000d098:	3809883a 	mov	r4,r7
1000d09c:	a00b883a 	mov	r5,r20
1000d0a0:	da000215 	stw	r8,8(sp)
1000d0a4:	d9c00515 	stw	r7,20(sp)
1000d0a8:	000c2a80 	call	1000c2a8 <__udivsi3>
1000d0ac:	900b883a 	mov	r5,r18
1000d0b0:	1009883a 	mov	r4,r2
1000d0b4:	102d883a 	mov	r22,r2
1000d0b8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000d0bc:	d9c00517 	ldw	r7,20(sp)
1000d0c0:	a00b883a 	mov	r5,r20
1000d0c4:	1025883a 	mov	r18,r2
1000d0c8:	3809883a 	mov	r4,r7
1000d0cc:	000c2b00 	call	1000c2b0 <__umodsi3>
1000d0d0:	1004943a 	slli	r2,r2,16
1000d0d4:	843fffcc 	andi	r16,r16,65535
1000d0d8:	da000217 	ldw	r8,8(sp)
1000d0dc:	140eb03a 	or	r7,r2,r16
1000d0e0:	3c80062e 	bgeu	r7,r18,1000d0fc <__divdf3+0x5a0>
1000d0e4:	3dcf883a 	add	r7,r7,r23
1000d0e8:	b0bfffc4 	addi	r2,r22,-1
1000d0ec:	3dc0ae36 	bltu	r7,r23,1000d3a8 <__divdf3+0x84c>
1000d0f0:	3c80ad2e 	bgeu	r7,r18,1000d3a8 <__divdf3+0x84c>
1000d0f4:	b5bfff84 	addi	r22,r22,-2
1000d0f8:	3dcf883a 	add	r7,r7,r23
1000d0fc:	4010943a 	slli	r8,r8,16
1000d100:	3ca9c83a 	sub	r20,r7,r18
1000d104:	e00b883a 	mov	r5,fp
1000d108:	b224b03a 	or	r18,r22,r8
1000d10c:	91ffffcc 	andi	r7,r18,65535
1000d110:	3809883a 	mov	r4,r7
1000d114:	d9c00515 	stw	r7,20(sp)
1000d118:	000c2b80 	call	1000c2b8 <__mulsi3>
1000d11c:	d9c00517 	ldw	r7,20(sp)
1000d120:	9020d43a 	srli	r16,r18,16
1000d124:	980b883a 	mov	r5,r19
1000d128:	3809883a 	mov	r4,r7
1000d12c:	102d883a 	mov	r22,r2
1000d130:	000c2b80 	call	1000c2b8 <__mulsi3>
1000d134:	e00b883a 	mov	r5,fp
1000d138:	8009883a 	mov	r4,r16
1000d13c:	d8800515 	stw	r2,20(sp)
1000d140:	000c2b80 	call	1000c2b8 <__mulsi3>
1000d144:	8009883a 	mov	r4,r16
1000d148:	980b883a 	mov	r5,r19
1000d14c:	1039883a 	mov	fp,r2
1000d150:	000c2b80 	call	1000c2b8 <__mulsi3>
1000d154:	d9c00517 	ldw	r7,20(sp)
1000d158:	100b883a 	mov	r5,r2
1000d15c:	b004d43a 	srli	r2,r22,16
1000d160:	e1c9883a 	add	r4,fp,r7
1000d164:	2089883a 	add	r4,r4,r2
1000d168:	2700022e 	bgeu	r4,fp,1000d174 <__divdf3+0x618>
1000d16c:	00800074 	movhi	r2,1
1000d170:	288b883a 	add	r5,r5,r2
1000d174:	2004d43a 	srli	r2,r4,16
1000d178:	2008943a 	slli	r4,r4,16
1000d17c:	b5bfffcc 	andi	r22,r22,65535
1000d180:	288b883a 	add	r5,r5,r2
1000d184:	25ad883a 	add	r22,r4,r22
1000d188:	a140632e 	bgeu	r20,r5,1000d318 <__divdf3+0x7bc>
1000d18c:	a5e9883a 	add	r20,r20,r23
1000d190:	90bfffc4 	addi	r2,r18,-1
1000d194:	a5c0702e 	bgeu	r20,r23,1000d358 <__divdf3+0x7fc>
1000d198:	1025883a 	mov	r18,r2
1000d19c:	a1406126 	beq	r20,r5,1000d324 <__divdf3+0x7c8>
1000d1a0:	94800054 	ori	r18,r18,1
1000d1a4:	d8c00117 	ldw	r3,4(sp)
1000d1a8:	1880ffc4 	addi	r2,r3,1023
1000d1ac:	0080720e 	bge	zero,r2,1000d378 <__divdf3+0x81c>
1000d1b0:	90c001cc 	andi	r3,r18,7
1000d1b4:	18000726 	beq	r3,zero,1000d1d4 <__divdf3+0x678>
1000d1b8:	910003cc 	andi	r4,r18,15
1000d1bc:	00c00104 	movi	r3,4
1000d1c0:	20c00426 	beq	r4,r3,1000d1d4 <__divdf3+0x678>
1000d1c4:	90c7883a 	add	r3,r18,r3
1000d1c8:	1ca5803a 	cmpltu	r18,r3,r18
1000d1cc:	8ca3883a 	add	r17,r17,r18
1000d1d0:	1825883a 	mov	r18,r3
1000d1d4:	88c0402c 	andhi	r3,r17,256
1000d1d8:	18000526 	beq	r3,zero,1000d1f0 <__divdf3+0x694>
1000d1dc:	d8c00117 	ldw	r3,4(sp)
1000d1e0:	00bfc034 	movhi	r2,65280
1000d1e4:	10bfffc4 	addi	r2,r2,-1
1000d1e8:	88a2703a 	and	r17,r17,r2
1000d1ec:	18810004 	addi	r2,r3,1024
1000d1f0:	00c1ff84 	movi	r3,2046
1000d1f4:	18bebe16 	blt	r3,r2,1000ccf0 <__alt_data_end+0xf800ccf0>
1000d1f8:	8820977a 	slli	r16,r17,29
1000d1fc:	9024d0fa 	srli	r18,r18,3
1000d200:	8822927a 	slli	r17,r17,9
1000d204:	1081ffcc 	andi	r2,r2,2047
1000d208:	84a0b03a 	or	r16,r16,r18
1000d20c:	8826d33a 	srli	r19,r17,12
1000d210:	aa00004c 	andi	r8,r21,1
1000d214:	003eba06 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000d218:	9880022c 	andhi	r2,r19,8
1000d21c:	10000a26 	beq	r2,zero,1000d248 <__divdf3+0x6ec>
1000d220:	8880022c 	andhi	r2,r17,8
1000d224:	1000081e 	bne	r2,zero,1000d248 <__divdf3+0x6ec>
1000d228:	00800434 	movhi	r2,16
1000d22c:	10bfffc4 	addi	r2,r2,-1
1000d230:	8cc00234 	orhi	r19,r17,8
1000d234:	98a6703a 	and	r19,r19,r2
1000d238:	b811883a 	mov	r8,r23
1000d23c:	9021883a 	mov	r16,r18
1000d240:	0081ffc4 	movi	r2,2047
1000d244:	003eae06 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000d248:	00800434 	movhi	r2,16
1000d24c:	10bfffc4 	addi	r2,r2,-1
1000d250:	9cc00234 	orhi	r19,r19,8
1000d254:	98a6703a 	and	r19,r19,r2
1000d258:	b011883a 	mov	r8,r22
1000d25c:	0081ffc4 	movi	r2,2047
1000d260:	003ea706 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000d264:	147ff604 	addi	r17,r2,-40
1000d268:	3462983a 	sll	r17,r6,r17
1000d26c:	0025883a 	mov	r18,zero
1000d270:	003ee906 	br	1000ce18 <__alt_data_end+0xf800ce18>
1000d274:	3009883a 	mov	r4,r6
1000d278:	d9800215 	stw	r6,8(sp)
1000d27c:	da400315 	stw	r9,12(sp)
1000d280:	da800415 	stw	r10,16(sp)
1000d284:	000e9b80 	call	1000e9b8 <__clzsi2>
1000d288:	10800804 	addi	r2,r2,32
1000d28c:	da800417 	ldw	r10,16(sp)
1000d290:	da400317 	ldw	r9,12(sp)
1000d294:	d9800217 	ldw	r6,8(sp)
1000d298:	003ed606 	br	1000cdf4 <__alt_data_end+0xf800cdf4>
1000d29c:	14fff604 	addi	r19,r2,-40
1000d2a0:	94e6983a 	sll	r19,r18,r19
1000d2a4:	0021883a 	mov	r16,zero
1000d2a8:	003ebc06 	br	1000cd9c <__alt_data_end+0xf800cd9c>
1000d2ac:	d9800215 	stw	r6,8(sp)
1000d2b0:	d9c00515 	stw	r7,20(sp)
1000d2b4:	000e9b80 	call	1000e9b8 <__clzsi2>
1000d2b8:	10800804 	addi	r2,r2,32
1000d2bc:	d9c00517 	ldw	r7,20(sp)
1000d2c0:	d9800217 	ldw	r6,8(sp)
1000d2c4:	003eac06 	br	1000cd78 <__alt_data_end+0xf800cd78>
1000d2c8:	b400292e 	bgeu	r22,r16,1000d370 <__divdf3+0x814>
1000d2cc:	d8c00017 	ldw	r3,0(sp)
1000d2d0:	b0ed883a 	add	r22,r22,r3
1000d2d4:	b0c5803a 	cmpltu	r2,r22,r3
1000d2d8:	15c5883a 	add	r2,r2,r23
1000d2dc:	11cf883a 	add	r7,r2,r7
1000d2e0:	88bfffc4 	addi	r2,r17,-1
1000d2e4:	b9c0122e 	bgeu	r23,r7,1000d330 <__divdf3+0x7d4>
1000d2e8:	39405036 	bltu	r7,r5,1000d42c <__divdf3+0x8d0>
1000d2ec:	29c01e26 	beq	r5,r7,1000d368 <__divdf3+0x80c>
1000d2f0:	394bc83a 	sub	r5,r7,r5
1000d2f4:	1023883a 	mov	r17,r2
1000d2f8:	003f4b06 	br	1000d028 <__alt_data_end+0xf800d028>
1000d2fc:	943ee62e 	bgeu	r18,r16,1000ce98 <__alt_data_end+0xf800ce98>
1000d300:	980497fa 	slli	r2,r19,31
1000d304:	8006d07a 	srli	r3,r16,1
1000d308:	802c97fa 	slli	r22,r16,31
1000d30c:	9826d07a 	srli	r19,r19,1
1000d310:	18a0b03a 	or	r16,r3,r2
1000d314:	003ee406 	br	1000cea8 <__alt_data_end+0xf800cea8>
1000d318:	a17fa11e 	bne	r20,r5,1000d1a0 <__alt_data_end+0xf800d1a0>
1000d31c:	b03f9b1e 	bne	r22,zero,1000d18c <__alt_data_end+0xf800d18c>
1000d320:	d8000015 	stw	zero,0(sp)
1000d324:	d8c00017 	ldw	r3,0(sp)
1000d328:	1dbf9d1e 	bne	r3,r22,1000d1a0 <__alt_data_end+0xf800d1a0>
1000d32c:	003f9d06 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d330:	3dffef1e 	bne	r7,r23,1000d2f0 <__alt_data_end+0xf800d2f0>
1000d334:	d8c00017 	ldw	r3,0(sp)
1000d338:	b0ffeb2e 	bgeu	r22,r3,1000d2e8 <__alt_data_end+0xf800d2e8>
1000d33c:	b94bc83a 	sub	r5,r23,r5
1000d340:	1023883a 	mov	r17,r2
1000d344:	003f3806 	br	1000d028 <__alt_data_end+0xf800d028>
1000d348:	1023883a 	mov	r17,r2
1000d34c:	003f0906 	br	1000cf74 <__alt_data_end+0xf800cf74>
1000d350:	1039883a 	mov	fp,r2
1000d354:	003ef006 	br	1000cf18 <__alt_data_end+0xf800cf18>
1000d358:	a1403b36 	bltu	r20,r5,1000d448 <__divdf3+0x8ec>
1000d35c:	2d005826 	beq	r5,r20,1000d4c0 <__divdf3+0x964>
1000d360:	1025883a 	mov	r18,r2
1000d364:	003f8e06 	br	1000d1a0 <__alt_data_end+0xf800d1a0>
1000d368:	b4003036 	bltu	r22,r16,1000d42c <__divdf3+0x8d0>
1000d36c:	1023883a 	mov	r17,r2
1000d370:	000b883a 	mov	r5,zero
1000d374:	003f2c06 	br	1000d028 <__alt_data_end+0xf800d028>
1000d378:	d8c00117 	ldw	r3,4(sp)
1000d37c:	00bf0084 	movi	r2,-1022
1000d380:	10c5c83a 	sub	r2,r2,r3
1000d384:	00c00e04 	movi	r3,56
1000d388:	18800d0e 	bge	r3,r2,1000d3c0 <__divdf3+0x864>
1000d38c:	aa00004c 	andi	r8,r21,1
1000d390:	0005883a 	mov	r2,zero
1000d394:	0027883a 	mov	r19,zero
1000d398:	0021883a 	mov	r16,zero
1000d39c:	003e5806 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000d3a0:	04bfffc4 	movi	r18,-1
1000d3a4:	003f7f06 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d3a8:	102d883a 	mov	r22,r2
1000d3ac:	003f5306 	br	1000d0fc <__alt_data_end+0xf800d0fc>
1000d3b0:	1011883a 	mov	r8,r2
1000d3b4:	003f3706 	br	1000d094 <__alt_data_end+0xf800d094>
1000d3b8:	502b883a 	mov	r21,r10
1000d3bc:	003f7906 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d3c0:	00c007c4 	movi	r3,31
1000d3c4:	18802816 	blt	r3,r2,1000d468 <__divdf3+0x90c>
1000d3c8:	d9000117 	ldw	r4,4(sp)
1000d3cc:	908ad83a 	srl	r5,r18,r2
1000d3d0:	8884d83a 	srl	r2,r17,r2
1000d3d4:	20c10784 	addi	r3,r4,1054
1000d3d8:	88c8983a 	sll	r4,r17,r3
1000d3dc:	90c6983a 	sll	r3,r18,r3
1000d3e0:	2908b03a 	or	r4,r5,r4
1000d3e4:	1806c03a 	cmpne	r3,r3,zero
1000d3e8:	20c6b03a 	or	r3,r4,r3
1000d3ec:	190001cc 	andi	r4,r3,7
1000d3f0:	20000726 	beq	r4,zero,1000d410 <__divdf3+0x8b4>
1000d3f4:	194003cc 	andi	r5,r3,15
1000d3f8:	01000104 	movi	r4,4
1000d3fc:	29000426 	beq	r5,r4,1000d410 <__divdf3+0x8b4>
1000d400:	1909883a 	add	r4,r3,r4
1000d404:	20c7803a 	cmpltu	r3,r4,r3
1000d408:	10c5883a 	add	r2,r2,r3
1000d40c:	2007883a 	mov	r3,r4
1000d410:	1100202c 	andhi	r4,r2,128
1000d414:	20002226 	beq	r4,zero,1000d4a0 <__divdf3+0x944>
1000d418:	aa00004c 	andi	r8,r21,1
1000d41c:	00800044 	movi	r2,1
1000d420:	0027883a 	mov	r19,zero
1000d424:	0021883a 	mov	r16,zero
1000d428:	003e3506 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000d42c:	d8c00017 	ldw	r3,0(sp)
1000d430:	8c7fff84 	addi	r17,r17,-2
1000d434:	b0ed883a 	add	r22,r22,r3
1000d438:	b0c5803a 	cmpltu	r2,r22,r3
1000d43c:	15c5883a 	add	r2,r2,r23
1000d440:	11cf883a 	add	r7,r2,r7
1000d444:	003ef706 	br	1000d024 <__alt_data_end+0xf800d024>
1000d448:	d8c00017 	ldw	r3,0(sp)
1000d44c:	18c9883a 	add	r4,r3,r3
1000d450:	20c5803a 	cmpltu	r2,r4,r3
1000d454:	15c7883a 	add	r3,r2,r23
1000d458:	a0e9883a 	add	r20,r20,r3
1000d45c:	90bfff84 	addi	r2,r18,-2
1000d460:	d9000015 	stw	r4,0(sp)
1000d464:	003f4c06 	br	1000d198 <__alt_data_end+0xf800d198>
1000d468:	d9000117 	ldw	r4,4(sp)
1000d46c:	00fef884 	movi	r3,-1054
1000d470:	1907c83a 	sub	r3,r3,r4
1000d474:	01000804 	movi	r4,32
1000d478:	88c6d83a 	srl	r3,r17,r3
1000d47c:	11001426 	beq	r2,r4,1000d4d0 <__divdf3+0x974>
1000d480:	d9000117 	ldw	r4,4(sp)
1000d484:	20810f84 	addi	r2,r4,1086
1000d488:	8884983a 	sll	r2,r17,r2
1000d48c:	1484b03a 	or	r2,r2,r18
1000d490:	1004c03a 	cmpne	r2,r2,zero
1000d494:	10c6b03a 	or	r3,r2,r3
1000d498:	0005883a 	mov	r2,zero
1000d49c:	003fd306 	br	1000d3ec <__alt_data_end+0xf800d3ec>
1000d4a0:	1020977a 	slli	r16,r2,29
1000d4a4:	1806d0fa 	srli	r3,r3,3
1000d4a8:	1004927a 	slli	r2,r2,9
1000d4ac:	aa00004c 	andi	r8,r21,1
1000d4b0:	80e0b03a 	or	r16,r16,r3
1000d4b4:	1026d33a 	srli	r19,r2,12
1000d4b8:	0005883a 	mov	r2,zero
1000d4bc:	003e1006 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000d4c0:	d8c00017 	ldw	r3,0(sp)
1000d4c4:	1dbfe036 	bltu	r3,r22,1000d448 <__alt_data_end+0xf800d448>
1000d4c8:	1025883a 	mov	r18,r2
1000d4cc:	003f9506 	br	1000d324 <__alt_data_end+0xf800d324>
1000d4d0:	0005883a 	mov	r2,zero
1000d4d4:	003fed06 	br	1000d48c <__alt_data_end+0xf800d48c>
1000d4d8:	00800434 	movhi	r2,16
1000d4dc:	10bfffc4 	addi	r2,r2,-1
1000d4e0:	8cc00234 	orhi	r19,r17,8
1000d4e4:	98a6703a 	and	r19,r19,r2
1000d4e8:	5011883a 	mov	r8,r10
1000d4ec:	9021883a 	mov	r16,r18
1000d4f0:	0081ffc4 	movi	r2,2047
1000d4f4:	003e0206 	br	1000cd00 <__alt_data_end+0xf800cd00>

1000d4f8 <__eqdf2>:
1000d4f8:	2806d53a 	srli	r3,r5,20
1000d4fc:	3810d53a 	srli	r8,r7,20
1000d500:	00800434 	movhi	r2,16
1000d504:	10bfffc4 	addi	r2,r2,-1
1000d508:	18c1ffcc 	andi	r3,r3,2047
1000d50c:	0241ffc4 	movi	r9,2047
1000d510:	2894703a 	and	r10,r5,r2
1000d514:	4201ffcc 	andi	r8,r8,2047
1000d518:	3884703a 	and	r2,r7,r2
1000d51c:	280ad7fa 	srli	r5,r5,31
1000d520:	380ed7fa 	srli	r7,r7,31
1000d524:	1a400f26 	beq	r3,r9,1000d564 <__eqdf2+0x6c>
1000d528:	0241ffc4 	movi	r9,2047
1000d52c:	42400326 	beq	r8,r9,1000d53c <__eqdf2+0x44>
1000d530:	1a000526 	beq	r3,r8,1000d548 <__eqdf2+0x50>
1000d534:	00800044 	movi	r2,1
1000d538:	f800283a 	ret
1000d53c:	1192b03a 	or	r9,r2,r6
1000d540:	483ffc1e 	bne	r9,zero,1000d534 <__alt_data_end+0xf800d534>
1000d544:	1a3ffb1e 	bne	r3,r8,1000d534 <__alt_data_end+0xf800d534>
1000d548:	50bffa1e 	bne	r10,r2,1000d534 <__alt_data_end+0xf800d534>
1000d54c:	21bff91e 	bne	r4,r6,1000d534 <__alt_data_end+0xf800d534>
1000d550:	29c00826 	beq	r5,r7,1000d574 <__eqdf2+0x7c>
1000d554:	183ff71e 	bne	r3,zero,1000d534 <__alt_data_end+0xf800d534>
1000d558:	5104b03a 	or	r2,r10,r4
1000d55c:	1004c03a 	cmpne	r2,r2,zero
1000d560:	f800283a 	ret
1000d564:	5112b03a 	or	r9,r10,r4
1000d568:	483fef26 	beq	r9,zero,1000d528 <__alt_data_end+0xf800d528>
1000d56c:	00800044 	movi	r2,1
1000d570:	f800283a 	ret
1000d574:	0005883a 	mov	r2,zero
1000d578:	f800283a 	ret

1000d57c <__gedf2>:
1000d57c:	2804d53a 	srli	r2,r5,20
1000d580:	3810d53a 	srli	r8,r7,20
1000d584:	00c00434 	movhi	r3,16
1000d588:	18ffffc4 	addi	r3,r3,-1
1000d58c:	1081ffcc 	andi	r2,r2,2047
1000d590:	0241ffc4 	movi	r9,2047
1000d594:	28d4703a 	and	r10,r5,r3
1000d598:	4201ffcc 	andi	r8,r8,2047
1000d59c:	38c6703a 	and	r3,r7,r3
1000d5a0:	280ad7fa 	srli	r5,r5,31
1000d5a4:	380ed7fa 	srli	r7,r7,31
1000d5a8:	12401b26 	beq	r2,r9,1000d618 <__gedf2+0x9c>
1000d5ac:	0241ffc4 	movi	r9,2047
1000d5b0:	42400926 	beq	r8,r9,1000d5d8 <__gedf2+0x5c>
1000d5b4:	10000c1e 	bne	r2,zero,1000d5e8 <__gedf2+0x6c>
1000d5b8:	5112b03a 	or	r9,r10,r4
1000d5bc:	4813003a 	cmpeq	r9,r9,zero
1000d5c0:	4817883a 	mov	r11,r9
1000d5c4:	40000a26 	beq	r8,zero,1000d5f0 <__gedf2+0x74>
1000d5c8:	48001626 	beq	r9,zero,1000d624 <__gedf2+0xa8>
1000d5cc:	38000d1e 	bne	r7,zero,1000d604 <__gedf2+0x88>
1000d5d0:	00bfffc4 	movi	r2,-1
1000d5d4:	f800283a 	ret
1000d5d8:	1992b03a 	or	r9,r3,r6
1000d5dc:	483ff526 	beq	r9,zero,1000d5b4 <__alt_data_end+0xf800d5b4>
1000d5e0:	00bfff84 	movi	r2,-2
1000d5e4:	f800283a 	ret
1000d5e8:	40000e1e 	bne	r8,zero,1000d624 <__gedf2+0xa8>
1000d5ec:	0017883a 	mov	r11,zero
1000d5f0:	1992b03a 	or	r9,r3,r6
1000d5f4:	4813003a 	cmpeq	r9,r9,zero
1000d5f8:	5800041e 	bne	r11,zero,1000d60c <__gedf2+0x90>
1000d5fc:	48000926 	beq	r9,zero,1000d624 <__gedf2+0xa8>
1000d600:	283ff31e 	bne	r5,zero,1000d5d0 <__alt_data_end+0xf800d5d0>
1000d604:	00800044 	movi	r2,1
1000d608:	f800283a 	ret
1000d60c:	483fef26 	beq	r9,zero,1000d5cc <__alt_data_end+0xf800d5cc>
1000d610:	0005883a 	mov	r2,zero
1000d614:	f800283a 	ret
1000d618:	5112b03a 	or	r9,r10,r4
1000d61c:	483fe326 	beq	r9,zero,1000d5ac <__alt_data_end+0xf800d5ac>
1000d620:	003fef06 	br	1000d5e0 <__alt_data_end+0xf800d5e0>
1000d624:	29fff61e 	bne	r5,r7,1000d600 <__alt_data_end+0xf800d600>
1000d628:	40bff516 	blt	r8,r2,1000d600 <__alt_data_end+0xf800d600>
1000d62c:	12000316 	blt	r2,r8,1000d63c <__gedf2+0xc0>
1000d630:	1abff336 	bltu	r3,r10,1000d600 <__alt_data_end+0xf800d600>
1000d634:	50c00326 	beq	r10,r3,1000d644 <__gedf2+0xc8>
1000d638:	50fff52e 	bgeu	r10,r3,1000d610 <__alt_data_end+0xf800d610>
1000d63c:	283fe426 	beq	r5,zero,1000d5d0 <__alt_data_end+0xf800d5d0>
1000d640:	003ff006 	br	1000d604 <__alt_data_end+0xf800d604>
1000d644:	313fee36 	bltu	r6,r4,1000d600 <__alt_data_end+0xf800d600>
1000d648:	21bff12e 	bgeu	r4,r6,1000d610 <__alt_data_end+0xf800d610>
1000d64c:	283fe026 	beq	r5,zero,1000d5d0 <__alt_data_end+0xf800d5d0>
1000d650:	003fec06 	br	1000d604 <__alt_data_end+0xf800d604>

1000d654 <__ledf2>:
1000d654:	2806d53a 	srli	r3,r5,20
1000d658:	3810d53a 	srli	r8,r7,20
1000d65c:	00800434 	movhi	r2,16
1000d660:	10bfffc4 	addi	r2,r2,-1
1000d664:	18c1ffcc 	andi	r3,r3,2047
1000d668:	0241ffc4 	movi	r9,2047
1000d66c:	2894703a 	and	r10,r5,r2
1000d670:	4201ffcc 	andi	r8,r8,2047
1000d674:	3884703a 	and	r2,r7,r2
1000d678:	280ad7fa 	srli	r5,r5,31
1000d67c:	380ed7fa 	srli	r7,r7,31
1000d680:	1a402026 	beq	r3,r9,1000d704 <__ledf2+0xb0>
1000d684:	0241ffc4 	movi	r9,2047
1000d688:	42401726 	beq	r8,r9,1000d6e8 <__ledf2+0x94>
1000d68c:	18000b26 	beq	r3,zero,1000d6bc <__ledf2+0x68>
1000d690:	29403fcc 	andi	r5,r5,255
1000d694:	39c03fcc 	andi	r7,r7,255
1000d698:	40000f1e 	bne	r8,zero,1000d6d8 <__ledf2+0x84>
1000d69c:	0017883a 	mov	r11,zero
1000d6a0:	1192b03a 	or	r9,r2,r6
1000d6a4:	4813003a 	cmpeq	r9,r9,zero
1000d6a8:	58001326 	beq	r11,zero,1000d6f8 <__ledf2+0xa4>
1000d6ac:	48001e1e 	bne	r9,zero,1000d728 <__ledf2+0xd4>
1000d6b0:	38000b1e 	bne	r7,zero,1000d6e0 <__ledf2+0x8c>
1000d6b4:	00bfffc4 	movi	r2,-1
1000d6b8:	f800283a 	ret
1000d6bc:	5112b03a 	or	r9,r10,r4
1000d6c0:	4813003a 	cmpeq	r9,r9,zero
1000d6c4:	4817883a 	mov	r11,r9
1000d6c8:	29403fcc 	andi	r5,r5,255
1000d6cc:	39c03fcc 	andi	r7,r7,255
1000d6d0:	403ff326 	beq	r8,zero,1000d6a0 <__alt_data_end+0xf800d6a0>
1000d6d4:	483ff61e 	bne	r9,zero,1000d6b0 <__alt_data_end+0xf800d6b0>
1000d6d8:	29c00e26 	beq	r5,r7,1000d714 <__ledf2+0xc0>
1000d6dc:	283ff51e 	bne	r5,zero,1000d6b4 <__alt_data_end+0xf800d6b4>
1000d6e0:	00800044 	movi	r2,1
1000d6e4:	f800283a 	ret
1000d6e8:	1192b03a 	or	r9,r2,r6
1000d6ec:	483fe726 	beq	r9,zero,1000d68c <__alt_data_end+0xf800d68c>
1000d6f0:	00800084 	movi	r2,2
1000d6f4:	f800283a 	ret
1000d6f8:	483ff726 	beq	r9,zero,1000d6d8 <__alt_data_end+0xf800d6d8>
1000d6fc:	283ff826 	beq	r5,zero,1000d6e0 <__alt_data_end+0xf800d6e0>
1000d700:	003fec06 	br	1000d6b4 <__alt_data_end+0xf800d6b4>
1000d704:	5112b03a 	or	r9,r10,r4
1000d708:	483fde26 	beq	r9,zero,1000d684 <__alt_data_end+0xf800d684>
1000d70c:	00800084 	movi	r2,2
1000d710:	f800283a 	ret
1000d714:	40fff116 	blt	r8,r3,1000d6dc <__alt_data_end+0xf800d6dc>
1000d718:	1a000716 	blt	r3,r8,1000d738 <__ledf2+0xe4>
1000d71c:	12bfef36 	bltu	r2,r10,1000d6dc <__alt_data_end+0xf800d6dc>
1000d720:	50800326 	beq	r10,r2,1000d730 <__ledf2+0xdc>
1000d724:	50800436 	bltu	r10,r2,1000d738 <__ledf2+0xe4>
1000d728:	0005883a 	mov	r2,zero
1000d72c:	f800283a 	ret
1000d730:	313fea36 	bltu	r6,r4,1000d6dc <__alt_data_end+0xf800d6dc>
1000d734:	21bffc2e 	bgeu	r4,r6,1000d728 <__alt_data_end+0xf800d728>
1000d738:	283fde26 	beq	r5,zero,1000d6b4 <__alt_data_end+0xf800d6b4>
1000d73c:	003fe806 	br	1000d6e0 <__alt_data_end+0xf800d6e0>

1000d740 <__muldf3>:
1000d740:	deffee04 	addi	sp,sp,-72
1000d744:	dc400915 	stw	r17,36(sp)
1000d748:	2822d53a 	srli	r17,r5,20
1000d74c:	dc000815 	stw	r16,32(sp)
1000d750:	2820d7fa 	srli	r16,r5,31
1000d754:	df001015 	stw	fp,64(sp)
1000d758:	dd000c15 	stw	r20,48(sp)
1000d75c:	dcc00b15 	stw	r19,44(sp)
1000d760:	dfc01115 	stw	ra,68(sp)
1000d764:	04c00434 	movhi	r19,16
1000d768:	9cffffc4 	addi	r19,r19,-1
1000d76c:	ddc00f15 	stw	r23,60(sp)
1000d770:	dd800e15 	stw	r22,56(sp)
1000d774:	dd400d15 	stw	r21,52(sp)
1000d778:	dc800a15 	stw	r18,40(sp)
1000d77c:	8c41ffcc 	andi	r17,r17,2047
1000d780:	2029883a 	mov	r20,r4
1000d784:	2ce6703a 	and	r19,r5,r19
1000d788:	8039883a 	mov	fp,r16
1000d78c:	82003fcc 	andi	r8,r16,255
1000d790:	88005d26 	beq	r17,zero,1000d908 <__muldf3+0x1c8>
1000d794:	0081ffc4 	movi	r2,2047
1000d798:	202f883a 	mov	r23,r4
1000d79c:	88803326 	beq	r17,r2,1000d86c <__muldf3+0x12c>
1000d7a0:	98800434 	orhi	r2,r19,16
1000d7a4:	100490fa 	slli	r2,r2,3
1000d7a8:	2026d77a 	srli	r19,r4,29
1000d7ac:	202e90fa 	slli	r23,r4,3
1000d7b0:	8c7f0044 	addi	r17,r17,-1023
1000d7b4:	14e6b03a 	or	r19,r2,r19
1000d7b8:	002d883a 	mov	r22,zero
1000d7bc:	000b883a 	mov	r5,zero
1000d7c0:	3804d53a 	srli	r2,r7,20
1000d7c4:	3828d7fa 	srli	r20,r7,31
1000d7c8:	04800434 	movhi	r18,16
1000d7cc:	94bfffc4 	addi	r18,r18,-1
1000d7d0:	1081ffcc 	andi	r2,r2,2047
1000d7d4:	302b883a 	mov	r21,r6
1000d7d8:	3ca4703a 	and	r18,r7,r18
1000d7dc:	a2403fcc 	andi	r9,r20,255
1000d7e0:	10006826 	beq	r2,zero,1000d984 <__muldf3+0x244>
1000d7e4:	00c1ffc4 	movi	r3,2047
1000d7e8:	10c06026 	beq	r2,r3,1000d96c <__muldf3+0x22c>
1000d7ec:	90c00434 	orhi	r3,r18,16
1000d7f0:	180690fa 	slli	r3,r3,3
1000d7f4:	3024d77a 	srli	r18,r6,29
1000d7f8:	302a90fa 	slli	r21,r6,3
1000d7fc:	10bf0044 	addi	r2,r2,-1023
1000d800:	1ca4b03a 	or	r18,r3,r18
1000d804:	0007883a 	mov	r3,zero
1000d808:	1d88b03a 	or	r4,r3,r22
1000d80c:	2109883a 	add	r4,r4,r4
1000d810:	2109883a 	add	r4,r4,r4
1000d814:	01840074 	movhi	r6,4097
1000d818:	31b60b04 	addi	r6,r6,-10196
1000d81c:	2189883a 	add	r4,r4,r6
1000d820:	21000017 	ldw	r4,0(r4)
1000d824:	852cf03a 	xor	r22,r16,r20
1000d828:	2000683a 	jmp	r4
1000d82c:	1000da74 	orhi	zero,r2,873
1000d830:	1000da64 	muli	zero,r2,873
1000d834:	1000da64 	muli	zero,r2,873
1000d838:	1000da50 	cmplti	zero,r2,873
1000d83c:	1000d88c 	andi	zero,r2,866
1000d840:	1000d88c 	andi	zero,r2,866
1000d844:	1000da38 	rdprs	zero,r2,872
1000d848:	1000da50 	cmplti	zero,r2,873
1000d84c:	1000d88c 	andi	zero,r2,866
1000d850:	1000da38 	rdprs	zero,r2,872
1000d854:	1000d88c 	andi	zero,r2,866
1000d858:	1000da50 	cmplti	zero,r2,873
1000d85c:	1000d888 	cmpgei	zero,r2,866
1000d860:	1000d888 	cmpgei	zero,r2,866
1000d864:	1000d888 	cmpgei	zero,r2,866
1000d868:	1000dd8c 	andi	zero,r2,886
1000d86c:	9904b03a 	or	r2,r19,r4
1000d870:	10006e1e 	bne	r2,zero,1000da2c <__muldf3+0x2ec>
1000d874:	05800204 	movi	r22,8
1000d878:	0027883a 	mov	r19,zero
1000d87c:	002f883a 	mov	r23,zero
1000d880:	01400084 	movi	r5,2
1000d884:	003fce06 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000d888:	402d883a 	mov	r22,r8
1000d88c:	00800084 	movi	r2,2
1000d890:	28805626 	beq	r5,r2,1000d9ec <__muldf3+0x2ac>
1000d894:	008000c4 	movi	r2,3
1000d898:	2881a226 	beq	r5,r2,1000df24 <__muldf3+0x7e4>
1000d89c:	00800044 	movi	r2,1
1000d8a0:	28811d1e 	bne	r5,r2,1000dd18 <__muldf3+0x5d8>
1000d8a4:	b039883a 	mov	fp,r22
1000d8a8:	0005883a 	mov	r2,zero
1000d8ac:	0027883a 	mov	r19,zero
1000d8b0:	002f883a 	mov	r23,zero
1000d8b4:	1004953a 	slli	r2,r2,20
1000d8b8:	e7003fcc 	andi	fp,fp,255
1000d8bc:	e03897fa 	slli	fp,fp,31
1000d8c0:	00c00434 	movhi	r3,16
1000d8c4:	18ffffc4 	addi	r3,r3,-1
1000d8c8:	98e6703a 	and	r19,r19,r3
1000d8cc:	9886b03a 	or	r3,r19,r2
1000d8d0:	1f06b03a 	or	r3,r3,fp
1000d8d4:	b805883a 	mov	r2,r23
1000d8d8:	dfc01117 	ldw	ra,68(sp)
1000d8dc:	df001017 	ldw	fp,64(sp)
1000d8e0:	ddc00f17 	ldw	r23,60(sp)
1000d8e4:	dd800e17 	ldw	r22,56(sp)
1000d8e8:	dd400d17 	ldw	r21,52(sp)
1000d8ec:	dd000c17 	ldw	r20,48(sp)
1000d8f0:	dcc00b17 	ldw	r19,44(sp)
1000d8f4:	dc800a17 	ldw	r18,40(sp)
1000d8f8:	dc400917 	ldw	r17,36(sp)
1000d8fc:	dc000817 	ldw	r16,32(sp)
1000d900:	dec01204 	addi	sp,sp,72
1000d904:	f800283a 	ret
1000d908:	9904b03a 	or	r2,r19,r4
1000d90c:	10004226 	beq	r2,zero,1000da18 <__muldf3+0x2d8>
1000d910:	98013426 	beq	r19,zero,1000dde4 <__muldf3+0x6a4>
1000d914:	9809883a 	mov	r4,r19
1000d918:	d9800515 	stw	r6,20(sp)
1000d91c:	d9c00415 	stw	r7,16(sp)
1000d920:	da000615 	stw	r8,24(sp)
1000d924:	000e9b80 	call	1000e9b8 <__clzsi2>
1000d928:	d9800517 	ldw	r6,20(sp)
1000d92c:	d9c00417 	ldw	r7,16(sp)
1000d930:	da000617 	ldw	r8,24(sp)
1000d934:	00c009c4 	movi	r3,39
1000d938:	18812616 	blt	r3,r2,1000ddd4 <__muldf3+0x694>
1000d93c:	00c00a04 	movi	r3,40
1000d940:	15fffe04 	addi	r23,r2,-8
1000d944:	1887c83a 	sub	r3,r3,r2
1000d948:	9de6983a 	sll	r19,r19,r23
1000d94c:	a0c6d83a 	srl	r3,r20,r3
1000d950:	a5ee983a 	sll	r23,r20,r23
1000d954:	1ce6b03a 	or	r19,r3,r19
1000d958:	047f0344 	movi	r17,-1011
1000d95c:	88a3c83a 	sub	r17,r17,r2
1000d960:	002d883a 	mov	r22,zero
1000d964:	000b883a 	mov	r5,zero
1000d968:	003f9506 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000d96c:	9186b03a 	or	r3,r18,r6
1000d970:	1800271e 	bne	r3,zero,1000da10 <__muldf3+0x2d0>
1000d974:	0025883a 	mov	r18,zero
1000d978:	002b883a 	mov	r21,zero
1000d97c:	00c00084 	movi	r3,2
1000d980:	003fa106 	br	1000d808 <__alt_data_end+0xf800d808>
1000d984:	9186b03a 	or	r3,r18,r6
1000d988:	18001d26 	beq	r3,zero,1000da00 <__muldf3+0x2c0>
1000d98c:	90012226 	beq	r18,zero,1000de18 <__muldf3+0x6d8>
1000d990:	9009883a 	mov	r4,r18
1000d994:	d9400415 	stw	r5,16(sp)
1000d998:	d9800515 	stw	r6,20(sp)
1000d99c:	da000615 	stw	r8,24(sp)
1000d9a0:	da400715 	stw	r9,28(sp)
1000d9a4:	000e9b80 	call	1000e9b8 <__clzsi2>
1000d9a8:	d9400417 	ldw	r5,16(sp)
1000d9ac:	d9800517 	ldw	r6,20(sp)
1000d9b0:	da000617 	ldw	r8,24(sp)
1000d9b4:	da400717 	ldw	r9,28(sp)
1000d9b8:	00c009c4 	movi	r3,39
1000d9bc:	18811216 	blt	r3,r2,1000de08 <__muldf3+0x6c8>
1000d9c0:	01c00a04 	movi	r7,40
1000d9c4:	157ffe04 	addi	r21,r2,-8
1000d9c8:	388fc83a 	sub	r7,r7,r2
1000d9cc:	9564983a 	sll	r18,r18,r21
1000d9d0:	31ced83a 	srl	r7,r6,r7
1000d9d4:	356a983a 	sll	r21,r6,r21
1000d9d8:	3ca4b03a 	or	r18,r7,r18
1000d9dc:	00ff0344 	movi	r3,-1011
1000d9e0:	1885c83a 	sub	r2,r3,r2
1000d9e4:	0007883a 	mov	r3,zero
1000d9e8:	003f8706 	br	1000d808 <__alt_data_end+0xf800d808>
1000d9ec:	b039883a 	mov	fp,r22
1000d9f0:	0081ffc4 	movi	r2,2047
1000d9f4:	0027883a 	mov	r19,zero
1000d9f8:	002f883a 	mov	r23,zero
1000d9fc:	003fad06 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000da00:	0025883a 	mov	r18,zero
1000da04:	002b883a 	mov	r21,zero
1000da08:	00c00044 	movi	r3,1
1000da0c:	003f7e06 	br	1000d808 <__alt_data_end+0xf800d808>
1000da10:	00c000c4 	movi	r3,3
1000da14:	003f7c06 	br	1000d808 <__alt_data_end+0xf800d808>
1000da18:	05800104 	movi	r22,4
1000da1c:	0027883a 	mov	r19,zero
1000da20:	002f883a 	mov	r23,zero
1000da24:	01400044 	movi	r5,1
1000da28:	003f6506 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000da2c:	05800304 	movi	r22,12
1000da30:	014000c4 	movi	r5,3
1000da34:	003f6206 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000da38:	0039883a 	mov	fp,zero
1000da3c:	04c00434 	movhi	r19,16
1000da40:	9cffffc4 	addi	r19,r19,-1
1000da44:	05ffffc4 	movi	r23,-1
1000da48:	0081ffc4 	movi	r2,2047
1000da4c:	003f9906 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000da50:	9027883a 	mov	r19,r18
1000da54:	a82f883a 	mov	r23,r21
1000da58:	482d883a 	mov	r22,r9
1000da5c:	180b883a 	mov	r5,r3
1000da60:	003f8a06 	br	1000d88c <__alt_data_end+0xf800d88c>
1000da64:	9027883a 	mov	r19,r18
1000da68:	a82f883a 	mov	r23,r21
1000da6c:	180b883a 	mov	r5,r3
1000da70:	003f8606 	br	1000d88c <__alt_data_end+0xf800d88c>
1000da74:	a828d43a 	srli	r20,r21,16
1000da78:	b820d43a 	srli	r16,r23,16
1000da7c:	ad7fffcc 	andi	r21,r21,65535
1000da80:	bdffffcc 	andi	r23,r23,65535
1000da84:	8885883a 	add	r2,r17,r2
1000da88:	a809883a 	mov	r4,r21
1000da8c:	b80b883a 	mov	r5,r23
1000da90:	d8800015 	stw	r2,0(sp)
1000da94:	000c2b80 	call	1000c2b8 <__mulsi3>
1000da98:	a009883a 	mov	r4,r20
1000da9c:	b80b883a 	mov	r5,r23
1000daa0:	d8800415 	stw	r2,16(sp)
1000daa4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000daa8:	a809883a 	mov	r4,r21
1000daac:	800b883a 	mov	r5,r16
1000dab0:	d8800615 	stw	r2,24(sp)
1000dab4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dab8:	a009883a 	mov	r4,r20
1000dabc:	800b883a 	mov	r5,r16
1000dac0:	1023883a 	mov	r17,r2
1000dac4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dac8:	d9c00417 	ldw	r7,16(sp)
1000dacc:	da000617 	ldw	r8,24(sp)
1000dad0:	1039883a 	mov	fp,r2
1000dad4:	3804d43a 	srli	r2,r7,16
1000dad8:	8a07883a 	add	r3,r17,r8
1000dadc:	1887883a 	add	r3,r3,r2
1000dae0:	1c40022e 	bgeu	r3,r17,1000daec <__muldf3+0x3ac>
1000dae4:	00800074 	movhi	r2,1
1000dae8:	e0b9883a 	add	fp,fp,r2
1000daec:	1804943a 	slli	r2,r3,16
1000daf0:	1806d43a 	srli	r3,r3,16
1000daf4:	9022d43a 	srli	r17,r18,16
1000daf8:	39ffffcc 	andi	r7,r7,65535
1000dafc:	94bfffcc 	andi	r18,r18,65535
1000db00:	11cf883a 	add	r7,r2,r7
1000db04:	b80b883a 	mov	r5,r23
1000db08:	9009883a 	mov	r4,r18
1000db0c:	d8c00215 	stw	r3,8(sp)
1000db10:	d9c00315 	stw	r7,12(sp)
1000db14:	000c2b80 	call	1000c2b8 <__mulsi3>
1000db18:	b80b883a 	mov	r5,r23
1000db1c:	8809883a 	mov	r4,r17
1000db20:	d8800415 	stw	r2,16(sp)
1000db24:	000c2b80 	call	1000c2b8 <__mulsi3>
1000db28:	9009883a 	mov	r4,r18
1000db2c:	800b883a 	mov	r5,r16
1000db30:	d8800715 	stw	r2,28(sp)
1000db34:	000c2b80 	call	1000c2b8 <__mulsi3>
1000db38:	8809883a 	mov	r4,r17
1000db3c:	800b883a 	mov	r5,r16
1000db40:	102f883a 	mov	r23,r2
1000db44:	000c2b80 	call	1000c2b8 <__mulsi3>
1000db48:	d9c00417 	ldw	r7,16(sp)
1000db4c:	da400717 	ldw	r9,28(sp)
1000db50:	1011883a 	mov	r8,r2
1000db54:	3804d43a 	srli	r2,r7,16
1000db58:	ba47883a 	add	r3,r23,r9
1000db5c:	1887883a 	add	r3,r3,r2
1000db60:	1dc0022e 	bgeu	r3,r23,1000db6c <__muldf3+0x42c>
1000db64:	00800074 	movhi	r2,1
1000db68:	4091883a 	add	r8,r8,r2
1000db6c:	1804d43a 	srli	r2,r3,16
1000db70:	182e943a 	slli	r23,r3,16
1000db74:	9820d43a 	srli	r16,r19,16
1000db78:	9cffffcc 	andi	r19,r19,65535
1000db7c:	39ffffcc 	andi	r7,r7,65535
1000db80:	4085883a 	add	r2,r8,r2
1000db84:	a809883a 	mov	r4,r21
1000db88:	980b883a 	mov	r5,r19
1000db8c:	b9ef883a 	add	r23,r23,r7
1000db90:	d8800115 	stw	r2,4(sp)
1000db94:	000c2b80 	call	1000c2b8 <__mulsi3>
1000db98:	a009883a 	mov	r4,r20
1000db9c:	980b883a 	mov	r5,r19
1000dba0:	d8800415 	stw	r2,16(sp)
1000dba4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dba8:	a809883a 	mov	r4,r21
1000dbac:	800b883a 	mov	r5,r16
1000dbb0:	d8800715 	stw	r2,28(sp)
1000dbb4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dbb8:	a009883a 	mov	r4,r20
1000dbbc:	800b883a 	mov	r5,r16
1000dbc0:	102b883a 	mov	r21,r2
1000dbc4:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dbc8:	d9c00417 	ldw	r7,16(sp)
1000dbcc:	da400717 	ldw	r9,28(sp)
1000dbd0:	1011883a 	mov	r8,r2
1000dbd4:	3804d43a 	srli	r2,r7,16
1000dbd8:	aa47883a 	add	r3,r21,r9
1000dbdc:	1887883a 	add	r3,r3,r2
1000dbe0:	1d40022e 	bgeu	r3,r21,1000dbec <__muldf3+0x4ac>
1000dbe4:	00800074 	movhi	r2,1
1000dbe8:	4091883a 	add	r8,r8,r2
1000dbec:	1828d43a 	srli	r20,r3,16
1000dbf0:	1806943a 	slli	r3,r3,16
1000dbf4:	39ffffcc 	andi	r7,r7,65535
1000dbf8:	9009883a 	mov	r4,r18
1000dbfc:	980b883a 	mov	r5,r19
1000dc00:	19eb883a 	add	r21,r3,r7
1000dc04:	4529883a 	add	r20,r8,r20
1000dc08:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dc0c:	980b883a 	mov	r5,r19
1000dc10:	8809883a 	mov	r4,r17
1000dc14:	d8800415 	stw	r2,16(sp)
1000dc18:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dc1c:	9009883a 	mov	r4,r18
1000dc20:	800b883a 	mov	r5,r16
1000dc24:	1027883a 	mov	r19,r2
1000dc28:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dc2c:	8809883a 	mov	r4,r17
1000dc30:	800b883a 	mov	r5,r16
1000dc34:	1025883a 	mov	r18,r2
1000dc38:	000c2b80 	call	1000c2b8 <__mulsi3>
1000dc3c:	d9c00417 	ldw	r7,16(sp)
1000dc40:	1011883a 	mov	r8,r2
1000dc44:	94c7883a 	add	r3,r18,r19
1000dc48:	3804d43a 	srli	r2,r7,16
1000dc4c:	1887883a 	add	r3,r3,r2
1000dc50:	1c80022e 	bgeu	r3,r18,1000dc5c <__muldf3+0x51c>
1000dc54:	00800074 	movhi	r2,1
1000dc58:	4091883a 	add	r8,r8,r2
1000dc5c:	1804943a 	slli	r2,r3,16
1000dc60:	d9400217 	ldw	r5,8(sp)
1000dc64:	39ffffcc 	andi	r7,r7,65535
1000dc68:	11cf883a 	add	r7,r2,r7
1000dc6c:	d8800117 	ldw	r2,4(sp)
1000dc70:	b949883a 	add	r4,r23,r5
1000dc74:	2739883a 	add	fp,r4,fp
1000dc78:	e5ef803a 	cmpltu	r23,fp,r23
1000dc7c:	388f883a 	add	r7,r7,r2
1000dc80:	3dcb883a 	add	r5,r7,r23
1000dc84:	a149883a 	add	r4,r20,r5
1000dc88:	2def803a 	cmpltu	r23,r5,r23
1000dc8c:	d9400117 	ldw	r5,4(sp)
1000dc90:	e579883a 	add	fp,fp,r21
1000dc94:	e56b803a 	cmpltu	r21,fp,r21
1000dc98:	1804d43a 	srli	r2,r3,16
1000dc9c:	394f803a 	cmpltu	r7,r7,r5
1000dca0:	2547883a 	add	r3,r4,r21
1000dca4:	b9e6b03a 	or	r19,r23,r7
1000dca8:	1d6b803a 	cmpltu	r21,r3,r21
1000dcac:	2529803a 	cmpltu	r20,r4,r20
1000dcb0:	98a7883a 	add	r19,r19,r2
1000dcb4:	ad2ab03a 	or	r21,r21,r20
1000dcb8:	9d67883a 	add	r19,r19,r21
1000dcbc:	e02e927a 	slli	r23,fp,9
1000dcc0:	9a27883a 	add	r19,r19,r8
1000dcc4:	d9000317 	ldw	r4,12(sp)
1000dcc8:	1804d5fa 	srli	r2,r3,23
1000dccc:	9826927a 	slli	r19,r19,9
1000dcd0:	e038d5fa 	srli	fp,fp,23
1000dcd4:	b92eb03a 	or	r23,r23,r4
1000dcd8:	1806927a 	slli	r3,r3,9
1000dcdc:	98a6b03a 	or	r19,r19,r2
1000dce0:	b82ec03a 	cmpne	r23,r23,zero
1000dce4:	bf2eb03a 	or	r23,r23,fp
1000dce8:	9880402c 	andhi	r2,r19,256
1000dcec:	b8eeb03a 	or	r23,r23,r3
1000dcf0:	10000926 	beq	r2,zero,1000dd18 <__muldf3+0x5d8>
1000dcf4:	b806d07a 	srli	r3,r23,1
1000dcf8:	bdc0004c 	andi	r23,r23,1
1000dcfc:	980497fa 	slli	r2,r19,31
1000dd00:	b8eeb03a 	or	r23,r23,r3
1000dd04:	d8c00017 	ldw	r3,0(sp)
1000dd08:	9826d07a 	srli	r19,r19,1
1000dd0c:	b8aeb03a 	or	r23,r23,r2
1000dd10:	18c00044 	addi	r3,r3,1
1000dd14:	d8c00015 	stw	r3,0(sp)
1000dd18:	d8c00017 	ldw	r3,0(sp)
1000dd1c:	1880ffc4 	addi	r2,r3,1023
1000dd20:	0080490e 	bge	zero,r2,1000de48 <__muldf3+0x708>
1000dd24:	b8c001cc 	andi	r3,r23,7
1000dd28:	18000726 	beq	r3,zero,1000dd48 <__muldf3+0x608>
1000dd2c:	b90003cc 	andi	r4,r23,15
1000dd30:	00c00104 	movi	r3,4
1000dd34:	20c00426 	beq	r4,r3,1000dd48 <__muldf3+0x608>
1000dd38:	b8c7883a 	add	r3,r23,r3
1000dd3c:	1def803a 	cmpltu	r23,r3,r23
1000dd40:	9de7883a 	add	r19,r19,r23
1000dd44:	182f883a 	mov	r23,r3
1000dd48:	98c0402c 	andhi	r3,r19,256
1000dd4c:	18000526 	beq	r3,zero,1000dd64 <__muldf3+0x624>
1000dd50:	d8c00017 	ldw	r3,0(sp)
1000dd54:	00bfc034 	movhi	r2,65280
1000dd58:	10bfffc4 	addi	r2,r2,-1
1000dd5c:	98a6703a 	and	r19,r19,r2
1000dd60:	18810004 	addi	r2,r3,1024
1000dd64:	00c1ff84 	movi	r3,2046
1000dd68:	18bf2016 	blt	r3,r2,1000d9ec <__alt_data_end+0xf800d9ec>
1000dd6c:	9806977a 	slli	r3,r19,29
1000dd70:	b82ed0fa 	srli	r23,r23,3
1000dd74:	9826927a 	slli	r19,r19,9
1000dd78:	1081ffcc 	andi	r2,r2,2047
1000dd7c:	1deeb03a 	or	r23,r3,r23
1000dd80:	9826d33a 	srli	r19,r19,12
1000dd84:	b039883a 	mov	fp,r22
1000dd88:	003eca06 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000dd8c:	9880022c 	andhi	r2,r19,8
1000dd90:	10000a26 	beq	r2,zero,1000ddbc <__muldf3+0x67c>
1000dd94:	9080022c 	andhi	r2,r18,8
1000dd98:	1000081e 	bne	r2,zero,1000ddbc <__muldf3+0x67c>
1000dd9c:	00800434 	movhi	r2,16
1000dda0:	10bfffc4 	addi	r2,r2,-1
1000dda4:	94c00234 	orhi	r19,r18,8
1000dda8:	98a6703a 	and	r19,r19,r2
1000ddac:	a039883a 	mov	fp,r20
1000ddb0:	a82f883a 	mov	r23,r21
1000ddb4:	0081ffc4 	movi	r2,2047
1000ddb8:	003ebe06 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000ddbc:	00800434 	movhi	r2,16
1000ddc0:	10bfffc4 	addi	r2,r2,-1
1000ddc4:	9cc00234 	orhi	r19,r19,8
1000ddc8:	98a6703a 	and	r19,r19,r2
1000ddcc:	0081ffc4 	movi	r2,2047
1000ddd0:	003eb806 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000ddd4:	14fff604 	addi	r19,r2,-40
1000ddd8:	a4e6983a 	sll	r19,r20,r19
1000dddc:	002f883a 	mov	r23,zero
1000dde0:	003edd06 	br	1000d958 <__alt_data_end+0xf800d958>
1000dde4:	d9800515 	stw	r6,20(sp)
1000dde8:	d9c00415 	stw	r7,16(sp)
1000ddec:	da000615 	stw	r8,24(sp)
1000ddf0:	000e9b80 	call	1000e9b8 <__clzsi2>
1000ddf4:	10800804 	addi	r2,r2,32
1000ddf8:	da000617 	ldw	r8,24(sp)
1000ddfc:	d9c00417 	ldw	r7,16(sp)
1000de00:	d9800517 	ldw	r6,20(sp)
1000de04:	003ecb06 	br	1000d934 <__alt_data_end+0xf800d934>
1000de08:	14bff604 	addi	r18,r2,-40
1000de0c:	34a4983a 	sll	r18,r6,r18
1000de10:	002b883a 	mov	r21,zero
1000de14:	003ef106 	br	1000d9dc <__alt_data_end+0xf800d9dc>
1000de18:	3009883a 	mov	r4,r6
1000de1c:	d9400415 	stw	r5,16(sp)
1000de20:	d9800515 	stw	r6,20(sp)
1000de24:	da000615 	stw	r8,24(sp)
1000de28:	da400715 	stw	r9,28(sp)
1000de2c:	000e9b80 	call	1000e9b8 <__clzsi2>
1000de30:	10800804 	addi	r2,r2,32
1000de34:	da400717 	ldw	r9,28(sp)
1000de38:	da000617 	ldw	r8,24(sp)
1000de3c:	d9800517 	ldw	r6,20(sp)
1000de40:	d9400417 	ldw	r5,16(sp)
1000de44:	003edc06 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000de48:	d8c00017 	ldw	r3,0(sp)
1000de4c:	00bf0084 	movi	r2,-1022
1000de50:	10c5c83a 	sub	r2,r2,r3
1000de54:	00c00e04 	movi	r3,56
1000de58:	18be9216 	blt	r3,r2,1000d8a4 <__alt_data_end+0xf800d8a4>
1000de5c:	00c007c4 	movi	r3,31
1000de60:	18801916 	blt	r3,r2,1000dec8 <__muldf3+0x788>
1000de64:	d9000017 	ldw	r4,0(sp)
1000de68:	b88ad83a 	srl	r5,r23,r2
1000de6c:	9884d83a 	srl	r2,r19,r2
1000de70:	20c10784 	addi	r3,r4,1054
1000de74:	98c8983a 	sll	r4,r19,r3
1000de78:	b8c6983a 	sll	r3,r23,r3
1000de7c:	2908b03a 	or	r4,r5,r4
1000de80:	1806c03a 	cmpne	r3,r3,zero
1000de84:	20c6b03a 	or	r3,r4,r3
1000de88:	190001cc 	andi	r4,r3,7
1000de8c:	20000726 	beq	r4,zero,1000deac <__muldf3+0x76c>
1000de90:	194003cc 	andi	r5,r3,15
1000de94:	01000104 	movi	r4,4
1000de98:	29000426 	beq	r5,r4,1000deac <__muldf3+0x76c>
1000de9c:	1909883a 	add	r4,r3,r4
1000dea0:	20c7803a 	cmpltu	r3,r4,r3
1000dea4:	10c5883a 	add	r2,r2,r3
1000dea8:	2007883a 	mov	r3,r4
1000deac:	1100202c 	andhi	r4,r2,128
1000deb0:	20001226 	beq	r4,zero,1000defc <__muldf3+0x7bc>
1000deb4:	b039883a 	mov	fp,r22
1000deb8:	00800044 	movi	r2,1
1000debc:	0027883a 	mov	r19,zero
1000dec0:	002f883a 	mov	r23,zero
1000dec4:	003e7b06 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000dec8:	d9400017 	ldw	r5,0(sp)
1000decc:	00fef884 	movi	r3,-1054
1000ded0:	01000804 	movi	r4,32
1000ded4:	1947c83a 	sub	r3,r3,r5
1000ded8:	98c6d83a 	srl	r3,r19,r3
1000dedc:	11000f26 	beq	r2,r4,1000df1c <__muldf3+0x7dc>
1000dee0:	28810f84 	addi	r2,r5,1086
1000dee4:	9884983a 	sll	r2,r19,r2
1000dee8:	15c4b03a 	or	r2,r2,r23
1000deec:	1004c03a 	cmpne	r2,r2,zero
1000def0:	10c6b03a 	or	r3,r2,r3
1000def4:	0005883a 	mov	r2,zero
1000def8:	003fe306 	br	1000de88 <__alt_data_end+0xf800de88>
1000defc:	102e977a 	slli	r23,r2,29
1000df00:	1806d0fa 	srli	r3,r3,3
1000df04:	1004927a 	slli	r2,r2,9
1000df08:	b039883a 	mov	fp,r22
1000df0c:	b8eeb03a 	or	r23,r23,r3
1000df10:	1026d33a 	srli	r19,r2,12
1000df14:	0005883a 	mov	r2,zero
1000df18:	003e6606 	br	1000d8b4 <__alt_data_end+0xf800d8b4>
1000df1c:	0005883a 	mov	r2,zero
1000df20:	003ff106 	br	1000dee8 <__alt_data_end+0xf800dee8>
1000df24:	00800434 	movhi	r2,16
1000df28:	10bfffc4 	addi	r2,r2,-1
1000df2c:	9cc00234 	orhi	r19,r19,8
1000df30:	98a6703a 	and	r19,r19,r2
1000df34:	b039883a 	mov	fp,r22
1000df38:	0081ffc4 	movi	r2,2047
1000df3c:	003e5d06 	br	1000d8b4 <__alt_data_end+0xf800d8b4>

1000df40 <__subdf3>:
1000df40:	02000434 	movhi	r8,16
1000df44:	423fffc4 	addi	r8,r8,-1
1000df48:	defffb04 	addi	sp,sp,-20
1000df4c:	2a06703a 	and	r3,r5,r8
1000df50:	3a10703a 	and	r8,r7,r8
1000df54:	3804d53a 	srli	r2,r7,20
1000df58:	dc800215 	stw	r18,8(sp)
1000df5c:	dc400115 	stw	r17,4(sp)
1000df60:	2824d7fa 	srli	r18,r5,31
1000df64:	2822d53a 	srli	r17,r5,20
1000df68:	401090fa 	slli	r8,r8,3
1000df6c:	180a90fa 	slli	r5,r3,3
1000df70:	3006d77a 	srli	r3,r6,29
1000df74:	2014d77a 	srli	r10,r4,29
1000df78:	dc000015 	stw	r16,0(sp)
1000df7c:	40d0b03a 	or	r8,r8,r3
1000df80:	dfc00415 	stw	ra,16(sp)
1000df84:	dcc00315 	stw	r19,12(sp)
1000df88:	1081ffcc 	andi	r2,r2,2047
1000df8c:	00c1ffc4 	movi	r3,2047
1000df90:	9013883a 	mov	r9,r18
1000df94:	8c41ffcc 	andi	r17,r17,2047
1000df98:	94803fcc 	andi	r18,r18,255
1000df9c:	2a8ab03a 	or	r5,r5,r10
1000dfa0:	202090fa 	slli	r16,r4,3
1000dfa4:	380ed7fa 	srli	r7,r7,31
1000dfa8:	300c90fa 	slli	r6,r6,3
1000dfac:	10c02e26 	beq	r2,r3,1000e068 <__subdf3+0x128>
1000dfb0:	39c0005c 	xori	r7,r7,1
1000dfb4:	8887c83a 	sub	r3,r17,r2
1000dfb8:	91c03026 	beq	r18,r7,1000e07c <__subdf3+0x13c>
1000dfbc:	00c0a40e 	bge	zero,r3,1000e250 <__subdf3+0x310>
1000dfc0:	10004c1e 	bne	r2,zero,1000e0f4 <__subdf3+0x1b4>
1000dfc4:	4184b03a 	or	r2,r8,r6
1000dfc8:	10008f1e 	bne	r2,zero,1000e208 <__subdf3+0x2c8>
1000dfcc:	808001cc 	andi	r2,r16,7
1000dfd0:	10007d26 	beq	r2,zero,1000e1c8 <__subdf3+0x288>
1000dfd4:	80c003cc 	andi	r3,r16,15
1000dfd8:	00800104 	movi	r2,4
1000dfdc:	18807a26 	beq	r3,r2,1000e1c8 <__subdf3+0x288>
1000dfe0:	80c00104 	addi	r3,r16,4
1000dfe4:	1c21803a 	cmpltu	r16,r3,r16
1000dfe8:	2c0b883a 	add	r5,r5,r16
1000dfec:	2880202c 	andhi	r2,r5,128
1000dff0:	9240004c 	andi	r9,r18,1
1000dff4:	1821883a 	mov	r16,r3
1000dff8:	10007626 	beq	r2,zero,1000e1d4 <__subdf3+0x294>
1000dffc:	8c400044 	addi	r17,r17,1
1000e000:	0081ffc4 	movi	r2,2047
1000e004:	8880b226 	beq	r17,r2,1000e2d0 <__subdf3+0x390>
1000e008:	00bfe034 	movhi	r2,65408
1000e00c:	10bfffc4 	addi	r2,r2,-1
1000e010:	288a703a 	and	r5,r5,r2
1000e014:	2804977a 	slli	r2,r5,29
1000e018:	280a927a 	slli	r5,r5,9
1000e01c:	8020d0fa 	srli	r16,r16,3
1000e020:	280ad33a 	srli	r5,r5,12
1000e024:	1404b03a 	or	r2,r2,r16
1000e028:	8c41ffcc 	andi	r17,r17,2047
1000e02c:	8822953a 	slli	r17,r17,20
1000e030:	4a403fcc 	andi	r9,r9,255
1000e034:	481297fa 	slli	r9,r9,31
1000e038:	00c00434 	movhi	r3,16
1000e03c:	18ffffc4 	addi	r3,r3,-1
1000e040:	28c6703a 	and	r3,r5,r3
1000e044:	1c46b03a 	or	r3,r3,r17
1000e048:	1a46b03a 	or	r3,r3,r9
1000e04c:	dfc00417 	ldw	ra,16(sp)
1000e050:	dcc00317 	ldw	r19,12(sp)
1000e054:	dc800217 	ldw	r18,8(sp)
1000e058:	dc400117 	ldw	r17,4(sp)
1000e05c:	dc000017 	ldw	r16,0(sp)
1000e060:	dec00504 	addi	sp,sp,20
1000e064:	f800283a 	ret
1000e068:	4186b03a 	or	r3,r8,r6
1000e06c:	183fd026 	beq	r3,zero,1000dfb0 <__alt_data_end+0xf800dfb0>
1000e070:	39c03fcc 	andi	r7,r7,255
1000e074:	8887c83a 	sub	r3,r17,r2
1000e078:	91ffd01e 	bne	r18,r7,1000dfbc <__alt_data_end+0xf800dfbc>
1000e07c:	00c09b0e 	bge	zero,r3,1000e2ec <__subdf3+0x3ac>
1000e080:	10006926 	beq	r2,zero,1000e228 <__subdf3+0x2e8>
1000e084:	0081ffc4 	movi	r2,2047
1000e088:	88bfd026 	beq	r17,r2,1000dfcc <__alt_data_end+0xf800dfcc>
1000e08c:	42002034 	orhi	r8,r8,128
1000e090:	00800e04 	movi	r2,56
1000e094:	10c0e20e 	bge	r2,r3,1000e420 <__subdf3+0x4e0>
1000e098:	418cb03a 	or	r6,r8,r6
1000e09c:	300cc03a 	cmpne	r6,r6,zero
1000e0a0:	0007883a 	mov	r3,zero
1000e0a4:	340d883a 	add	r6,r6,r16
1000e0a8:	3421803a 	cmpltu	r16,r6,r16
1000e0ac:	194b883a 	add	r5,r3,r5
1000e0b0:	2c0b883a 	add	r5,r5,r16
1000e0b4:	3021883a 	mov	r16,r6
1000e0b8:	2880202c 	andhi	r2,r5,128
1000e0bc:	103fc326 	beq	r2,zero,1000dfcc <__alt_data_end+0xf800dfcc>
1000e0c0:	8c400044 	addi	r17,r17,1
1000e0c4:	0081ffc4 	movi	r2,2047
1000e0c8:	88811026 	beq	r17,r2,1000e50c <__subdf3+0x5cc>
1000e0cc:	00bfe034 	movhi	r2,65408
1000e0d0:	10bfffc4 	addi	r2,r2,-1
1000e0d4:	288a703a 	and	r5,r5,r2
1000e0d8:	8006d07a 	srli	r3,r16,1
1000e0dc:	280497fa 	slli	r2,r5,31
1000e0e0:	8400004c 	andi	r16,r16,1
1000e0e4:	80e0b03a 	or	r16,r16,r3
1000e0e8:	80a0b03a 	or	r16,r16,r2
1000e0ec:	280ad07a 	srli	r5,r5,1
1000e0f0:	003fb606 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e0f4:	0081ffc4 	movi	r2,2047
1000e0f8:	88bfb426 	beq	r17,r2,1000dfcc <__alt_data_end+0xf800dfcc>
1000e0fc:	42002034 	orhi	r8,r8,128
1000e100:	00800e04 	movi	r2,56
1000e104:	10c07516 	blt	r2,r3,1000e2dc <__subdf3+0x39c>
1000e108:	008007c4 	movi	r2,31
1000e10c:	10c09816 	blt	r2,r3,1000e370 <__subdf3+0x430>
1000e110:	00800804 	movi	r2,32
1000e114:	10c5c83a 	sub	r2,r2,r3
1000e118:	30c8d83a 	srl	r4,r6,r3
1000e11c:	408e983a 	sll	r7,r8,r2
1000e120:	3084983a 	sll	r2,r6,r2
1000e124:	40c6d83a 	srl	r3,r8,r3
1000e128:	3908b03a 	or	r4,r7,r4
1000e12c:	1004c03a 	cmpne	r2,r2,zero
1000e130:	208cb03a 	or	r6,r4,r2
1000e134:	818dc83a 	sub	r6,r16,r6
1000e138:	81a1803a 	cmpltu	r16,r16,r6
1000e13c:	28cbc83a 	sub	r5,r5,r3
1000e140:	2c0bc83a 	sub	r5,r5,r16
1000e144:	3021883a 	mov	r16,r6
1000e148:	2880202c 	andhi	r2,r5,128
1000e14c:	103f9f26 	beq	r2,zero,1000dfcc <__alt_data_end+0xf800dfcc>
1000e150:	04c02034 	movhi	r19,128
1000e154:	9cffffc4 	addi	r19,r19,-1
1000e158:	2ce6703a 	and	r19,r5,r19
1000e15c:	98004d26 	beq	r19,zero,1000e294 <__subdf3+0x354>
1000e160:	9809883a 	mov	r4,r19
1000e164:	000e9b80 	call	1000e9b8 <__clzsi2>
1000e168:	10fffe04 	addi	r3,r2,-8
1000e16c:	010007c4 	movi	r4,31
1000e170:	20c04e16 	blt	r4,r3,1000e2ac <__subdf3+0x36c>
1000e174:	01000a04 	movi	r4,40
1000e178:	2085c83a 	sub	r2,r4,r2
1000e17c:	8084d83a 	srl	r2,r16,r2
1000e180:	98e6983a 	sll	r19,r19,r3
1000e184:	80e0983a 	sll	r16,r16,r3
1000e188:	14c4b03a 	or	r2,r2,r19
1000e18c:	1c404b16 	blt	r3,r17,1000e2bc <__subdf3+0x37c>
1000e190:	1c63c83a 	sub	r17,r3,r17
1000e194:	89400044 	addi	r5,r17,1
1000e198:	00c007c4 	movi	r3,31
1000e19c:	19406716 	blt	r3,r5,1000e33c <__subdf3+0x3fc>
1000e1a0:	1c47c83a 	sub	r3,r3,r17
1000e1a4:	8148d83a 	srl	r4,r16,r5
1000e1a8:	80e0983a 	sll	r16,r16,r3
1000e1ac:	10c6983a 	sll	r3,r2,r3
1000e1b0:	114ad83a 	srl	r5,r2,r5
1000e1b4:	8004c03a 	cmpne	r2,r16,zero
1000e1b8:	20e0b03a 	or	r16,r4,r3
1000e1bc:	80a0b03a 	or	r16,r16,r2
1000e1c0:	0023883a 	mov	r17,zero
1000e1c4:	003f8106 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e1c8:	2880202c 	andhi	r2,r5,128
1000e1cc:	9240004c 	andi	r9,r18,1
1000e1d0:	103f8a1e 	bne	r2,zero,1000dffc <__alt_data_end+0xf800dffc>
1000e1d4:	2804977a 	slli	r2,r5,29
1000e1d8:	8020d0fa 	srli	r16,r16,3
1000e1dc:	00c1ffc4 	movi	r3,2047
1000e1e0:	280ad0fa 	srli	r5,r5,3
1000e1e4:	1404b03a 	or	r2,r2,r16
1000e1e8:	88c0031e 	bne	r17,r3,1000e1f8 <__subdf3+0x2b8>
1000e1ec:	1146b03a 	or	r3,r2,r5
1000e1f0:	18003726 	beq	r3,zero,1000e2d0 <__subdf3+0x390>
1000e1f4:	29400234 	orhi	r5,r5,8
1000e1f8:	00c00434 	movhi	r3,16
1000e1fc:	18ffffc4 	addi	r3,r3,-1
1000e200:	28ca703a 	and	r5,r5,r3
1000e204:	003f8806 	br	1000e028 <__alt_data_end+0xf800e028>
1000e208:	18ffffc4 	addi	r3,r3,-1
1000e20c:	1800481e 	bne	r3,zero,1000e330 <__subdf3+0x3f0>
1000e210:	818dc83a 	sub	r6,r16,r6
1000e214:	81a1803a 	cmpltu	r16,r16,r6
1000e218:	2a0bc83a 	sub	r5,r5,r8
1000e21c:	2c0bc83a 	sub	r5,r5,r16
1000e220:	3021883a 	mov	r16,r6
1000e224:	003fc806 	br	1000e148 <__alt_data_end+0xf800e148>
1000e228:	4184b03a 	or	r2,r8,r6
1000e22c:	103f6726 	beq	r2,zero,1000dfcc <__alt_data_end+0xf800dfcc>
1000e230:	18ffffc4 	addi	r3,r3,-1
1000e234:	1800931e 	bne	r3,zero,1000e484 <__subdf3+0x544>
1000e238:	340d883a 	add	r6,r6,r16
1000e23c:	3421803a 	cmpltu	r16,r6,r16
1000e240:	414b883a 	add	r5,r8,r5
1000e244:	2c0b883a 	add	r5,r5,r16
1000e248:	3021883a 	mov	r16,r6
1000e24c:	003f9a06 	br	1000e0b8 <__alt_data_end+0xf800e0b8>
1000e250:	1800531e 	bne	r3,zero,1000e3a0 <__subdf3+0x460>
1000e254:	88800044 	addi	r2,r17,1
1000e258:	1081ffcc 	andi	r2,r2,2047
1000e25c:	00c00044 	movi	r3,1
1000e260:	1880a00e 	bge	r3,r2,1000e4e4 <__subdf3+0x5a4>
1000e264:	8185c83a 	sub	r2,r16,r6
1000e268:	8087803a 	cmpltu	r3,r16,r2
1000e26c:	2a27c83a 	sub	r19,r5,r8
1000e270:	98e7c83a 	sub	r19,r19,r3
1000e274:	98c0202c 	andhi	r3,r19,128
1000e278:	18006226 	beq	r3,zero,1000e404 <__subdf3+0x4c4>
1000e27c:	3421c83a 	sub	r16,r6,r16
1000e280:	414bc83a 	sub	r5,r8,r5
1000e284:	340d803a 	cmpltu	r6,r6,r16
1000e288:	29a7c83a 	sub	r19,r5,r6
1000e28c:	3825883a 	mov	r18,r7
1000e290:	983fb31e 	bne	r19,zero,1000e160 <__alt_data_end+0xf800e160>
1000e294:	8009883a 	mov	r4,r16
1000e298:	000e9b80 	call	1000e9b8 <__clzsi2>
1000e29c:	10800804 	addi	r2,r2,32
1000e2a0:	10fffe04 	addi	r3,r2,-8
1000e2a4:	010007c4 	movi	r4,31
1000e2a8:	20ffb20e 	bge	r4,r3,1000e174 <__alt_data_end+0xf800e174>
1000e2ac:	10bff604 	addi	r2,r2,-40
1000e2b0:	8084983a 	sll	r2,r16,r2
1000e2b4:	0021883a 	mov	r16,zero
1000e2b8:	1c7fb50e 	bge	r3,r17,1000e190 <__alt_data_end+0xf800e190>
1000e2bc:	017fe034 	movhi	r5,65408
1000e2c0:	297fffc4 	addi	r5,r5,-1
1000e2c4:	88e3c83a 	sub	r17,r17,r3
1000e2c8:	114a703a 	and	r5,r2,r5
1000e2cc:	003f3f06 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e2d0:	000b883a 	mov	r5,zero
1000e2d4:	0005883a 	mov	r2,zero
1000e2d8:	003f5306 	br	1000e028 <__alt_data_end+0xf800e028>
1000e2dc:	418cb03a 	or	r6,r8,r6
1000e2e0:	300cc03a 	cmpne	r6,r6,zero
1000e2e4:	0007883a 	mov	r3,zero
1000e2e8:	003f9206 	br	1000e134 <__alt_data_end+0xf800e134>
1000e2ec:	1800961e 	bne	r3,zero,1000e548 <__subdf3+0x608>
1000e2f0:	88800044 	addi	r2,r17,1
1000e2f4:	1101ffcc 	andi	r4,r2,2047
1000e2f8:	00c00044 	movi	r3,1
1000e2fc:	1900680e 	bge	r3,r4,1000e4a0 <__subdf3+0x560>
1000e300:	00c1ffc4 	movi	r3,2047
1000e304:	10c0b626 	beq	r2,r3,1000e5e0 <__subdf3+0x6a0>
1000e308:	340d883a 	add	r6,r6,r16
1000e30c:	3421803a 	cmpltu	r16,r6,r16
1000e310:	414b883a 	add	r5,r8,r5
1000e314:	2c0b883a 	add	r5,r5,r16
1000e318:	282097fa 	slli	r16,r5,31
1000e31c:	300cd07a 	srli	r6,r6,1
1000e320:	280ad07a 	srli	r5,r5,1
1000e324:	1023883a 	mov	r17,r2
1000e328:	81a0b03a 	or	r16,r16,r6
1000e32c:	003f2706 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e330:	0081ffc4 	movi	r2,2047
1000e334:	88bf721e 	bne	r17,r2,1000e100 <__alt_data_end+0xf800e100>
1000e338:	003f2406 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e33c:	893ff844 	addi	r4,r17,-31
1000e340:	00c00804 	movi	r3,32
1000e344:	1108d83a 	srl	r4,r2,r4
1000e348:	28c05126 	beq	r5,r3,1000e490 <__subdf3+0x550>
1000e34c:	00c00fc4 	movi	r3,63
1000e350:	1c63c83a 	sub	r17,r3,r17
1000e354:	1444983a 	sll	r2,r2,r17
1000e358:	1420b03a 	or	r16,r2,r16
1000e35c:	8020c03a 	cmpne	r16,r16,zero
1000e360:	8120b03a 	or	r16,r16,r4
1000e364:	000b883a 	mov	r5,zero
1000e368:	0023883a 	mov	r17,zero
1000e36c:	003f1706 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e370:	18bff804 	addi	r2,r3,-32
1000e374:	01000804 	movi	r4,32
1000e378:	4084d83a 	srl	r2,r8,r2
1000e37c:	19004626 	beq	r3,r4,1000e498 <__subdf3+0x558>
1000e380:	01001004 	movi	r4,64
1000e384:	20c7c83a 	sub	r3,r4,r3
1000e388:	40d0983a 	sll	r8,r8,r3
1000e38c:	418cb03a 	or	r6,r8,r6
1000e390:	300cc03a 	cmpne	r6,r6,zero
1000e394:	308cb03a 	or	r6,r6,r2
1000e398:	0007883a 	mov	r3,zero
1000e39c:	003f6506 	br	1000e134 <__alt_data_end+0xf800e134>
1000e3a0:	88002b26 	beq	r17,zero,1000e450 <__subdf3+0x510>
1000e3a4:	0101ffc4 	movi	r4,2047
1000e3a8:	11002f26 	beq	r2,r4,1000e468 <__subdf3+0x528>
1000e3ac:	00c7c83a 	sub	r3,zero,r3
1000e3b0:	29402034 	orhi	r5,r5,128
1000e3b4:	01000e04 	movi	r4,56
1000e3b8:	20c08516 	blt	r4,r3,1000e5d0 <__subdf3+0x690>
1000e3bc:	010007c4 	movi	r4,31
1000e3c0:	20c0cd16 	blt	r4,r3,1000e6f8 <__subdf3+0x7b8>
1000e3c4:	01000804 	movi	r4,32
1000e3c8:	20c9c83a 	sub	r4,r4,r3
1000e3cc:	2914983a 	sll	r10,r5,r4
1000e3d0:	80d2d83a 	srl	r9,r16,r3
1000e3d4:	8108983a 	sll	r4,r16,r4
1000e3d8:	28cad83a 	srl	r5,r5,r3
1000e3dc:	5252b03a 	or	r9,r10,r9
1000e3e0:	2006c03a 	cmpne	r3,r4,zero
1000e3e4:	48e0b03a 	or	r16,r9,r3
1000e3e8:	3421c83a 	sub	r16,r6,r16
1000e3ec:	414bc83a 	sub	r5,r8,r5
1000e3f0:	340d803a 	cmpltu	r6,r6,r16
1000e3f4:	298bc83a 	sub	r5,r5,r6
1000e3f8:	1023883a 	mov	r17,r2
1000e3fc:	3825883a 	mov	r18,r7
1000e400:	003f5106 	br	1000e148 <__alt_data_end+0xf800e148>
1000e404:	9886b03a 	or	r3,r19,r2
1000e408:	18001c1e 	bne	r3,zero,1000e47c <__subdf3+0x53c>
1000e40c:	0013883a 	mov	r9,zero
1000e410:	000b883a 	mov	r5,zero
1000e414:	0021883a 	mov	r16,zero
1000e418:	0023883a 	mov	r17,zero
1000e41c:	003f6d06 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e420:	008007c4 	movi	r2,31
1000e424:	10c03c16 	blt	r2,r3,1000e518 <__subdf3+0x5d8>
1000e428:	00800804 	movi	r2,32
1000e42c:	10c5c83a 	sub	r2,r2,r3
1000e430:	30c8d83a 	srl	r4,r6,r3
1000e434:	408e983a 	sll	r7,r8,r2
1000e438:	3084983a 	sll	r2,r6,r2
1000e43c:	40c6d83a 	srl	r3,r8,r3
1000e440:	3908b03a 	or	r4,r7,r4
1000e444:	1004c03a 	cmpne	r2,r2,zero
1000e448:	208cb03a 	or	r6,r4,r2
1000e44c:	003f1506 	br	1000e0a4 <__alt_data_end+0xf800e0a4>
1000e450:	2c08b03a 	or	r4,r5,r16
1000e454:	20000426 	beq	r4,zero,1000e468 <__subdf3+0x528>
1000e458:	00c6303a 	nor	r3,zero,r3
1000e45c:	183fe226 	beq	r3,zero,1000e3e8 <__alt_data_end+0xf800e3e8>
1000e460:	0101ffc4 	movi	r4,2047
1000e464:	113fd31e 	bne	r2,r4,1000e3b4 <__alt_data_end+0xf800e3b4>
1000e468:	400b883a 	mov	r5,r8
1000e46c:	3021883a 	mov	r16,r6
1000e470:	1023883a 	mov	r17,r2
1000e474:	3825883a 	mov	r18,r7
1000e478:	003ed406 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e47c:	1021883a 	mov	r16,r2
1000e480:	003f3606 	br	1000e15c <__alt_data_end+0xf800e15c>
1000e484:	0081ffc4 	movi	r2,2047
1000e488:	88bf011e 	bne	r17,r2,1000e090 <__alt_data_end+0xf800e090>
1000e48c:	003ecf06 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e490:	0005883a 	mov	r2,zero
1000e494:	003fb006 	br	1000e358 <__alt_data_end+0xf800e358>
1000e498:	0011883a 	mov	r8,zero
1000e49c:	003fbb06 	br	1000e38c <__alt_data_end+0xf800e38c>
1000e4a0:	2c04b03a 	or	r2,r5,r16
1000e4a4:	88007f1e 	bne	r17,zero,1000e6a4 <__subdf3+0x764>
1000e4a8:	1000a926 	beq	r2,zero,1000e750 <__subdf3+0x810>
1000e4ac:	4184b03a 	or	r2,r8,r6
1000e4b0:	103ec626 	beq	r2,zero,1000dfcc <__alt_data_end+0xf800dfcc>
1000e4b4:	340d883a 	add	r6,r6,r16
1000e4b8:	414b883a 	add	r5,r8,r5
1000e4bc:	3421803a 	cmpltu	r16,r6,r16
1000e4c0:	2c0b883a 	add	r5,r5,r16
1000e4c4:	2880202c 	andhi	r2,r5,128
1000e4c8:	1000bb26 	beq	r2,zero,1000e7b8 <__subdf3+0x878>
1000e4cc:	00bfe034 	movhi	r2,65408
1000e4d0:	10bfffc4 	addi	r2,r2,-1
1000e4d4:	288a703a 	and	r5,r5,r2
1000e4d8:	3021883a 	mov	r16,r6
1000e4dc:	1823883a 	mov	r17,r3
1000e4e0:	003eba06 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e4e4:	2c04b03a 	or	r2,r5,r16
1000e4e8:	8800311e 	bne	r17,zero,1000e5b0 <__subdf3+0x670>
1000e4ec:	1000451e 	bne	r2,zero,1000e604 <__subdf3+0x6c4>
1000e4f0:	4184b03a 	or	r2,r8,r6
1000e4f4:	10000426 	beq	r2,zero,1000e508 <__subdf3+0x5c8>
1000e4f8:	400b883a 	mov	r5,r8
1000e4fc:	3021883a 	mov	r16,r6
1000e500:	3825883a 	mov	r18,r7
1000e504:	003eb106 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e508:	0013883a 	mov	r9,zero
1000e50c:	000b883a 	mov	r5,zero
1000e510:	0021883a 	mov	r16,zero
1000e514:	003f2f06 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e518:	18bff804 	addi	r2,r3,-32
1000e51c:	01000804 	movi	r4,32
1000e520:	4084d83a 	srl	r2,r8,r2
1000e524:	19007226 	beq	r3,r4,1000e6f0 <__subdf3+0x7b0>
1000e528:	01001004 	movi	r4,64
1000e52c:	20c7c83a 	sub	r3,r4,r3
1000e530:	40d0983a 	sll	r8,r8,r3
1000e534:	418cb03a 	or	r6,r8,r6
1000e538:	300cc03a 	cmpne	r6,r6,zero
1000e53c:	308cb03a 	or	r6,r6,r2
1000e540:	0007883a 	mov	r3,zero
1000e544:	003ed706 	br	1000e0a4 <__alt_data_end+0xf800e0a4>
1000e548:	8800291e 	bne	r17,zero,1000e5f0 <__subdf3+0x6b0>
1000e54c:	2c08b03a 	or	r4,r5,r16
1000e550:	20005026 	beq	r4,zero,1000e694 <__subdf3+0x754>
1000e554:	00c6303a 	nor	r3,zero,r3
1000e558:	18000f26 	beq	r3,zero,1000e598 <__subdf3+0x658>
1000e55c:	0101ffc4 	movi	r4,2047
1000e560:	11004c26 	beq	r2,r4,1000e694 <__subdf3+0x754>
1000e564:	01000e04 	movi	r4,56
1000e568:	20c07516 	blt	r4,r3,1000e740 <__subdf3+0x800>
1000e56c:	010007c4 	movi	r4,31
1000e570:	20c08316 	blt	r4,r3,1000e780 <__subdf3+0x840>
1000e574:	01000804 	movi	r4,32
1000e578:	20c9c83a 	sub	r4,r4,r3
1000e57c:	2914983a 	sll	r10,r5,r4
1000e580:	80ced83a 	srl	r7,r16,r3
1000e584:	8108983a 	sll	r4,r16,r4
1000e588:	28cad83a 	srl	r5,r5,r3
1000e58c:	51ceb03a 	or	r7,r10,r7
1000e590:	2006c03a 	cmpne	r3,r4,zero
1000e594:	38e0b03a 	or	r16,r7,r3
1000e598:	81a1883a 	add	r16,r16,r6
1000e59c:	2a0b883a 	add	r5,r5,r8
1000e5a0:	818d803a 	cmpltu	r6,r16,r6
1000e5a4:	298b883a 	add	r5,r5,r6
1000e5a8:	1023883a 	mov	r17,r2
1000e5ac:	003ec206 	br	1000e0b8 <__alt_data_end+0xf800e0b8>
1000e5b0:	1000221e 	bne	r2,zero,1000e63c <__subdf3+0x6fc>
1000e5b4:	4184b03a 	or	r2,r8,r6
1000e5b8:	10005b26 	beq	r2,zero,1000e728 <__subdf3+0x7e8>
1000e5bc:	400b883a 	mov	r5,r8
1000e5c0:	3021883a 	mov	r16,r6
1000e5c4:	3825883a 	mov	r18,r7
1000e5c8:	0441ffc4 	movi	r17,2047
1000e5cc:	003e7f06 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e5d0:	2c20b03a 	or	r16,r5,r16
1000e5d4:	8020c03a 	cmpne	r16,r16,zero
1000e5d8:	000b883a 	mov	r5,zero
1000e5dc:	003f8206 	br	1000e3e8 <__alt_data_end+0xf800e3e8>
1000e5e0:	1023883a 	mov	r17,r2
1000e5e4:	000b883a 	mov	r5,zero
1000e5e8:	0021883a 	mov	r16,zero
1000e5ec:	003ef906 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e5f0:	0101ffc4 	movi	r4,2047
1000e5f4:	11002726 	beq	r2,r4,1000e694 <__subdf3+0x754>
1000e5f8:	00c7c83a 	sub	r3,zero,r3
1000e5fc:	29402034 	orhi	r5,r5,128
1000e600:	003fd806 	br	1000e564 <__alt_data_end+0xf800e564>
1000e604:	4184b03a 	or	r2,r8,r6
1000e608:	103e7026 	beq	r2,zero,1000dfcc <__alt_data_end+0xf800dfcc>
1000e60c:	8185c83a 	sub	r2,r16,r6
1000e610:	8089803a 	cmpltu	r4,r16,r2
1000e614:	2a07c83a 	sub	r3,r5,r8
1000e618:	1907c83a 	sub	r3,r3,r4
1000e61c:	1900202c 	andhi	r4,r3,128
1000e620:	20005226 	beq	r4,zero,1000e76c <__subdf3+0x82c>
1000e624:	3421c83a 	sub	r16,r6,r16
1000e628:	414bc83a 	sub	r5,r8,r5
1000e62c:	340d803a 	cmpltu	r6,r6,r16
1000e630:	298bc83a 	sub	r5,r5,r6
1000e634:	3825883a 	mov	r18,r7
1000e638:	003e6406 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e63c:	4184b03a 	or	r2,r8,r6
1000e640:	10002926 	beq	r2,zero,1000e6e8 <__subdf3+0x7a8>
1000e644:	2804d0fa 	srli	r2,r5,3
1000e648:	8020d0fa 	srli	r16,r16,3
1000e64c:	280a977a 	slli	r5,r5,29
1000e650:	10c0022c 	andhi	r3,r2,8
1000e654:	2c20b03a 	or	r16,r5,r16
1000e658:	18000826 	beq	r3,zero,1000e67c <__subdf3+0x73c>
1000e65c:	4006d0fa 	srli	r3,r8,3
1000e660:	1900022c 	andhi	r4,r3,8
1000e664:	2000051e 	bne	r4,zero,1000e67c <__subdf3+0x73c>
1000e668:	300cd0fa 	srli	r6,r6,3
1000e66c:	4010977a 	slli	r8,r8,29
1000e670:	1805883a 	mov	r2,r3
1000e674:	3825883a 	mov	r18,r7
1000e678:	41a0b03a 	or	r16,r8,r6
1000e67c:	800ad77a 	srli	r5,r16,29
1000e680:	100490fa 	slli	r2,r2,3
1000e684:	802090fa 	slli	r16,r16,3
1000e688:	0441ffc4 	movi	r17,2047
1000e68c:	288ab03a 	or	r5,r5,r2
1000e690:	003e4e06 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e694:	400b883a 	mov	r5,r8
1000e698:	3021883a 	mov	r16,r6
1000e69c:	1023883a 	mov	r17,r2
1000e6a0:	003e4a06 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e6a4:	10002d26 	beq	r2,zero,1000e75c <__subdf3+0x81c>
1000e6a8:	4184b03a 	or	r2,r8,r6
1000e6ac:	10000e26 	beq	r2,zero,1000e6e8 <__subdf3+0x7a8>
1000e6b0:	2804d0fa 	srli	r2,r5,3
1000e6b4:	8020d0fa 	srli	r16,r16,3
1000e6b8:	280a977a 	slli	r5,r5,29
1000e6bc:	10c0022c 	andhi	r3,r2,8
1000e6c0:	2c20b03a 	or	r16,r5,r16
1000e6c4:	183fed26 	beq	r3,zero,1000e67c <__alt_data_end+0xf800e67c>
1000e6c8:	4006d0fa 	srli	r3,r8,3
1000e6cc:	1900022c 	andhi	r4,r3,8
1000e6d0:	203fea1e 	bne	r4,zero,1000e67c <__alt_data_end+0xf800e67c>
1000e6d4:	300cd0fa 	srli	r6,r6,3
1000e6d8:	4010977a 	slli	r8,r8,29
1000e6dc:	1805883a 	mov	r2,r3
1000e6e0:	41a0b03a 	or	r16,r8,r6
1000e6e4:	003fe506 	br	1000e67c <__alt_data_end+0xf800e67c>
1000e6e8:	0441ffc4 	movi	r17,2047
1000e6ec:	003e3706 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e6f0:	0011883a 	mov	r8,zero
1000e6f4:	003f8f06 	br	1000e534 <__alt_data_end+0xf800e534>
1000e6f8:	193ff804 	addi	r4,r3,-32
1000e6fc:	02400804 	movi	r9,32
1000e700:	2908d83a 	srl	r4,r5,r4
1000e704:	1a402a26 	beq	r3,r9,1000e7b0 <__subdf3+0x870>
1000e708:	02401004 	movi	r9,64
1000e70c:	48c7c83a 	sub	r3,r9,r3
1000e710:	28ca983a 	sll	r5,r5,r3
1000e714:	2c20b03a 	or	r16,r5,r16
1000e718:	8020c03a 	cmpne	r16,r16,zero
1000e71c:	8120b03a 	or	r16,r16,r4
1000e720:	000b883a 	mov	r5,zero
1000e724:	003f3006 	br	1000e3e8 <__alt_data_end+0xf800e3e8>
1000e728:	0013883a 	mov	r9,zero
1000e72c:	01402034 	movhi	r5,128
1000e730:	297fffc4 	addi	r5,r5,-1
1000e734:	043ffe04 	movi	r16,-8
1000e738:	0441ffc4 	movi	r17,2047
1000e73c:	003ea506 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e740:	2c20b03a 	or	r16,r5,r16
1000e744:	8020c03a 	cmpne	r16,r16,zero
1000e748:	000b883a 	mov	r5,zero
1000e74c:	003f9206 	br	1000e598 <__alt_data_end+0xf800e598>
1000e750:	400b883a 	mov	r5,r8
1000e754:	3021883a 	mov	r16,r6
1000e758:	003e1c06 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e75c:	400b883a 	mov	r5,r8
1000e760:	3021883a 	mov	r16,r6
1000e764:	0441ffc4 	movi	r17,2047
1000e768:	003e1806 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e76c:	1888b03a 	or	r4,r3,r2
1000e770:	203f6526 	beq	r4,zero,1000e508 <__alt_data_end+0xf800e508>
1000e774:	180b883a 	mov	r5,r3
1000e778:	1021883a 	mov	r16,r2
1000e77c:	003e1306 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e780:	193ff804 	addi	r4,r3,-32
1000e784:	01c00804 	movi	r7,32
1000e788:	2908d83a 	srl	r4,r5,r4
1000e78c:	19c00c26 	beq	r3,r7,1000e7c0 <__subdf3+0x880>
1000e790:	01c01004 	movi	r7,64
1000e794:	38c7c83a 	sub	r3,r7,r3
1000e798:	28ca983a 	sll	r5,r5,r3
1000e79c:	2c20b03a 	or	r16,r5,r16
1000e7a0:	8020c03a 	cmpne	r16,r16,zero
1000e7a4:	8120b03a 	or	r16,r16,r4
1000e7a8:	000b883a 	mov	r5,zero
1000e7ac:	003f7a06 	br	1000e598 <__alt_data_end+0xf800e598>
1000e7b0:	000b883a 	mov	r5,zero
1000e7b4:	003fd706 	br	1000e714 <__alt_data_end+0xf800e714>
1000e7b8:	3021883a 	mov	r16,r6
1000e7bc:	003e0306 	br	1000dfcc <__alt_data_end+0xf800dfcc>
1000e7c0:	000b883a 	mov	r5,zero
1000e7c4:	003ff506 	br	1000e79c <__alt_data_end+0xf800e79c>

1000e7c8 <__fixdfsi>:
1000e7c8:	2806d53a 	srli	r3,r5,20
1000e7cc:	00800434 	movhi	r2,16
1000e7d0:	10bfffc4 	addi	r2,r2,-1
1000e7d4:	0180ff84 	movi	r6,1022
1000e7d8:	18c1ffcc 	andi	r3,r3,2047
1000e7dc:	2884703a 	and	r2,r5,r2
1000e7e0:	280ad7fa 	srli	r5,r5,31
1000e7e4:	30c0120e 	bge	r6,r3,1000e830 <__fixdfsi+0x68>
1000e7e8:	01810744 	movi	r6,1053
1000e7ec:	30c00c16 	blt	r6,r3,1000e820 <__fixdfsi+0x58>
1000e7f0:	01810cc4 	movi	r6,1075
1000e7f4:	30cdc83a 	sub	r6,r6,r3
1000e7f8:	01c007c4 	movi	r7,31
1000e7fc:	10800434 	orhi	r2,r2,16
1000e800:	39800d16 	blt	r7,r6,1000e838 <__fixdfsi+0x70>
1000e804:	18fefb44 	addi	r3,r3,-1043
1000e808:	2188d83a 	srl	r4,r4,r6
1000e80c:	10c4983a 	sll	r2,r2,r3
1000e810:	2084b03a 	or	r2,r4,r2
1000e814:	28000726 	beq	r5,zero,1000e834 <__fixdfsi+0x6c>
1000e818:	0085c83a 	sub	r2,zero,r2
1000e81c:	f800283a 	ret
1000e820:	00a00034 	movhi	r2,32768
1000e824:	10bfffc4 	addi	r2,r2,-1
1000e828:	2885883a 	add	r2,r5,r2
1000e82c:	f800283a 	ret
1000e830:	0005883a 	mov	r2,zero
1000e834:	f800283a 	ret
1000e838:	010104c4 	movi	r4,1043
1000e83c:	20c7c83a 	sub	r3,r4,r3
1000e840:	10c4d83a 	srl	r2,r2,r3
1000e844:	003ff306 	br	1000e814 <__alt_data_end+0xf800e814>

1000e848 <__floatsidf>:
1000e848:	defffd04 	addi	sp,sp,-12
1000e84c:	dc000015 	stw	r16,0(sp)
1000e850:	dfc00215 	stw	ra,8(sp)
1000e854:	dc400115 	stw	r17,4(sp)
1000e858:	2021883a 	mov	r16,r4
1000e85c:	20002926 	beq	r4,zero,1000e904 <__floatsidf+0xbc>
1000e860:	2022d7fa 	srli	r17,r4,31
1000e864:	88000126 	beq	r17,zero,1000e86c <__floatsidf+0x24>
1000e868:	0121c83a 	sub	r16,zero,r4
1000e86c:	8009883a 	mov	r4,r16
1000e870:	000e9b80 	call	1000e9b8 <__clzsi2>
1000e874:	01810784 	movi	r6,1054
1000e878:	00c00284 	movi	r3,10
1000e87c:	308dc83a 	sub	r6,r6,r2
1000e880:	1880150e 	bge	r3,r2,1000e8d8 <__floatsidf+0x90>
1000e884:	113ffd44 	addi	r4,r2,-11
1000e888:	8108983a 	sll	r4,r16,r4
1000e88c:	00800434 	movhi	r2,16
1000e890:	10bfffc4 	addi	r2,r2,-1
1000e894:	3181ffcc 	andi	r6,r6,2047
1000e898:	2088703a 	and	r4,r4,r2
1000e89c:	880b883a 	mov	r5,r17
1000e8a0:	0005883a 	mov	r2,zero
1000e8a4:	300c953a 	slli	r6,r6,20
1000e8a8:	29403fcc 	andi	r5,r5,255
1000e8ac:	280a97fa 	slli	r5,r5,31
1000e8b0:	00c00434 	movhi	r3,16
1000e8b4:	18ffffc4 	addi	r3,r3,-1
1000e8b8:	20c8703a 	and	r4,r4,r3
1000e8bc:	2186b03a 	or	r3,r4,r6
1000e8c0:	1946b03a 	or	r3,r3,r5
1000e8c4:	dfc00217 	ldw	ra,8(sp)
1000e8c8:	dc400117 	ldw	r17,4(sp)
1000e8cc:	dc000017 	ldw	r16,0(sp)
1000e8d0:	dec00304 	addi	sp,sp,12
1000e8d4:	f800283a 	ret
1000e8d8:	010002c4 	movi	r4,11
1000e8dc:	2089c83a 	sub	r4,r4,r2
1000e8e0:	8108d83a 	srl	r4,r16,r4
1000e8e4:	10800544 	addi	r2,r2,21
1000e8e8:	00c00434 	movhi	r3,16
1000e8ec:	18ffffc4 	addi	r3,r3,-1
1000e8f0:	8084983a 	sll	r2,r16,r2
1000e8f4:	20c8703a 	and	r4,r4,r3
1000e8f8:	3181ffcc 	andi	r6,r6,2047
1000e8fc:	880b883a 	mov	r5,r17
1000e900:	003fe806 	br	1000e8a4 <__alt_data_end+0xf800e8a4>
1000e904:	000b883a 	mov	r5,zero
1000e908:	000d883a 	mov	r6,zero
1000e90c:	0009883a 	mov	r4,zero
1000e910:	0005883a 	mov	r2,zero
1000e914:	003fe306 	br	1000e8a4 <__alt_data_end+0xf800e8a4>

1000e918 <__floatunsidf>:
1000e918:	defffe04 	addi	sp,sp,-8
1000e91c:	dc000015 	stw	r16,0(sp)
1000e920:	dfc00115 	stw	ra,4(sp)
1000e924:	2021883a 	mov	r16,r4
1000e928:	20001f26 	beq	r4,zero,1000e9a8 <__floatunsidf+0x90>
1000e92c:	000e9b80 	call	1000e9b8 <__clzsi2>
1000e930:	01010784 	movi	r4,1054
1000e934:	00c00284 	movi	r3,10
1000e938:	2089c83a 	sub	r4,r4,r2
1000e93c:	1880100e 	bge	r3,r2,1000e980 <__floatunsidf+0x68>
1000e940:	117ffd44 	addi	r5,r2,-11
1000e944:	814a983a 	sll	r5,r16,r5
1000e948:	00800434 	movhi	r2,16
1000e94c:	10bfffc4 	addi	r2,r2,-1
1000e950:	2101ffcc 	andi	r4,r4,2047
1000e954:	288a703a 	and	r5,r5,r2
1000e958:	0005883a 	mov	r2,zero
1000e95c:	2008953a 	slli	r4,r4,20
1000e960:	00c00434 	movhi	r3,16
1000e964:	18ffffc4 	addi	r3,r3,-1
1000e968:	28c6703a 	and	r3,r5,r3
1000e96c:	1906b03a 	or	r3,r3,r4
1000e970:	dfc00117 	ldw	ra,4(sp)
1000e974:	dc000017 	ldw	r16,0(sp)
1000e978:	dec00204 	addi	sp,sp,8
1000e97c:	f800283a 	ret
1000e980:	014002c4 	movi	r5,11
1000e984:	288bc83a 	sub	r5,r5,r2
1000e988:	814ad83a 	srl	r5,r16,r5
1000e98c:	10800544 	addi	r2,r2,21
1000e990:	00c00434 	movhi	r3,16
1000e994:	18ffffc4 	addi	r3,r3,-1
1000e998:	8084983a 	sll	r2,r16,r2
1000e99c:	28ca703a 	and	r5,r5,r3
1000e9a0:	2101ffcc 	andi	r4,r4,2047
1000e9a4:	003fed06 	br	1000e95c <__alt_data_end+0xf800e95c>
1000e9a8:	0009883a 	mov	r4,zero
1000e9ac:	000b883a 	mov	r5,zero
1000e9b0:	0005883a 	mov	r2,zero
1000e9b4:	003fe906 	br	1000e95c <__alt_data_end+0xf800e95c>

1000e9b8 <__clzsi2>:
1000e9b8:	00bfffd4 	movui	r2,65535
1000e9bc:	11000b36 	bltu	r2,r4,1000e9ec <__clzsi2+0x34>
1000e9c0:	00803fc4 	movi	r2,255
1000e9c4:	11001e2e 	bgeu	r2,r4,1000ea40 <__clzsi2+0x88>
1000e9c8:	00c00204 	movi	r3,8
1000e9cc:	20c8d83a 	srl	r4,r4,r3
1000e9d0:	00c40074 	movhi	r3,4097
1000e9d4:	18c6ec04 	addi	r3,r3,7088
1000e9d8:	00800604 	movi	r2,24
1000e9dc:	1909883a 	add	r4,r3,r4
1000e9e0:	20c00003 	ldbu	r3,0(r4)
1000e9e4:	10c5c83a 	sub	r2,r2,r3
1000e9e8:	f800283a 	ret
1000e9ec:	00804034 	movhi	r2,256
1000e9f0:	10bfffc4 	addi	r2,r2,-1
1000e9f4:	11000936 	bltu	r2,r4,1000ea1c <__clzsi2+0x64>
1000e9f8:	00800404 	movi	r2,16
1000e9fc:	1007883a 	mov	r3,r2
1000ea00:	20c8d83a 	srl	r4,r4,r3
1000ea04:	00c40074 	movhi	r3,4097
1000ea08:	18c6ec04 	addi	r3,r3,7088
1000ea0c:	1909883a 	add	r4,r3,r4
1000ea10:	20c00003 	ldbu	r3,0(r4)
1000ea14:	10c5c83a 	sub	r2,r2,r3
1000ea18:	f800283a 	ret
1000ea1c:	00c00604 	movi	r3,24
1000ea20:	20c8d83a 	srl	r4,r4,r3
1000ea24:	00c40074 	movhi	r3,4097
1000ea28:	18c6ec04 	addi	r3,r3,7088
1000ea2c:	00800204 	movi	r2,8
1000ea30:	1909883a 	add	r4,r3,r4
1000ea34:	20c00003 	ldbu	r3,0(r4)
1000ea38:	10c5c83a 	sub	r2,r2,r3
1000ea3c:	f800283a 	ret
1000ea40:	0007883a 	mov	r3,zero
1000ea44:	20c8d83a 	srl	r4,r4,r3
1000ea48:	00c40074 	movhi	r3,4097
1000ea4c:	18c6ec04 	addi	r3,r3,7088
1000ea50:	00800804 	movi	r2,32
1000ea54:	1909883a 	add	r4,r3,r4
1000ea58:	20c00003 	ldbu	r3,0(r4)
1000ea5c:	10c5c83a 	sub	r2,r2,r3
1000ea60:	f800283a 	ret

1000ea64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ea64:	defffe04 	addi	sp,sp,-8
1000ea68:	dfc00115 	stw	ra,4(sp)
1000ea6c:	df000015 	stw	fp,0(sp)
1000ea70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ea74:	00840074 	movhi	r2,4097
1000ea78:	108def04 	addi	r2,r2,14268
1000ea7c:	10800017 	ldw	r2,0(r2)
1000ea80:	10000526 	beq	r2,zero,1000ea98 <alt_get_errno+0x34>
1000ea84:	00840074 	movhi	r2,4097
1000ea88:	108def04 	addi	r2,r2,14268
1000ea8c:	10800017 	ldw	r2,0(r2)
1000ea90:	103ee83a 	callr	r2
1000ea94:	00000206 	br	1000eaa0 <alt_get_errno+0x3c>
1000ea98:	00840074 	movhi	r2,4097
1000ea9c:	1094b604 	addi	r2,r2,21208
}
1000eaa0:	e037883a 	mov	sp,fp
1000eaa4:	dfc00117 	ldw	ra,4(sp)
1000eaa8:	df000017 	ldw	fp,0(sp)
1000eaac:	dec00204 	addi	sp,sp,8
1000eab0:	f800283a 	ret

1000eab4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000eab4:	defffb04 	addi	sp,sp,-20
1000eab8:	dfc00415 	stw	ra,16(sp)
1000eabc:	df000315 	stw	fp,12(sp)
1000eac0:	df000304 	addi	fp,sp,12
1000eac4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000eac8:	e0bfff17 	ldw	r2,-4(fp)
1000eacc:	10000816 	blt	r2,zero,1000eaf0 <close+0x3c>
1000ead0:	e13fff17 	ldw	r4,-4(fp)
1000ead4:	01400304 	movi	r5,12
1000ead8:	000c2b80 	call	1000c2b8 <__mulsi3>
1000eadc:	1007883a 	mov	r3,r2
1000eae0:	00840074 	movhi	r2,4097
1000eae4:	10896c04 	addi	r2,r2,9648
1000eae8:	1885883a 	add	r2,r3,r2
1000eaec:	00000106 	br	1000eaf4 <close+0x40>
1000eaf0:	0005883a 	mov	r2,zero
1000eaf4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000eaf8:	e0bffd17 	ldw	r2,-12(fp)
1000eafc:	10001826 	beq	r2,zero,1000eb60 <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000eb00:	e0bffd17 	ldw	r2,-12(fp)
1000eb04:	10800017 	ldw	r2,0(r2)
1000eb08:	10800417 	ldw	r2,16(r2)
1000eb0c:	10000626 	beq	r2,zero,1000eb28 <close+0x74>
1000eb10:	e0bffd17 	ldw	r2,-12(fp)
1000eb14:	10800017 	ldw	r2,0(r2)
1000eb18:	10800417 	ldw	r2,16(r2)
1000eb1c:	e13ffd17 	ldw	r4,-12(fp)
1000eb20:	103ee83a 	callr	r2
1000eb24:	00000106 	br	1000eb2c <close+0x78>
1000eb28:	0005883a 	mov	r2,zero
1000eb2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000eb30:	e13fff17 	ldw	r4,-4(fp)
1000eb34:	000f1b80 	call	1000f1b8 <alt_release_fd>
    if (rval < 0)
1000eb38:	e0bffe17 	ldw	r2,-8(fp)
1000eb3c:	1000060e 	bge	r2,zero,1000eb58 <close+0xa4>
    {
      ALT_ERRNO = -rval;
1000eb40:	000ea640 	call	1000ea64 <alt_get_errno>
1000eb44:	e0fffe17 	ldw	r3,-8(fp)
1000eb48:	00c7c83a 	sub	r3,zero,r3
1000eb4c:	10c00015 	stw	r3,0(r2)
      return -1;
1000eb50:	00bfffc4 	movi	r2,-1
1000eb54:	00000606 	br	1000eb70 <close+0xbc>
    }
    return 0;
1000eb58:	0005883a 	mov	r2,zero
1000eb5c:	00000406 	br	1000eb70 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000eb60:	000ea640 	call	1000ea64 <alt_get_errno>
1000eb64:	00c01444 	movi	r3,81
1000eb68:	10c00015 	stw	r3,0(r2)
    return -1;
1000eb6c:	00bfffc4 	movi	r2,-1
  }
}
1000eb70:	e037883a 	mov	sp,fp
1000eb74:	dfc00117 	ldw	ra,4(sp)
1000eb78:	df000017 	ldw	fp,0(sp)
1000eb7c:	dec00204 	addi	sp,sp,8
1000eb80:	f800283a 	ret

1000eb84 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000eb84:	defffc04 	addi	sp,sp,-16
1000eb88:	df000315 	stw	fp,12(sp)
1000eb8c:	df000304 	addi	fp,sp,12
1000eb90:	e13ffd15 	stw	r4,-12(fp)
1000eb94:	e17ffe15 	stw	r5,-8(fp)
1000eb98:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000eb9c:	e0bfff17 	ldw	r2,-4(fp)
}
1000eba0:	e037883a 	mov	sp,fp
1000eba4:	df000017 	ldw	fp,0(sp)
1000eba8:	dec00104 	addi	sp,sp,4
1000ebac:	f800283a 	ret

1000ebb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ebb0:	defffe04 	addi	sp,sp,-8
1000ebb4:	dfc00115 	stw	ra,4(sp)
1000ebb8:	df000015 	stw	fp,0(sp)
1000ebbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ebc0:	00840074 	movhi	r2,4097
1000ebc4:	108def04 	addi	r2,r2,14268
1000ebc8:	10800017 	ldw	r2,0(r2)
1000ebcc:	10000526 	beq	r2,zero,1000ebe4 <alt_get_errno+0x34>
1000ebd0:	00840074 	movhi	r2,4097
1000ebd4:	108def04 	addi	r2,r2,14268
1000ebd8:	10800017 	ldw	r2,0(r2)
1000ebdc:	103ee83a 	callr	r2
1000ebe0:	00000206 	br	1000ebec <alt_get_errno+0x3c>
1000ebe4:	00840074 	movhi	r2,4097
1000ebe8:	1094b604 	addi	r2,r2,21208
}
1000ebec:	e037883a 	mov	sp,fp
1000ebf0:	dfc00117 	ldw	ra,4(sp)
1000ebf4:	df000017 	ldw	fp,0(sp)
1000ebf8:	dec00204 	addi	sp,sp,8
1000ebfc:	f800283a 	ret

1000ec00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000ec00:	defffb04 	addi	sp,sp,-20
1000ec04:	dfc00415 	stw	ra,16(sp)
1000ec08:	df000315 	stw	fp,12(sp)
1000ec0c:	df000304 	addi	fp,sp,12
1000ec10:	e13ffe15 	stw	r4,-8(fp)
1000ec14:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ec18:	e0bffe17 	ldw	r2,-8(fp)
1000ec1c:	10000816 	blt	r2,zero,1000ec40 <fstat+0x40>
1000ec20:	e13ffe17 	ldw	r4,-8(fp)
1000ec24:	01400304 	movi	r5,12
1000ec28:	000c2b80 	call	1000c2b8 <__mulsi3>
1000ec2c:	1007883a 	mov	r3,r2
1000ec30:	00840074 	movhi	r2,4097
1000ec34:	10896c04 	addi	r2,r2,9648
1000ec38:	1885883a 	add	r2,r3,r2
1000ec3c:	00000106 	br	1000ec44 <fstat+0x44>
1000ec40:	0005883a 	mov	r2,zero
1000ec44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000ec48:	e0bffd17 	ldw	r2,-12(fp)
1000ec4c:	10001026 	beq	r2,zero,1000ec90 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000ec50:	e0bffd17 	ldw	r2,-12(fp)
1000ec54:	10800017 	ldw	r2,0(r2)
1000ec58:	10800817 	ldw	r2,32(r2)
1000ec5c:	10000726 	beq	r2,zero,1000ec7c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000ec60:	e0bffd17 	ldw	r2,-12(fp)
1000ec64:	10800017 	ldw	r2,0(r2)
1000ec68:	10800817 	ldw	r2,32(r2)
1000ec6c:	e13ffd17 	ldw	r4,-12(fp)
1000ec70:	e17fff17 	ldw	r5,-4(fp)
1000ec74:	103ee83a 	callr	r2
1000ec78:	00000906 	br	1000eca0 <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000ec7c:	e0bfff17 	ldw	r2,-4(fp)
1000ec80:	00c80004 	movi	r3,8192
1000ec84:	10c00115 	stw	r3,4(r2)
      return 0;
1000ec88:	0005883a 	mov	r2,zero
1000ec8c:	00000406 	br	1000eca0 <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ec90:	000ebb00 	call	1000ebb0 <alt_get_errno>
1000ec94:	00c01444 	movi	r3,81
1000ec98:	10c00015 	stw	r3,0(r2)
    return -1;
1000ec9c:	00bfffc4 	movi	r2,-1
  }
}
1000eca0:	e037883a 	mov	sp,fp
1000eca4:	dfc00117 	ldw	ra,4(sp)
1000eca8:	df000017 	ldw	fp,0(sp)
1000ecac:	dec00204 	addi	sp,sp,8
1000ecb0:	f800283a 	ret

1000ecb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ecb4:	defffe04 	addi	sp,sp,-8
1000ecb8:	dfc00115 	stw	ra,4(sp)
1000ecbc:	df000015 	stw	fp,0(sp)
1000ecc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ecc4:	00840074 	movhi	r2,4097
1000ecc8:	108def04 	addi	r2,r2,14268
1000eccc:	10800017 	ldw	r2,0(r2)
1000ecd0:	10000526 	beq	r2,zero,1000ece8 <alt_get_errno+0x34>
1000ecd4:	00840074 	movhi	r2,4097
1000ecd8:	108def04 	addi	r2,r2,14268
1000ecdc:	10800017 	ldw	r2,0(r2)
1000ece0:	103ee83a 	callr	r2
1000ece4:	00000206 	br	1000ecf0 <alt_get_errno+0x3c>
1000ece8:	00840074 	movhi	r2,4097
1000ecec:	1094b604 	addi	r2,r2,21208
}
1000ecf0:	e037883a 	mov	sp,fp
1000ecf4:	dfc00117 	ldw	ra,4(sp)
1000ecf8:	df000017 	ldw	fp,0(sp)
1000ecfc:	dec00204 	addi	sp,sp,8
1000ed00:	f800283a 	ret

1000ed04 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000ed04:	deffed04 	addi	sp,sp,-76
1000ed08:	dfc01215 	stw	ra,72(sp)
1000ed0c:	df001115 	stw	fp,68(sp)
1000ed10:	df001104 	addi	fp,sp,68
1000ed14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ed18:	e0bfff17 	ldw	r2,-4(fp)
1000ed1c:	10000816 	blt	r2,zero,1000ed40 <isatty+0x3c>
1000ed20:	e13fff17 	ldw	r4,-4(fp)
1000ed24:	01400304 	movi	r5,12
1000ed28:	000c2b80 	call	1000c2b8 <__mulsi3>
1000ed2c:	1007883a 	mov	r3,r2
1000ed30:	00840074 	movhi	r2,4097
1000ed34:	10896c04 	addi	r2,r2,9648
1000ed38:	1885883a 	add	r2,r3,r2
1000ed3c:	00000106 	br	1000ed44 <isatty+0x40>
1000ed40:	0005883a 	mov	r2,zero
1000ed44:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ed48:	e0bfef17 	ldw	r2,-68(fp)
1000ed4c:	10000e26 	beq	r2,zero,1000ed88 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ed50:	e0bfef17 	ldw	r2,-68(fp)
1000ed54:	10800017 	ldw	r2,0(r2)
1000ed58:	10800817 	ldw	r2,32(r2)
1000ed5c:	1000021e 	bne	r2,zero,1000ed68 <isatty+0x64>
    {
      return 1;
1000ed60:	00800044 	movi	r2,1
1000ed64:	00000c06 	br	1000ed98 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000ed68:	e0bff004 	addi	r2,fp,-64
1000ed6c:	e13fff17 	ldw	r4,-4(fp)
1000ed70:	100b883a 	mov	r5,r2
1000ed74:	000ec000 	call	1000ec00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000ed78:	e0bff117 	ldw	r2,-60(fp)
1000ed7c:	10880020 	cmpeqi	r2,r2,8192
1000ed80:	10803fcc 	andi	r2,r2,255
1000ed84:	00000406 	br	1000ed98 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ed88:	000ecb40 	call	1000ecb4 <alt_get_errno>
1000ed8c:	00c01444 	movi	r3,81
1000ed90:	10c00015 	stw	r3,0(r2)
    return 0;
1000ed94:	0005883a 	mov	r2,zero
  }
}
1000ed98:	e037883a 	mov	sp,fp
1000ed9c:	dfc00117 	ldw	ra,4(sp)
1000eda0:	df000017 	ldw	fp,0(sp)
1000eda4:	dec00204 	addi	sp,sp,8
1000eda8:	f800283a 	ret

1000edac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000edac:	defffc04 	addi	sp,sp,-16
1000edb0:	df000315 	stw	fp,12(sp)
1000edb4:	df000304 	addi	fp,sp,12
1000edb8:	e13ffd15 	stw	r4,-12(fp)
1000edbc:	e17ffe15 	stw	r5,-8(fp)
1000edc0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000edc4:	e0fffe17 	ldw	r3,-8(fp)
1000edc8:	e0bffd17 	ldw	r2,-12(fp)
1000edcc:	18800c26 	beq	r3,r2,1000ee00 <alt_load_section+0x54>
  {
    while( to != end )
1000edd0:	00000806 	br	1000edf4 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000edd4:	e0bffe17 	ldw	r2,-8(fp)
1000edd8:	10c00104 	addi	r3,r2,4
1000eddc:	e0fffe15 	stw	r3,-8(fp)
1000ede0:	e0fffd17 	ldw	r3,-12(fp)
1000ede4:	19000104 	addi	r4,r3,4
1000ede8:	e13ffd15 	stw	r4,-12(fp)
1000edec:	18c00017 	ldw	r3,0(r3)
1000edf0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000edf4:	e0fffe17 	ldw	r3,-8(fp)
1000edf8:	e0bfff17 	ldw	r2,-4(fp)
1000edfc:	18bff51e 	bne	r3,r2,1000edd4 <__alt_data_end+0xf800edd4>
    {
      *to++ = *from++;
    }
  }
}
1000ee00:	e037883a 	mov	sp,fp
1000ee04:	df000017 	ldw	fp,0(sp)
1000ee08:	dec00104 	addi	sp,sp,4
1000ee0c:	f800283a 	ret

1000ee10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ee10:	defffe04 	addi	sp,sp,-8
1000ee14:	dfc00115 	stw	ra,4(sp)
1000ee18:	df000015 	stw	fp,0(sp)
1000ee1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ee20:	01040074 	movhi	r4,4097
1000ee24:	210df404 	addi	r4,r4,14288
1000ee28:	01440074 	movhi	r5,4097
1000ee2c:	29473904 	addi	r5,r5,7396
1000ee30:	01840074 	movhi	r6,4097
1000ee34:	318df404 	addi	r6,r6,14288
1000ee38:	000edac0 	call	1000edac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ee3c:	01040034 	movhi	r4,4096
1000ee40:	21000804 	addi	r4,r4,32
1000ee44:	01440034 	movhi	r5,4096
1000ee48:	29400804 	addi	r5,r5,32
1000ee4c:	01840034 	movhi	r6,4096
1000ee50:	31806f04 	addi	r6,r6,444
1000ee54:	000edac0 	call	1000edac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ee58:	01040074 	movhi	r4,4097
1000ee5c:	21049b04 	addi	r4,r4,4716
1000ee60:	01440074 	movhi	r5,4097
1000ee64:	29449b04 	addi	r5,r5,4716
1000ee68:	01840074 	movhi	r6,4097
1000ee6c:	31873904 	addi	r6,r6,7396
1000ee70:	000edac0 	call	1000edac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000ee74:	00101dc0 	call	100101dc <alt_dcache_flush_all>
  alt_icache_flush_all();
1000ee78:	00103a00 	call	100103a0 <alt_icache_flush_all>
}
1000ee7c:	e037883a 	mov	sp,fp
1000ee80:	dfc00117 	ldw	ra,4(sp)
1000ee84:	df000017 	ldw	fp,0(sp)
1000ee88:	dec00204 	addi	sp,sp,8
1000ee8c:	f800283a 	ret

1000ee90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ee90:	defffe04 	addi	sp,sp,-8
1000ee94:	dfc00115 	stw	ra,4(sp)
1000ee98:	df000015 	stw	fp,0(sp)
1000ee9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eea0:	00840074 	movhi	r2,4097
1000eea4:	108def04 	addi	r2,r2,14268
1000eea8:	10800017 	ldw	r2,0(r2)
1000eeac:	10000526 	beq	r2,zero,1000eec4 <alt_get_errno+0x34>
1000eeb0:	00840074 	movhi	r2,4097
1000eeb4:	108def04 	addi	r2,r2,14268
1000eeb8:	10800017 	ldw	r2,0(r2)
1000eebc:	103ee83a 	callr	r2
1000eec0:	00000206 	br	1000eecc <alt_get_errno+0x3c>
1000eec4:	00840074 	movhi	r2,4097
1000eec8:	1094b604 	addi	r2,r2,21208
}
1000eecc:	e037883a 	mov	sp,fp
1000eed0:	dfc00117 	ldw	ra,4(sp)
1000eed4:	df000017 	ldw	fp,0(sp)
1000eed8:	dec00204 	addi	sp,sp,8
1000eedc:	f800283a 	ret

1000eee0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000eee0:	defff904 	addi	sp,sp,-28
1000eee4:	dfc00615 	stw	ra,24(sp)
1000eee8:	df000515 	stw	fp,20(sp)
1000eeec:	df000504 	addi	fp,sp,20
1000eef0:	e13ffd15 	stw	r4,-12(fp)
1000eef4:	e17ffe15 	stw	r5,-8(fp)
1000eef8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000eefc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ef00:	e0bffd17 	ldw	r2,-12(fp)
1000ef04:	10000816 	blt	r2,zero,1000ef28 <lseek+0x48>
1000ef08:	e13ffd17 	ldw	r4,-12(fp)
1000ef0c:	01400304 	movi	r5,12
1000ef10:	000c2b80 	call	1000c2b8 <__mulsi3>
1000ef14:	1007883a 	mov	r3,r2
1000ef18:	00840074 	movhi	r2,4097
1000ef1c:	10896c04 	addi	r2,r2,9648
1000ef20:	1885883a 	add	r2,r3,r2
1000ef24:	00000106 	br	1000ef2c <lseek+0x4c>
1000ef28:	0005883a 	mov	r2,zero
1000ef2c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000ef30:	e0bffc17 	ldw	r2,-16(fp)
1000ef34:	10001026 	beq	r2,zero,1000ef78 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000ef38:	e0bffc17 	ldw	r2,-16(fp)
1000ef3c:	10800017 	ldw	r2,0(r2)
1000ef40:	10800717 	ldw	r2,28(r2)
1000ef44:	10000926 	beq	r2,zero,1000ef6c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000ef48:	e0bffc17 	ldw	r2,-16(fp)
1000ef4c:	10800017 	ldw	r2,0(r2)
1000ef50:	10800717 	ldw	r2,28(r2)
1000ef54:	e13ffc17 	ldw	r4,-16(fp)
1000ef58:	e17ffe17 	ldw	r5,-8(fp)
1000ef5c:	e1bfff17 	ldw	r6,-4(fp)
1000ef60:	103ee83a 	callr	r2
1000ef64:	e0bffb15 	stw	r2,-20(fp)
1000ef68:	00000506 	br	1000ef80 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000ef6c:	00bfde84 	movi	r2,-134
1000ef70:	e0bffb15 	stw	r2,-20(fp)
1000ef74:	00000206 	br	1000ef80 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000ef78:	00bfebc4 	movi	r2,-81
1000ef7c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000ef80:	e0bffb17 	ldw	r2,-20(fp)
1000ef84:	1000060e 	bge	r2,zero,1000efa0 <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
1000ef88:	000ee900 	call	1000ee90 <alt_get_errno>
1000ef8c:	e0fffb17 	ldw	r3,-20(fp)
1000ef90:	00c7c83a 	sub	r3,zero,r3
1000ef94:	10c00015 	stw	r3,0(r2)
    rc = -1;
1000ef98:	00bfffc4 	movi	r2,-1
1000ef9c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000efa0:	e0bffb17 	ldw	r2,-20(fp)
}
1000efa4:	e037883a 	mov	sp,fp
1000efa8:	dfc00117 	ldw	ra,4(sp)
1000efac:	df000017 	ldw	fp,0(sp)
1000efb0:	dec00204 	addi	sp,sp,8
1000efb4:	f800283a 	ret

1000efb8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000efb8:	defffd04 	addi	sp,sp,-12
1000efbc:	dfc00215 	stw	ra,8(sp)
1000efc0:	df000115 	stw	fp,4(sp)
1000efc4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000efc8:	0009883a 	mov	r4,zero
1000efcc:	000f4940 	call	1000f494 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000efd0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000efd4:	000f4c80 	call	1000f4c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000efd8:	01040074 	movhi	r4,4097
1000efdc:	21072f04 	addi	r4,r4,7356
1000efe0:	01440074 	movhi	r5,4097
1000efe4:	29472f04 	addi	r5,r5,7356
1000efe8:	01840074 	movhi	r6,4097
1000efec:	31872f04 	addi	r6,r6,7356
1000eff0:	00107640 	call	10010764 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000eff4:	00102e80 	call	100102e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000eff8:	01040074 	movhi	r4,4097
1000effc:	2100d104 	addi	r4,r4,836
1000f000:	0010eb00 	call	10010eb0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f004:	d126d317 	ldw	r4,-25780(gp)
1000f008:	d0e6d417 	ldw	r3,-25776(gp)
1000f00c:	d0a6d517 	ldw	r2,-25772(gp)
1000f010:	180b883a 	mov	r5,r3
1000f014:	100d883a 	mov	r6,r2
1000f018:	000031c0 	call	1000031c <main>
1000f01c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f020:	01000044 	movi	r4,1
1000f024:	000eab40 	call	1000eab4 <close>
  exit (result);
1000f028:	e13fff17 	ldw	r4,-4(fp)
1000f02c:	0010ec40 	call	10010ec4 <exit>

1000f030 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f030:	defffe04 	addi	sp,sp,-8
1000f034:	df000115 	stw	fp,4(sp)
1000f038:	df000104 	addi	fp,sp,4
1000f03c:	e13fff15 	stw	r4,-4(fp)
}
1000f040:	e037883a 	mov	sp,fp
1000f044:	df000017 	ldw	fp,0(sp)
1000f048:	dec00104 	addi	sp,sp,4
1000f04c:	f800283a 	ret

1000f050 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f050:	defffe04 	addi	sp,sp,-8
1000f054:	df000115 	stw	fp,4(sp)
1000f058:	df000104 	addi	fp,sp,4
1000f05c:	e13fff15 	stw	r4,-4(fp)
}
1000f060:	e037883a 	mov	sp,fp
1000f064:	df000017 	ldw	fp,0(sp)
1000f068:	dec00104 	addi	sp,sp,4
1000f06c:	f800283a 	ret

1000f070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f070:	defffe04 	addi	sp,sp,-8
1000f074:	dfc00115 	stw	ra,4(sp)
1000f078:	df000015 	stw	fp,0(sp)
1000f07c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f080:	00840074 	movhi	r2,4097
1000f084:	108def04 	addi	r2,r2,14268
1000f088:	10800017 	ldw	r2,0(r2)
1000f08c:	10000526 	beq	r2,zero,1000f0a4 <alt_get_errno+0x34>
1000f090:	00840074 	movhi	r2,4097
1000f094:	108def04 	addi	r2,r2,14268
1000f098:	10800017 	ldw	r2,0(r2)
1000f09c:	103ee83a 	callr	r2
1000f0a0:	00000206 	br	1000f0ac <alt_get_errno+0x3c>
1000f0a4:	00840074 	movhi	r2,4097
1000f0a8:	1094b604 	addi	r2,r2,21208
}
1000f0ac:	e037883a 	mov	sp,fp
1000f0b0:	dfc00117 	ldw	ra,4(sp)
1000f0b4:	df000017 	ldw	fp,0(sp)
1000f0b8:	dec00204 	addi	sp,sp,8
1000f0bc:	f800283a 	ret

1000f0c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f0c0:	defff904 	addi	sp,sp,-28
1000f0c4:	dfc00615 	stw	ra,24(sp)
1000f0c8:	df000515 	stw	fp,20(sp)
1000f0cc:	df000504 	addi	fp,sp,20
1000f0d0:	e13ffd15 	stw	r4,-12(fp)
1000f0d4:	e17ffe15 	stw	r5,-8(fp)
1000f0d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f0dc:	e0bffd17 	ldw	r2,-12(fp)
1000f0e0:	10000816 	blt	r2,zero,1000f104 <read+0x44>
1000f0e4:	e13ffd17 	ldw	r4,-12(fp)
1000f0e8:	01400304 	movi	r5,12
1000f0ec:	000c2b80 	call	1000c2b8 <__mulsi3>
1000f0f0:	1007883a 	mov	r3,r2
1000f0f4:	00840074 	movhi	r2,4097
1000f0f8:	10896c04 	addi	r2,r2,9648
1000f0fc:	1885883a 	add	r2,r3,r2
1000f100:	00000106 	br	1000f108 <read+0x48>
1000f104:	0005883a 	mov	r2,zero
1000f108:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f10c:	e0bffb17 	ldw	r2,-20(fp)
1000f110:	10002026 	beq	r2,zero,1000f194 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f114:	e0bffb17 	ldw	r2,-20(fp)
1000f118:	10800217 	ldw	r2,8(r2)
1000f11c:	108000cc 	andi	r2,r2,3
1000f120:	10800060 	cmpeqi	r2,r2,1
1000f124:	1000171e 	bne	r2,zero,1000f184 <read+0xc4>
        (fd->dev->read))
1000f128:	e0bffb17 	ldw	r2,-20(fp)
1000f12c:	10800017 	ldw	r2,0(r2)
1000f130:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f134:	10001326 	beq	r2,zero,1000f184 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f138:	e0bffb17 	ldw	r2,-20(fp)
1000f13c:	10800017 	ldw	r2,0(r2)
1000f140:	10800517 	ldw	r2,20(r2)
1000f144:	e0ffff17 	ldw	r3,-4(fp)
1000f148:	e13ffb17 	ldw	r4,-20(fp)
1000f14c:	e17ffe17 	ldw	r5,-8(fp)
1000f150:	180d883a 	mov	r6,r3
1000f154:	103ee83a 	callr	r2
1000f158:	e0bffc15 	stw	r2,-16(fp)
1000f15c:	e0bffc17 	ldw	r2,-16(fp)
1000f160:	1000060e 	bge	r2,zero,1000f17c <read+0xbc>
        {
          ALT_ERRNO = -rval;
1000f164:	000f0700 	call	1000f070 <alt_get_errno>
1000f168:	e0fffc17 	ldw	r3,-16(fp)
1000f16c:	00c7c83a 	sub	r3,zero,r3
1000f170:	10c00015 	stw	r3,0(r2)
          return -1;
1000f174:	00bfffc4 	movi	r2,-1
1000f178:	00000a06 	br	1000f1a4 <read+0xe4>
        }
        return rval;
1000f17c:	e0bffc17 	ldw	r2,-16(fp)
1000f180:	00000806 	br	1000f1a4 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f184:	000f0700 	call	1000f070 <alt_get_errno>
1000f188:	00c00344 	movi	r3,13
1000f18c:	10c00015 	stw	r3,0(r2)
1000f190:	00000306 	br	1000f1a0 <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f194:	000f0700 	call	1000f070 <alt_get_errno>
1000f198:	00c01444 	movi	r3,81
1000f19c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000f1a0:	00bfffc4 	movi	r2,-1
}
1000f1a4:	e037883a 	mov	sp,fp
1000f1a8:	dfc00117 	ldw	ra,4(sp)
1000f1ac:	df000017 	ldw	fp,0(sp)
1000f1b0:	dec00204 	addi	sp,sp,8
1000f1b4:	f800283a 	ret

1000f1b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f1b8:	defffc04 	addi	sp,sp,-16
1000f1bc:	dfc00315 	stw	ra,12(sp)
1000f1c0:	df000215 	stw	fp,8(sp)
1000f1c4:	dc000115 	stw	r16,4(sp)
1000f1c8:	df000204 	addi	fp,sp,8
1000f1cc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f1d0:	e0bffe17 	ldw	r2,-8(fp)
1000f1d4:	108000d0 	cmplti	r2,r2,3
1000f1d8:	1000111e 	bne	r2,zero,1000f220 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f1dc:	04040074 	movhi	r16,4097
1000f1e0:	84096c04 	addi	r16,r16,9648
1000f1e4:	e0bffe17 	ldw	r2,-8(fp)
1000f1e8:	1009883a 	mov	r4,r2
1000f1ec:	01400304 	movi	r5,12
1000f1f0:	000c2b80 	call	1000c2b8 <__mulsi3>
1000f1f4:	8085883a 	add	r2,r16,r2
1000f1f8:	10800204 	addi	r2,r2,8
1000f1fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f200:	04040074 	movhi	r16,4097
1000f204:	84096c04 	addi	r16,r16,9648
1000f208:	e0bffe17 	ldw	r2,-8(fp)
1000f20c:	1009883a 	mov	r4,r2
1000f210:	01400304 	movi	r5,12
1000f214:	000c2b80 	call	1000c2b8 <__mulsi3>
1000f218:	8085883a 	add	r2,r16,r2
1000f21c:	10000015 	stw	zero,0(r2)
  }
}
1000f220:	e6ffff04 	addi	sp,fp,-4
1000f224:	dfc00217 	ldw	ra,8(sp)
1000f228:	df000117 	ldw	fp,4(sp)
1000f22c:	dc000017 	ldw	r16,0(sp)
1000f230:	dec00304 	addi	sp,sp,12
1000f234:	f800283a 	ret

1000f238 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f238:	defff904 	addi	sp,sp,-28
1000f23c:	df000615 	stw	fp,24(sp)
1000f240:	df000604 	addi	fp,sp,24
1000f244:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f248:	0005303a 	rdctl	r2,status
1000f24c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f250:	e0fffc17 	ldw	r3,-16(fp)
1000f254:	00bfff84 	movi	r2,-2
1000f258:	1884703a 	and	r2,r3,r2
1000f25c:	1001703a 	wrctl	status,r2
  
  return context;
1000f260:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f264:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f268:	d0a00c17 	ldw	r2,-32720(gp)
1000f26c:	10c000c4 	addi	r3,r2,3
1000f270:	00bfff04 	movi	r2,-4
1000f274:	1884703a 	and	r2,r3,r2
1000f278:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f27c:	d0e00c17 	ldw	r3,-32720(gp)
1000f280:	e0bfff17 	ldw	r2,-4(fp)
1000f284:	1885883a 	add	r2,r3,r2
1000f288:	00c60034 	movhi	r3,6144
1000f28c:	18c00004 	addi	r3,r3,0
1000f290:	1880062e 	bgeu	r3,r2,1000f2ac <sbrk+0x74>
1000f294:	e0bffa17 	ldw	r2,-24(fp)
1000f298:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f29c:	e0bffd17 	ldw	r2,-12(fp)
1000f2a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f2a4:	00bfffc4 	movi	r2,-1
1000f2a8:	00000b06 	br	1000f2d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f2ac:	d0a00c17 	ldw	r2,-32720(gp)
1000f2b0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f2b4:	d0e00c17 	ldw	r3,-32720(gp)
1000f2b8:	e0bfff17 	ldw	r2,-4(fp)
1000f2bc:	1885883a 	add	r2,r3,r2
1000f2c0:	d0a00c15 	stw	r2,-32720(gp)
1000f2c4:	e0bffa17 	ldw	r2,-24(fp)
1000f2c8:	e0bffe15 	stw	r2,-8(fp)
1000f2cc:	e0bffe17 	ldw	r2,-8(fp)
1000f2d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f2d4:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f2d8:	e037883a 	mov	sp,fp
1000f2dc:	df000017 	ldw	fp,0(sp)
1000f2e0:	dec00104 	addi	sp,sp,4
1000f2e4:	f800283a 	ret

1000f2e8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000f2e8:	defffd04 	addi	sp,sp,-12
1000f2ec:	dfc00215 	stw	ra,8(sp)
1000f2f0:	df000115 	stw	fp,4(sp)
1000f2f4:	df000104 	addi	fp,sp,4
1000f2f8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000f2fc:	e13fff17 	ldw	r4,-4(fp)
1000f300:	00100880 	call	10010088 <alt_busy_sleep>
}
1000f304:	e037883a 	mov	sp,fp
1000f308:	dfc00117 	ldw	ra,4(sp)
1000f30c:	df000017 	ldw	fp,0(sp)
1000f310:	dec00204 	addi	sp,sp,8
1000f314:	f800283a 	ret

1000f318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f318:	defffe04 	addi	sp,sp,-8
1000f31c:	dfc00115 	stw	ra,4(sp)
1000f320:	df000015 	stw	fp,0(sp)
1000f324:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f328:	00840074 	movhi	r2,4097
1000f32c:	108def04 	addi	r2,r2,14268
1000f330:	10800017 	ldw	r2,0(r2)
1000f334:	10000526 	beq	r2,zero,1000f34c <alt_get_errno+0x34>
1000f338:	00840074 	movhi	r2,4097
1000f33c:	108def04 	addi	r2,r2,14268
1000f340:	10800017 	ldw	r2,0(r2)
1000f344:	103ee83a 	callr	r2
1000f348:	00000206 	br	1000f354 <alt_get_errno+0x3c>
1000f34c:	00840074 	movhi	r2,4097
1000f350:	1094b604 	addi	r2,r2,21208
}
1000f354:	e037883a 	mov	sp,fp
1000f358:	dfc00117 	ldw	ra,4(sp)
1000f35c:	df000017 	ldw	fp,0(sp)
1000f360:	dec00204 	addi	sp,sp,8
1000f364:	f800283a 	ret

1000f368 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f368:	defff904 	addi	sp,sp,-28
1000f36c:	dfc00615 	stw	ra,24(sp)
1000f370:	df000515 	stw	fp,20(sp)
1000f374:	df000504 	addi	fp,sp,20
1000f378:	e13ffd15 	stw	r4,-12(fp)
1000f37c:	e17ffe15 	stw	r5,-8(fp)
1000f380:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f384:	e0bffd17 	ldw	r2,-12(fp)
1000f388:	10000816 	blt	r2,zero,1000f3ac <write+0x44>
1000f38c:	e13ffd17 	ldw	r4,-12(fp)
1000f390:	01400304 	movi	r5,12
1000f394:	000c2b80 	call	1000c2b8 <__mulsi3>
1000f398:	1007883a 	mov	r3,r2
1000f39c:	00840074 	movhi	r2,4097
1000f3a0:	10896c04 	addi	r2,r2,9648
1000f3a4:	1885883a 	add	r2,r3,r2
1000f3a8:	00000106 	br	1000f3b0 <write+0x48>
1000f3ac:	0005883a 	mov	r2,zero
1000f3b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f3b4:	e0bffb17 	ldw	r2,-20(fp)
1000f3b8:	10001f26 	beq	r2,zero,1000f438 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f3bc:	e0bffb17 	ldw	r2,-20(fp)
1000f3c0:	10800217 	ldw	r2,8(r2)
1000f3c4:	108000cc 	andi	r2,r2,3
1000f3c8:	10001726 	beq	r2,zero,1000f428 <write+0xc0>
1000f3cc:	e0bffb17 	ldw	r2,-20(fp)
1000f3d0:	10800017 	ldw	r2,0(r2)
1000f3d4:	10800617 	ldw	r2,24(r2)
1000f3d8:	10001326 	beq	r2,zero,1000f428 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f3dc:	e0bffb17 	ldw	r2,-20(fp)
1000f3e0:	10800017 	ldw	r2,0(r2)
1000f3e4:	10800617 	ldw	r2,24(r2)
1000f3e8:	e0ffff17 	ldw	r3,-4(fp)
1000f3ec:	e13ffb17 	ldw	r4,-20(fp)
1000f3f0:	e17ffe17 	ldw	r5,-8(fp)
1000f3f4:	180d883a 	mov	r6,r3
1000f3f8:	103ee83a 	callr	r2
1000f3fc:	e0bffc15 	stw	r2,-16(fp)
1000f400:	e0bffc17 	ldw	r2,-16(fp)
1000f404:	1000060e 	bge	r2,zero,1000f420 <write+0xb8>
      {
        ALT_ERRNO = -rval;
1000f408:	000f3180 	call	1000f318 <alt_get_errno>
1000f40c:	e0fffc17 	ldw	r3,-16(fp)
1000f410:	00c7c83a 	sub	r3,zero,r3
1000f414:	10c00015 	stw	r3,0(r2)
        return -1;
1000f418:	00bfffc4 	movi	r2,-1
1000f41c:	00000a06 	br	1000f448 <write+0xe0>
      }
      return rval;
1000f420:	e0bffc17 	ldw	r2,-16(fp)
1000f424:	00000806 	br	1000f448 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f428:	000f3180 	call	1000f318 <alt_get_errno>
1000f42c:	00c00344 	movi	r3,13
1000f430:	10c00015 	stw	r3,0(r2)
1000f434:	00000306 	br	1000f444 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f438:	000f3180 	call	1000f318 <alt_get_errno>
1000f43c:	00c01444 	movi	r3,81
1000f440:	10c00015 	stw	r3,0(r2)
  }
  return -1;
1000f444:	00bfffc4 	movi	r2,-1
}
1000f448:	e037883a 	mov	sp,fp
1000f44c:	dfc00117 	ldw	ra,4(sp)
1000f450:	df000017 	ldw	fp,0(sp)
1000f454:	dec00204 	addi	sp,sp,8
1000f458:	f800283a 	ret

1000f45c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f45c:	defffd04 	addi	sp,sp,-12
1000f460:	dfc00215 	stw	ra,8(sp)
1000f464:	df000115 	stw	fp,4(sp)
1000f468:	df000104 	addi	fp,sp,4
1000f46c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f470:	e13fff17 	ldw	r4,-4(fp)
1000f474:	01440074 	movhi	r5,4097
1000f478:	294dec04 	addi	r5,r5,14256
1000f47c:	00102480 	call	10010248 <alt_dev_llist_insert>
}
1000f480:	e037883a 	mov	sp,fp
1000f484:	dfc00117 	ldw	ra,4(sp)
1000f488:	df000017 	ldw	fp,0(sp)
1000f48c:	dec00204 	addi	sp,sp,8
1000f490:	f800283a 	ret

1000f494 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f494:	defffd04 	addi	sp,sp,-12
1000f498:	dfc00215 	stw	ra,8(sp)
1000f49c:	df000115 	stw	fp,4(sp)
1000f4a0:	df000104 	addi	fp,sp,4
1000f4a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000f4a8:	0010c180 	call	10010c18 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f4ac:	00800044 	movi	r2,1
1000f4b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f4b4:	e037883a 	mov	sp,fp
1000f4b8:	dfc00117 	ldw	ra,4(sp)
1000f4bc:	df000017 	ldw	fp,0(sp)
1000f4c0:	dec00204 	addi	sp,sp,8
1000f4c4:	f800283a 	ret

1000f4c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f4c8:	defffe04 	addi	sp,sp,-8
1000f4cc:	dfc00115 	stw	ra,4(sp)
1000f4d0:	df000015 	stw	fp,0(sp)
1000f4d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f4d8:	01040074 	movhi	r4,4097
1000f4dc:	2109d604 	addi	r4,r4,10072
1000f4e0:	000b883a 	mov	r5,zero
1000f4e4:	01800144 	movi	r6,5
1000f4e8:	000f6740 	call	1000f674 <altera_avalon_jtag_uart_init>
1000f4ec:	01040074 	movhi	r4,4097
1000f4f0:	2109cc04 	addi	r4,r4,10032
1000f4f4:	000f45c0 	call	1000f45c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f4f8:	0001883a 	nop
}
1000f4fc:	e037883a 	mov	sp,fp
1000f500:	dfc00117 	ldw	ra,4(sp)
1000f504:	df000017 	ldw	fp,0(sp)
1000f508:	dec00204 	addi	sp,sp,8
1000f50c:	f800283a 	ret

1000f510 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f510:	defffa04 	addi	sp,sp,-24
1000f514:	dfc00515 	stw	ra,20(sp)
1000f518:	df000415 	stw	fp,16(sp)
1000f51c:	df000404 	addi	fp,sp,16
1000f520:	e13ffd15 	stw	r4,-12(fp)
1000f524:	e17ffe15 	stw	r5,-8(fp)
1000f528:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f52c:	e0bffd17 	ldw	r2,-12(fp)
1000f530:	10800017 	ldw	r2,0(r2)
1000f534:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f538:	e0bffc17 	ldw	r2,-16(fp)
1000f53c:	10c00a04 	addi	r3,r2,40
1000f540:	e0bffd17 	ldw	r2,-12(fp)
1000f544:	10800217 	ldw	r2,8(r2)
1000f548:	1809883a 	mov	r4,r3
1000f54c:	e17ffe17 	ldw	r5,-8(fp)
1000f550:	e1bfff17 	ldw	r6,-4(fp)
1000f554:	100f883a 	mov	r7,r2
1000f558:	000fb280 	call	1000fb28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f55c:	e037883a 	mov	sp,fp
1000f560:	dfc00117 	ldw	ra,4(sp)
1000f564:	df000017 	ldw	fp,0(sp)
1000f568:	dec00204 	addi	sp,sp,8
1000f56c:	f800283a 	ret

1000f570 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f570:	defffa04 	addi	sp,sp,-24
1000f574:	dfc00515 	stw	ra,20(sp)
1000f578:	df000415 	stw	fp,16(sp)
1000f57c:	df000404 	addi	fp,sp,16
1000f580:	e13ffd15 	stw	r4,-12(fp)
1000f584:	e17ffe15 	stw	r5,-8(fp)
1000f588:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f58c:	e0bffd17 	ldw	r2,-12(fp)
1000f590:	10800017 	ldw	r2,0(r2)
1000f594:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f598:	e0bffc17 	ldw	r2,-16(fp)
1000f59c:	10c00a04 	addi	r3,r2,40
1000f5a0:	e0bffd17 	ldw	r2,-12(fp)
1000f5a4:	10800217 	ldw	r2,8(r2)
1000f5a8:	1809883a 	mov	r4,r3
1000f5ac:	e17ffe17 	ldw	r5,-8(fp)
1000f5b0:	e1bfff17 	ldw	r6,-4(fp)
1000f5b4:	100f883a 	mov	r7,r2
1000f5b8:	000fd300 	call	1000fd30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f5bc:	e037883a 	mov	sp,fp
1000f5c0:	dfc00117 	ldw	ra,4(sp)
1000f5c4:	df000017 	ldw	fp,0(sp)
1000f5c8:	dec00204 	addi	sp,sp,8
1000f5cc:	f800283a 	ret

1000f5d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f5d0:	defffc04 	addi	sp,sp,-16
1000f5d4:	dfc00315 	stw	ra,12(sp)
1000f5d8:	df000215 	stw	fp,8(sp)
1000f5dc:	df000204 	addi	fp,sp,8
1000f5e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f5e4:	e0bfff17 	ldw	r2,-4(fp)
1000f5e8:	10800017 	ldw	r2,0(r2)
1000f5ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f5f0:	e0bffe17 	ldw	r2,-8(fp)
1000f5f4:	10c00a04 	addi	r3,r2,40
1000f5f8:	e0bfff17 	ldw	r2,-4(fp)
1000f5fc:	10800217 	ldw	r2,8(r2)
1000f600:	1809883a 	mov	r4,r3
1000f604:	100b883a 	mov	r5,r2
1000f608:	000f9d40 	call	1000f9d4 <altera_avalon_jtag_uart_close>
}
1000f60c:	e037883a 	mov	sp,fp
1000f610:	dfc00117 	ldw	ra,4(sp)
1000f614:	df000017 	ldw	fp,0(sp)
1000f618:	dec00204 	addi	sp,sp,8
1000f61c:	f800283a 	ret

1000f620 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000f620:	defffa04 	addi	sp,sp,-24
1000f624:	dfc00515 	stw	ra,20(sp)
1000f628:	df000415 	stw	fp,16(sp)
1000f62c:	df000404 	addi	fp,sp,16
1000f630:	e13ffd15 	stw	r4,-12(fp)
1000f634:	e17ffe15 	stw	r5,-8(fp)
1000f638:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000f63c:	e0bffd17 	ldw	r2,-12(fp)
1000f640:	10800017 	ldw	r2,0(r2)
1000f644:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000f648:	e0bffc17 	ldw	r2,-16(fp)
1000f64c:	10800a04 	addi	r2,r2,40
1000f650:	1009883a 	mov	r4,r2
1000f654:	e17ffe17 	ldw	r5,-8(fp)
1000f658:	e1bfff17 	ldw	r6,-4(fp)
1000f65c:	000fa3c0 	call	1000fa3c <altera_avalon_jtag_uart_ioctl>
}
1000f660:	e037883a 	mov	sp,fp
1000f664:	dfc00117 	ldw	ra,4(sp)
1000f668:	df000017 	ldw	fp,0(sp)
1000f66c:	dec00204 	addi	sp,sp,8
1000f670:	f800283a 	ret

1000f674 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000f674:	defffa04 	addi	sp,sp,-24
1000f678:	dfc00515 	stw	ra,20(sp)
1000f67c:	df000415 	stw	fp,16(sp)
1000f680:	df000404 	addi	fp,sp,16
1000f684:	e13ffd15 	stw	r4,-12(fp)
1000f688:	e17ffe15 	stw	r5,-8(fp)
1000f68c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f690:	e0bffd17 	ldw	r2,-12(fp)
1000f694:	00c00044 	movi	r3,1
1000f698:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000f69c:	e0bffd17 	ldw	r2,-12(fp)
1000f6a0:	10800017 	ldw	r2,0(r2)
1000f6a4:	10800104 	addi	r2,r2,4
1000f6a8:	e0fffd17 	ldw	r3,-12(fp)
1000f6ac:	18c00817 	ldw	r3,32(r3)
1000f6b0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000f6b4:	e0fffe17 	ldw	r3,-8(fp)
1000f6b8:	e0bfff17 	ldw	r2,-4(fp)
1000f6bc:	d8000015 	stw	zero,0(sp)
1000f6c0:	1809883a 	mov	r4,r3
1000f6c4:	100b883a 	mov	r5,r2
1000f6c8:	01840074 	movhi	r6,4097
1000f6cc:	31bdcd04 	addi	r6,r6,-2252
1000f6d0:	e1fffd17 	ldw	r7,-12(fp)
1000f6d4:	00103bc0 	call	100103bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000f6d8:	e0bffd17 	ldw	r2,-12(fp)
1000f6dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000f6e0:	e0bffd17 	ldw	r2,-12(fp)
1000f6e4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000f6e8:	00840074 	movhi	r2,4097
1000f6ec:	1094bb04 	addi	r2,r2,21228
1000f6f0:	10800017 	ldw	r2,0(r2)
1000f6f4:	1809883a 	mov	r4,r3
1000f6f8:	100b883a 	mov	r5,r2
1000f6fc:	01840074 	movhi	r6,4097
1000f700:	31be4c04 	addi	r6,r6,-1744
1000f704:	e1fffd17 	ldw	r7,-12(fp)
1000f708:	000ff480 	call	1000ff48 <alt_alarm_start>
1000f70c:	1000040e 	bge	r2,zero,1000f720 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000f710:	e0bffd17 	ldw	r2,-12(fp)
1000f714:	00e00034 	movhi	r3,32768
1000f718:	18ffffc4 	addi	r3,r3,-1
1000f71c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000f720:	e037883a 	mov	sp,fp
1000f724:	dfc00117 	ldw	ra,4(sp)
1000f728:	df000017 	ldw	fp,0(sp)
1000f72c:	dec00204 	addi	sp,sp,8
1000f730:	f800283a 	ret

1000f734 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000f734:	defff804 	addi	sp,sp,-32
1000f738:	df000715 	stw	fp,28(sp)
1000f73c:	df000704 	addi	fp,sp,28
1000f740:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000f744:	e0bfff17 	ldw	r2,-4(fp)
1000f748:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000f74c:	e0bffb17 	ldw	r2,-20(fp)
1000f750:	10800017 	ldw	r2,0(r2)
1000f754:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f758:	e0bffc17 	ldw	r2,-16(fp)
1000f75c:	10800104 	addi	r2,r2,4
1000f760:	10800037 	ldwio	r2,0(r2)
1000f764:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000f768:	e0bffd17 	ldw	r2,-12(fp)
1000f76c:	1080c00c 	andi	r2,r2,768
1000f770:	1000011e 	bne	r2,zero,1000f778 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000f774:	00006a06 	br	1000f920 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000f778:	e0bffd17 	ldw	r2,-12(fp)
1000f77c:	1080400c 	andi	r2,r2,256
1000f780:	10003226 	beq	r2,zero,1000f84c <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000f784:	00800074 	movhi	r2,1
1000f788:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f78c:	e0bffb17 	ldw	r2,-20(fp)
1000f790:	10800a17 	ldw	r2,40(r2)
1000f794:	10800044 	addi	r2,r2,1
1000f798:	1081ffcc 	andi	r2,r2,2047
1000f79c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000f7a0:	e0bffb17 	ldw	r2,-20(fp)
1000f7a4:	10c00b17 	ldw	r3,44(r2)
1000f7a8:	e0bffe17 	ldw	r2,-8(fp)
1000f7ac:	1880011e 	bne	r3,r2,1000f7b4 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000f7b0:	00001506 	br	1000f808 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000f7b4:	e0bffc17 	ldw	r2,-16(fp)
1000f7b8:	10800037 	ldwio	r2,0(r2)
1000f7bc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000f7c0:	e0bff917 	ldw	r2,-28(fp)
1000f7c4:	10a0000c 	andi	r2,r2,32768
1000f7c8:	1000011e 	bne	r2,zero,1000f7d0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000f7cc:	00000e06 	br	1000f808 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000f7d0:	e0bffb17 	ldw	r2,-20(fp)
1000f7d4:	10800a17 	ldw	r2,40(r2)
1000f7d8:	e0fff917 	ldw	r3,-28(fp)
1000f7dc:	e13ffb17 	ldw	r4,-20(fp)
1000f7e0:	2085883a 	add	r2,r4,r2
1000f7e4:	10800e04 	addi	r2,r2,56
1000f7e8:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f7ec:	e0bffb17 	ldw	r2,-20(fp)
1000f7f0:	10800a17 	ldw	r2,40(r2)
1000f7f4:	10800044 	addi	r2,r2,1
1000f7f8:	10c1ffcc 	andi	r3,r2,2047
1000f7fc:	e0bffb17 	ldw	r2,-20(fp)
1000f800:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000f804:	003fe106 	br	1000f78c <__alt_data_end+0xf800f78c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000f808:	e0bff917 	ldw	r2,-28(fp)
1000f80c:	10bfffec 	andhi	r2,r2,65535
1000f810:	10000e26 	beq	r2,zero,1000f84c <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f814:	e0bffb17 	ldw	r2,-20(fp)
1000f818:	10c00817 	ldw	r3,32(r2)
1000f81c:	00bfff84 	movi	r2,-2
1000f820:	1886703a 	and	r3,r3,r2
1000f824:	e0bffb17 	ldw	r2,-20(fp)
1000f828:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000f82c:	e0bffc17 	ldw	r2,-16(fp)
1000f830:	10800104 	addi	r2,r2,4
1000f834:	e0fffb17 	ldw	r3,-20(fp)
1000f838:	18c00817 	ldw	r3,32(r3)
1000f83c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f840:	e0bffc17 	ldw	r2,-16(fp)
1000f844:	10800104 	addi	r2,r2,4
1000f848:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000f84c:	e0bffd17 	ldw	r2,-12(fp)
1000f850:	1080800c 	andi	r2,r2,512
1000f854:	10003126 	beq	r2,zero,1000f91c <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000f858:	e0bffd17 	ldw	r2,-12(fp)
1000f85c:	1004d43a 	srli	r2,r2,16
1000f860:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f864:	00001406 	br	1000f8b8 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000f868:	e0bffc17 	ldw	r2,-16(fp)
1000f86c:	e0fffb17 	ldw	r3,-20(fp)
1000f870:	18c00d17 	ldw	r3,52(r3)
1000f874:	e13ffb17 	ldw	r4,-20(fp)
1000f878:	20c7883a 	add	r3,r4,r3
1000f87c:	18c20e04 	addi	r3,r3,2104
1000f880:	18c00003 	ldbu	r3,0(r3)
1000f884:	18c03fcc 	andi	r3,r3,255
1000f888:	18c0201c 	xori	r3,r3,128
1000f88c:	18ffe004 	addi	r3,r3,-128
1000f890:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f894:	e0bffb17 	ldw	r2,-20(fp)
1000f898:	10800d17 	ldw	r2,52(r2)
1000f89c:	10800044 	addi	r2,r2,1
1000f8a0:	10c1ffcc 	andi	r3,r2,2047
1000f8a4:	e0bffb17 	ldw	r2,-20(fp)
1000f8a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000f8ac:	e0bffa17 	ldw	r2,-24(fp)
1000f8b0:	10bfffc4 	addi	r2,r2,-1
1000f8b4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f8b8:	e0bffa17 	ldw	r2,-24(fp)
1000f8bc:	10000526 	beq	r2,zero,1000f8d4 <altera_avalon_jtag_uart_irq+0x1a0>
1000f8c0:	e0bffb17 	ldw	r2,-20(fp)
1000f8c4:	10c00d17 	ldw	r3,52(r2)
1000f8c8:	e0bffb17 	ldw	r2,-20(fp)
1000f8cc:	10800c17 	ldw	r2,48(r2)
1000f8d0:	18bfe51e 	bne	r3,r2,1000f868 <__alt_data_end+0xf800f868>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f8d4:	e0bffa17 	ldw	r2,-24(fp)
1000f8d8:	10001026 	beq	r2,zero,1000f91c <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f8dc:	e0bffb17 	ldw	r2,-20(fp)
1000f8e0:	10c00817 	ldw	r3,32(r2)
1000f8e4:	00bfff44 	movi	r2,-3
1000f8e8:	1886703a 	and	r3,r3,r2
1000f8ec:	e0bffb17 	ldw	r2,-20(fp)
1000f8f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f8f4:	e0bffb17 	ldw	r2,-20(fp)
1000f8f8:	10800017 	ldw	r2,0(r2)
1000f8fc:	10800104 	addi	r2,r2,4
1000f900:	e0fffb17 	ldw	r3,-20(fp)
1000f904:	18c00817 	ldw	r3,32(r3)
1000f908:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f90c:	e0bffc17 	ldw	r2,-16(fp)
1000f910:	10800104 	addi	r2,r2,4
1000f914:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000f918:	003f8f06 	br	1000f758 <__alt_data_end+0xf800f758>
1000f91c:	003f8e06 	br	1000f758 <__alt_data_end+0xf800f758>
}
1000f920:	e037883a 	mov	sp,fp
1000f924:	df000017 	ldw	fp,0(sp)
1000f928:	dec00104 	addi	sp,sp,4
1000f92c:	f800283a 	ret

1000f930 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000f930:	defff804 	addi	sp,sp,-32
1000f934:	df000715 	stw	fp,28(sp)
1000f938:	df000704 	addi	fp,sp,28
1000f93c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000f940:	e0bffb17 	ldw	r2,-20(fp)
1000f944:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000f948:	e0bff917 	ldw	r2,-28(fp)
1000f94c:	10800017 	ldw	r2,0(r2)
1000f950:	10800104 	addi	r2,r2,4
1000f954:	10800037 	ldwio	r2,0(r2)
1000f958:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000f95c:	e0bffa17 	ldw	r2,-24(fp)
1000f960:	1081000c 	andi	r2,r2,1024
1000f964:	10000a26 	beq	r2,zero,1000f990 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000f968:	e0bff917 	ldw	r2,-28(fp)
1000f96c:	10800017 	ldw	r2,0(r2)
1000f970:	10800104 	addi	r2,r2,4
1000f974:	e0fff917 	ldw	r3,-28(fp)
1000f978:	18c00817 	ldw	r3,32(r3)
1000f97c:	18c10014 	ori	r3,r3,1024
1000f980:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
1000f984:	e0bff917 	ldw	r2,-28(fp)
1000f988:	10000915 	stw	zero,36(r2)
1000f98c:	00000a06 	br	1000f9b8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000f990:	e0bff917 	ldw	r2,-28(fp)
1000f994:	10800917 	ldw	r2,36(r2)
1000f998:	00e00034 	movhi	r3,32768
1000f99c:	18ffff04 	addi	r3,r3,-4
1000f9a0:	18800536 	bltu	r3,r2,1000f9b8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
1000f9a4:	e0bff917 	ldw	r2,-28(fp)
1000f9a8:	10800917 	ldw	r2,36(r2)
1000f9ac:	10c00044 	addi	r3,r2,1
1000f9b0:	e0bff917 	ldw	r2,-28(fp)
1000f9b4:	10c00915 	stw	r3,36(r2)
1000f9b8:	00840074 	movhi	r2,4097
1000f9bc:	1094bb04 	addi	r2,r2,21228
1000f9c0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000f9c4:	e037883a 	mov	sp,fp
1000f9c8:	df000017 	ldw	fp,0(sp)
1000f9cc:	dec00104 	addi	sp,sp,4
1000f9d0:	f800283a 	ret

1000f9d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000f9d4:	defffd04 	addi	sp,sp,-12
1000f9d8:	df000215 	stw	fp,8(sp)
1000f9dc:	df000204 	addi	fp,sp,8
1000f9e0:	e13ffe15 	stw	r4,-8(fp)
1000f9e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000f9e8:	00000506 	br	1000fa00 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000f9ec:	e0bfff17 	ldw	r2,-4(fp)
1000f9f0:	1090000c 	andi	r2,r2,16384
1000f9f4:	10000226 	beq	r2,zero,1000fa00 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000f9f8:	00bffd44 	movi	r2,-11
1000f9fc:	00000b06 	br	1000fa2c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fa00:	e0bffe17 	ldw	r2,-8(fp)
1000fa04:	10c00d17 	ldw	r3,52(r2)
1000fa08:	e0bffe17 	ldw	r2,-8(fp)
1000fa0c:	10800c17 	ldw	r2,48(r2)
1000fa10:	18800526 	beq	r3,r2,1000fa28 <altera_avalon_jtag_uart_close+0x54>
1000fa14:	e0bffe17 	ldw	r2,-8(fp)
1000fa18:	10c00917 	ldw	r3,36(r2)
1000fa1c:	e0bffe17 	ldw	r2,-8(fp)
1000fa20:	10800117 	ldw	r2,4(r2)
1000fa24:	18bff136 	bltu	r3,r2,1000f9ec <__alt_data_end+0xf800f9ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000fa28:	0005883a 	mov	r2,zero
}
1000fa2c:	e037883a 	mov	sp,fp
1000fa30:	df000017 	ldw	fp,0(sp)
1000fa34:	dec00104 	addi	sp,sp,4
1000fa38:	f800283a 	ret

1000fa3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000fa3c:	defffa04 	addi	sp,sp,-24
1000fa40:	df000515 	stw	fp,20(sp)
1000fa44:	df000504 	addi	fp,sp,20
1000fa48:	e13ffd15 	stw	r4,-12(fp)
1000fa4c:	e17ffe15 	stw	r5,-8(fp)
1000fa50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000fa54:	00bff9c4 	movi	r2,-25
1000fa58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000fa5c:	e0bffe17 	ldw	r2,-8(fp)
1000fa60:	10da8060 	cmpeqi	r3,r2,27137
1000fa64:	1800031e 	bne	r3,zero,1000fa74 <altera_avalon_jtag_uart_ioctl+0x38>
1000fa68:	109a80a0 	cmpeqi	r2,r2,27138
1000fa6c:	1000191e 	bne	r2,zero,1000fad4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000fa70:	00002806 	br	1000fb14 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000fa74:	e0bffd17 	ldw	r2,-12(fp)
1000fa78:	10c00117 	ldw	r3,4(r2)
1000fa7c:	00a00034 	movhi	r2,32768
1000fa80:	10bfffc4 	addi	r2,r2,-1
1000fa84:	18801226 	beq	r3,r2,1000fad0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000fa88:	e0bfff17 	ldw	r2,-4(fp)
1000fa8c:	10800017 	ldw	r2,0(r2)
1000fa90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000fa94:	e0bffc17 	ldw	r2,-16(fp)
1000fa98:	10800090 	cmplti	r2,r2,2
1000fa9c:	1000061e 	bne	r2,zero,1000fab8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000faa0:	e0fffc17 	ldw	r3,-16(fp)
1000faa4:	00a00034 	movhi	r2,32768
1000faa8:	10bfffc4 	addi	r2,r2,-1
1000faac:	18800226 	beq	r3,r2,1000fab8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000fab0:	e0bffc17 	ldw	r2,-16(fp)
1000fab4:	00000206 	br	1000fac0 <altera_avalon_jtag_uart_ioctl+0x84>
1000fab8:	00a00034 	movhi	r2,32768
1000fabc:	10bfff84 	addi	r2,r2,-2
1000fac0:	e0fffd17 	ldw	r3,-12(fp)
1000fac4:	18800115 	stw	r2,4(r3)
      rc = 0;
1000fac8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000facc:	00001106 	br	1000fb14 <altera_avalon_jtag_uart_ioctl+0xd8>
1000fad0:	00001006 	br	1000fb14 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000fad4:	e0bffd17 	ldw	r2,-12(fp)
1000fad8:	10c00117 	ldw	r3,4(r2)
1000fadc:	00a00034 	movhi	r2,32768
1000fae0:	10bfffc4 	addi	r2,r2,-1
1000fae4:	18800a26 	beq	r3,r2,1000fb10 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000fae8:	e0bffd17 	ldw	r2,-12(fp)
1000faec:	10c00917 	ldw	r3,36(r2)
1000faf0:	e0bffd17 	ldw	r2,-12(fp)
1000faf4:	10800117 	ldw	r2,4(r2)
1000faf8:	1885803a 	cmpltu	r2,r3,r2
1000fafc:	10c03fcc 	andi	r3,r2,255
1000fb00:	e0bfff17 	ldw	r2,-4(fp)
1000fb04:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000fb08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fb0c:	00000006 	br	1000fb10 <altera_avalon_jtag_uart_ioctl+0xd4>
1000fb10:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000fb14:	e0bffb17 	ldw	r2,-20(fp)
}
1000fb18:	e037883a 	mov	sp,fp
1000fb1c:	df000017 	ldw	fp,0(sp)
1000fb20:	dec00104 	addi	sp,sp,4
1000fb24:	f800283a 	ret

1000fb28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000fb28:	defff304 	addi	sp,sp,-52
1000fb2c:	dfc00c15 	stw	ra,48(sp)
1000fb30:	df000b15 	stw	fp,44(sp)
1000fb34:	df000b04 	addi	fp,sp,44
1000fb38:	e13ffc15 	stw	r4,-16(fp)
1000fb3c:	e17ffd15 	stw	r5,-12(fp)
1000fb40:	e1bffe15 	stw	r6,-8(fp)
1000fb44:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000fb48:	e0bffd17 	ldw	r2,-12(fp)
1000fb4c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fb50:	00004906 	br	1000fc78 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000fb54:	e0bffc17 	ldw	r2,-16(fp)
1000fb58:	10800a17 	ldw	r2,40(r2)
1000fb5c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000fb60:	e0bffc17 	ldw	r2,-16(fp)
1000fb64:	10800b17 	ldw	r2,44(r2)
1000fb68:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000fb6c:	e0fff717 	ldw	r3,-36(fp)
1000fb70:	e0bff817 	ldw	r2,-32(fp)
1000fb74:	18800536 	bltu	r3,r2,1000fb8c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000fb78:	e0fff717 	ldw	r3,-36(fp)
1000fb7c:	e0bff817 	ldw	r2,-32(fp)
1000fb80:	1885c83a 	sub	r2,r3,r2
1000fb84:	e0bff615 	stw	r2,-40(fp)
1000fb88:	00000406 	br	1000fb9c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000fb8c:	00c20004 	movi	r3,2048
1000fb90:	e0bff817 	ldw	r2,-32(fp)
1000fb94:	1885c83a 	sub	r2,r3,r2
1000fb98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fb9c:	e0bff617 	ldw	r2,-40(fp)
1000fba0:	1000011e 	bne	r2,zero,1000fba8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000fba4:	00001d06 	br	1000fc1c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000fba8:	e0fffe17 	ldw	r3,-8(fp)
1000fbac:	e0bff617 	ldw	r2,-40(fp)
1000fbb0:	1880022e 	bgeu	r3,r2,1000fbbc <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000fbb4:	e0bffe17 	ldw	r2,-8(fp)
1000fbb8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000fbbc:	e0bff817 	ldw	r2,-32(fp)
1000fbc0:	10800e04 	addi	r2,r2,56
1000fbc4:	e0fffc17 	ldw	r3,-16(fp)
1000fbc8:	1885883a 	add	r2,r3,r2
1000fbcc:	e13ff517 	ldw	r4,-44(fp)
1000fbd0:	100b883a 	mov	r5,r2
1000fbd4:	e1bff617 	ldw	r6,-40(fp)
1000fbd8:	00079e80 	call	100079e8 <memcpy>
      ptr   += n;
1000fbdc:	e0fff517 	ldw	r3,-44(fp)
1000fbe0:	e0bff617 	ldw	r2,-40(fp)
1000fbe4:	1885883a 	add	r2,r3,r2
1000fbe8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000fbec:	e0fffe17 	ldw	r3,-8(fp)
1000fbf0:	e0bff617 	ldw	r2,-40(fp)
1000fbf4:	1885c83a 	sub	r2,r3,r2
1000fbf8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fbfc:	e0fff817 	ldw	r3,-32(fp)
1000fc00:	e0bff617 	ldw	r2,-40(fp)
1000fc04:	1885883a 	add	r2,r3,r2
1000fc08:	10c1ffcc 	andi	r3,r2,2047
1000fc0c:	e0bffc17 	ldw	r2,-16(fp)
1000fc10:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000fc14:	e0bffe17 	ldw	r2,-8(fp)
1000fc18:	00bfce16 	blt	zero,r2,1000fb54 <__alt_data_end+0xf800fb54>

    /* If we read any data then return it */
    if (ptr != buffer)
1000fc1c:	e0fff517 	ldw	r3,-44(fp)
1000fc20:	e0bffd17 	ldw	r2,-12(fp)
1000fc24:	18800126 	beq	r3,r2,1000fc2c <altera_avalon_jtag_uart_read+0x104>
      break;
1000fc28:	00001506 	br	1000fc80 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000fc2c:	e0bfff17 	ldw	r2,-4(fp)
1000fc30:	1090000c 	andi	r2,r2,16384
1000fc34:	10000126 	beq	r2,zero,1000fc3c <altera_avalon_jtag_uart_read+0x114>
      break;
1000fc38:	00001106 	br	1000fc80 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000fc3c:	0001883a 	nop
1000fc40:	e0bffc17 	ldw	r2,-16(fp)
1000fc44:	10c00a17 	ldw	r3,40(r2)
1000fc48:	e0bff717 	ldw	r2,-36(fp)
1000fc4c:	1880051e 	bne	r3,r2,1000fc64 <altera_avalon_jtag_uart_read+0x13c>
1000fc50:	e0bffc17 	ldw	r2,-16(fp)
1000fc54:	10c00917 	ldw	r3,36(r2)
1000fc58:	e0bffc17 	ldw	r2,-16(fp)
1000fc5c:	10800117 	ldw	r2,4(r2)
1000fc60:	18bff736 	bltu	r3,r2,1000fc40 <__alt_data_end+0xf800fc40>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000fc64:	e0bffc17 	ldw	r2,-16(fp)
1000fc68:	10c00a17 	ldw	r3,40(r2)
1000fc6c:	e0bff717 	ldw	r2,-36(fp)
1000fc70:	1880011e 	bne	r3,r2,1000fc78 <altera_avalon_jtag_uart_read+0x150>
      break;
1000fc74:	00000206 	br	1000fc80 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fc78:	e0bffe17 	ldw	r2,-8(fp)
1000fc7c:	00bfb516 	blt	zero,r2,1000fb54 <__alt_data_end+0xf800fb54>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000fc80:	e0fff517 	ldw	r3,-44(fp)
1000fc84:	e0bffd17 	ldw	r2,-12(fp)
1000fc88:	18801726 	beq	r3,r2,1000fce8 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fc8c:	0005303a 	rdctl	r2,status
1000fc90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fc94:	e0fffa17 	ldw	r3,-24(fp)
1000fc98:	00bfff84 	movi	r2,-2
1000fc9c:	1884703a 	and	r2,r3,r2
1000fca0:	1001703a 	wrctl	status,r2
  
  return context;
1000fca4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000fca8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fcac:	e0bffc17 	ldw	r2,-16(fp)
1000fcb0:	10800817 	ldw	r2,32(r2)
1000fcb4:	10c00054 	ori	r3,r2,1
1000fcb8:	e0bffc17 	ldw	r2,-16(fp)
1000fcbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fcc0:	e0bffc17 	ldw	r2,-16(fp)
1000fcc4:	10800017 	ldw	r2,0(r2)
1000fcc8:	10800104 	addi	r2,r2,4
1000fccc:	e0fffc17 	ldw	r3,-16(fp)
1000fcd0:	18c00817 	ldw	r3,32(r3)
1000fcd4:	10c00035 	stwio	r3,0(r2)
1000fcd8:	e0bff917 	ldw	r2,-28(fp)
1000fcdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fce0:	e0bffb17 	ldw	r2,-20(fp)
1000fce4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000fce8:	e0fff517 	ldw	r3,-44(fp)
1000fcec:	e0bffd17 	ldw	r2,-12(fp)
1000fcf0:	18800426 	beq	r3,r2,1000fd04 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
1000fcf4:	e0fff517 	ldw	r3,-44(fp)
1000fcf8:	e0bffd17 	ldw	r2,-12(fp)
1000fcfc:	1885c83a 	sub	r2,r3,r2
1000fd00:	00000606 	br	1000fd1c <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
1000fd04:	e0bfff17 	ldw	r2,-4(fp)
1000fd08:	1090000c 	andi	r2,r2,16384
1000fd0c:	10000226 	beq	r2,zero,1000fd18 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
1000fd10:	00bffd44 	movi	r2,-11
1000fd14:	00000106 	br	1000fd1c <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
1000fd18:	00bffec4 	movi	r2,-5
}
1000fd1c:	e037883a 	mov	sp,fp
1000fd20:	dfc00117 	ldw	ra,4(sp)
1000fd24:	df000017 	ldw	fp,0(sp)
1000fd28:	dec00204 	addi	sp,sp,8
1000fd2c:	f800283a 	ret

1000fd30 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000fd30:	defff304 	addi	sp,sp,-52
1000fd34:	dfc00c15 	stw	ra,48(sp)
1000fd38:	df000b15 	stw	fp,44(sp)
1000fd3c:	df000b04 	addi	fp,sp,44
1000fd40:	e13ffc15 	stw	r4,-16(fp)
1000fd44:	e17ffd15 	stw	r5,-12(fp)
1000fd48:	e1bffe15 	stw	r6,-8(fp)
1000fd4c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000fd50:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000fd54:	e0bffd17 	ldw	r2,-12(fp)
1000fd58:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fd5c:	00003906 	br	1000fe44 <altera_avalon_jtag_uart_write+0x114>
1000fd60:	00003806 	br	1000fe44 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000fd64:	e0bffc17 	ldw	r2,-16(fp)
1000fd68:	10800c17 	ldw	r2,48(r2)
1000fd6c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000fd70:	e0bffc17 	ldw	r2,-16(fp)
1000fd74:	10800d17 	ldw	r2,52(r2)
1000fd78:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000fd7c:	e0fff817 	ldw	r3,-32(fp)
1000fd80:	e0bff517 	ldw	r2,-44(fp)
1000fd84:	1880062e 	bgeu	r3,r2,1000fda0 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
1000fd88:	e0fff517 	ldw	r3,-44(fp)
1000fd8c:	e0bff817 	ldw	r2,-32(fp)
1000fd90:	1885c83a 	sub	r2,r3,r2
1000fd94:	10bfffc4 	addi	r2,r2,-1
1000fd98:	e0bff615 	stw	r2,-40(fp)
1000fd9c:	00000b06 	br	1000fdcc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
1000fda0:	e0bff517 	ldw	r2,-44(fp)
1000fda4:	10000526 	beq	r2,zero,1000fdbc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000fda8:	00c20004 	movi	r3,2048
1000fdac:	e0bff817 	ldw	r2,-32(fp)
1000fdb0:	1885c83a 	sub	r2,r3,r2
1000fdb4:	e0bff615 	stw	r2,-40(fp)
1000fdb8:	00000406 	br	1000fdcc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000fdbc:	00c1ffc4 	movi	r3,2047
1000fdc0:	e0bff817 	ldw	r2,-32(fp)
1000fdc4:	1885c83a 	sub	r2,r3,r2
1000fdc8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fdcc:	e0bff617 	ldw	r2,-40(fp)
1000fdd0:	1000011e 	bne	r2,zero,1000fdd8 <altera_avalon_jtag_uart_write+0xa8>
        break;
1000fdd4:	00001d06 	br	1000fe4c <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
1000fdd8:	e0fffe17 	ldw	r3,-8(fp)
1000fddc:	e0bff617 	ldw	r2,-40(fp)
1000fde0:	1880022e 	bgeu	r3,r2,1000fdec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
1000fde4:	e0bffe17 	ldw	r2,-8(fp)
1000fde8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000fdec:	e0bff817 	ldw	r2,-32(fp)
1000fdf0:	10820e04 	addi	r2,r2,2104
1000fdf4:	e0fffc17 	ldw	r3,-16(fp)
1000fdf8:	1885883a 	add	r2,r3,r2
1000fdfc:	1009883a 	mov	r4,r2
1000fe00:	e17ffd17 	ldw	r5,-12(fp)
1000fe04:	e1bff617 	ldw	r6,-40(fp)
1000fe08:	00079e80 	call	100079e8 <memcpy>
      ptr   += n;
1000fe0c:	e0fffd17 	ldw	r3,-12(fp)
1000fe10:	e0bff617 	ldw	r2,-40(fp)
1000fe14:	1885883a 	add	r2,r3,r2
1000fe18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000fe1c:	e0fffe17 	ldw	r3,-8(fp)
1000fe20:	e0bff617 	ldw	r2,-40(fp)
1000fe24:	1885c83a 	sub	r2,r3,r2
1000fe28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fe2c:	e0fff817 	ldw	r3,-32(fp)
1000fe30:	e0bff617 	ldw	r2,-40(fp)
1000fe34:	1885883a 	add	r2,r3,r2
1000fe38:	10c1ffcc 	andi	r3,r2,2047
1000fe3c:	e0bffc17 	ldw	r2,-16(fp)
1000fe40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fe44:	e0bffe17 	ldw	r2,-8(fp)
1000fe48:	00bfc616 	blt	zero,r2,1000fd64 <__alt_data_end+0xf800fd64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fe4c:	0005303a 	rdctl	r2,status
1000fe50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fe54:	e0fffa17 	ldw	r3,-24(fp)
1000fe58:	00bfff84 	movi	r2,-2
1000fe5c:	1884703a 	and	r2,r3,r2
1000fe60:	1001703a 	wrctl	status,r2
  
  return context;
1000fe64:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000fe68:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fe6c:	e0bffc17 	ldw	r2,-16(fp)
1000fe70:	10800817 	ldw	r2,32(r2)
1000fe74:	10c00094 	ori	r3,r2,2
1000fe78:	e0bffc17 	ldw	r2,-16(fp)
1000fe7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fe80:	e0bffc17 	ldw	r2,-16(fp)
1000fe84:	10800017 	ldw	r2,0(r2)
1000fe88:	10800104 	addi	r2,r2,4
1000fe8c:	e0fffc17 	ldw	r3,-16(fp)
1000fe90:	18c00817 	ldw	r3,32(r3)
1000fe94:	10c00035 	stwio	r3,0(r2)
1000fe98:	e0bff917 	ldw	r2,-28(fp)
1000fe9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fea0:	e0bffb17 	ldw	r2,-20(fp)
1000fea4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000fea8:	e0bffe17 	ldw	r2,-8(fp)
1000feac:	0080120e 	bge	zero,r2,1000fef8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000feb0:	e0bfff17 	ldw	r2,-4(fp)
1000feb4:	1090000c 	andi	r2,r2,16384
1000feb8:	10000126 	beq	r2,zero,1000fec0 <altera_avalon_jtag_uart_write+0x190>
        break;
1000febc:	00001006 	br	1000ff00 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000fec0:	0001883a 	nop
1000fec4:	e0bffc17 	ldw	r2,-16(fp)
1000fec8:	10c00d17 	ldw	r3,52(r2)
1000fecc:	e0bff517 	ldw	r2,-44(fp)
1000fed0:	1880051e 	bne	r3,r2,1000fee8 <altera_avalon_jtag_uart_write+0x1b8>
1000fed4:	e0bffc17 	ldw	r2,-16(fp)
1000fed8:	10c00917 	ldw	r3,36(r2)
1000fedc:	e0bffc17 	ldw	r2,-16(fp)
1000fee0:	10800117 	ldw	r2,4(r2)
1000fee4:	18bff736 	bltu	r3,r2,1000fec4 <__alt_data_end+0xf800fec4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000fee8:	e0bffc17 	ldw	r2,-16(fp)
1000feec:	10800917 	ldw	r2,36(r2)
1000fef0:	10000126 	beq	r2,zero,1000fef8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000fef4:	00000206 	br	1000ff00 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000fef8:	e0bffe17 	ldw	r2,-8(fp)
1000fefc:	00bf9816 	blt	zero,r2,1000fd60 <__alt_data_end+0xf800fd60>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000ff00:	e0fffd17 	ldw	r3,-12(fp)
1000ff04:	e0bff717 	ldw	r2,-36(fp)
1000ff08:	18800426 	beq	r3,r2,1000ff1c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000ff0c:	e0fffd17 	ldw	r3,-12(fp)
1000ff10:	e0bff717 	ldw	r2,-36(fp)
1000ff14:	1885c83a 	sub	r2,r3,r2
1000ff18:	00000606 	br	1000ff34 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000ff1c:	e0bfff17 	ldw	r2,-4(fp)
1000ff20:	1090000c 	andi	r2,r2,16384
1000ff24:	10000226 	beq	r2,zero,1000ff30 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000ff28:	00bffd44 	movi	r2,-11
1000ff2c:	00000106 	br	1000ff34 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000ff30:	00bffec4 	movi	r2,-5
}
1000ff34:	e037883a 	mov	sp,fp
1000ff38:	dfc00117 	ldw	ra,4(sp)
1000ff3c:	df000017 	ldw	fp,0(sp)
1000ff40:	dec00204 	addi	sp,sp,8
1000ff44:	f800283a 	ret

1000ff48 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000ff48:	defff504 	addi	sp,sp,-44
1000ff4c:	df000a15 	stw	fp,40(sp)
1000ff50:	df000a04 	addi	fp,sp,40
1000ff54:	e13ffc15 	stw	r4,-16(fp)
1000ff58:	e17ffd15 	stw	r5,-12(fp)
1000ff5c:	e1bffe15 	stw	r6,-8(fp)
1000ff60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ff64:	e03ff615 	stw	zero,-40(fp)
1000ff68:	00840074 	movhi	r2,4097
1000ff6c:	1094bb04 	addi	r2,r2,21228
1000ff70:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000ff74:	10003f26 	beq	r2,zero,10010074 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000ff78:	e0bffc17 	ldw	r2,-16(fp)
1000ff7c:	10003b26 	beq	r2,zero,1001006c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000ff80:	e0bffc17 	ldw	r2,-16(fp)
1000ff84:	e0fffe17 	ldw	r3,-8(fp)
1000ff88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000ff8c:	e0bffc17 	ldw	r2,-16(fp)
1000ff90:	e0ffff17 	ldw	r3,-4(fp)
1000ff94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ff98:	0005303a 	rdctl	r2,status
1000ff9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ffa0:	e0fff817 	ldw	r3,-32(fp)
1000ffa4:	00bfff84 	movi	r2,-2
1000ffa8:	1884703a 	and	r2,r3,r2
1000ffac:	1001703a 	wrctl	status,r2
  
  return context;
1000ffb0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000ffb4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000ffb8:	00840074 	movhi	r2,4097
1000ffbc:	1094bc04 	addi	r2,r2,21232
1000ffc0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ffc4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ffc8:	e0fffd17 	ldw	r3,-12(fp)
1000ffcc:	e0bff617 	ldw	r2,-40(fp)
1000ffd0:	1885883a 	add	r2,r3,r2
1000ffd4:	10c00044 	addi	r3,r2,1
1000ffd8:	e0bffc17 	ldw	r2,-16(fp)
1000ffdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ffe0:	e0bffc17 	ldw	r2,-16(fp)
1000ffe4:	10c00217 	ldw	r3,8(r2)
1000ffe8:	e0bff617 	ldw	r2,-40(fp)
1000ffec:	1880042e 	bgeu	r3,r2,10010000 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000fff0:	e0bffc17 	ldw	r2,-16(fp)
1000fff4:	00c00044 	movi	r3,1
1000fff8:	10c00405 	stb	r3,16(r2)
1000fffc:	00000206 	br	10010008 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10010000:	e0bffc17 	ldw	r2,-16(fp)
10010004:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010008:	e0bffc17 	ldw	r2,-16(fp)
1001000c:	00c40074 	movhi	r3,4097
10010010:	18cdf204 	addi	r3,r3,14280
10010014:	e0fff915 	stw	r3,-28(fp)
10010018:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001001c:	e0bffa17 	ldw	r2,-24(fp)
10010020:	e0fff917 	ldw	r3,-28(fp)
10010024:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010028:	e0bff917 	ldw	r2,-28(fp)
1001002c:	10c00017 	ldw	r3,0(r2)
10010030:	e0bffa17 	ldw	r2,-24(fp)
10010034:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010038:	e0bff917 	ldw	r2,-28(fp)
1001003c:	10800017 	ldw	r2,0(r2)
10010040:	e0fffa17 	ldw	r3,-24(fp)
10010044:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010048:	e0bff917 	ldw	r2,-28(fp)
1001004c:	e0fffa17 	ldw	r3,-24(fp)
10010050:	10c00015 	stw	r3,0(r2)
10010054:	e0bff717 	ldw	r2,-36(fp)
10010058:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001005c:	e0bffb17 	ldw	r2,-20(fp)
10010060:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010064:	0005883a 	mov	r2,zero
10010068:	00000306 	br	10010078 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001006c:	00bffa84 	movi	r2,-22
10010070:	00000106 	br	10010078 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10010074:	00bfde84 	movi	r2,-134
  }
}
10010078:	e037883a 	mov	sp,fp
1001007c:	df000017 	ldw	fp,0(sp)
10010080:	dec00104 	addi	sp,sp,4
10010084:	f800283a 	ret

10010088 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010088:	defffa04 	addi	sp,sp,-24
1001008c:	dfc00515 	stw	ra,20(sp)
10010090:	df000415 	stw	fp,16(sp)
10010094:	df000404 	addi	fp,sp,16
10010098:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001009c:	00800244 	movi	r2,9
100100a0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100100a4:	e13ffd17 	ldw	r4,-12(fp)
100100a8:	014003f4 	movhi	r5,15
100100ac:	29509004 	addi	r5,r5,16960
100100b0:	000c2b80 	call	1000c2b8 <__mulsi3>
100100b4:	0100bef4 	movhi	r4,763
100100b8:	213c2004 	addi	r4,r4,-3968
100100bc:	100b883a 	mov	r5,r2
100100c0:	000c2a80 	call	1000c2a8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100100c4:	01200034 	movhi	r4,32768
100100c8:	213fffc4 	addi	r4,r4,-1
100100cc:	100b883a 	mov	r5,r2
100100d0:	000c2a80 	call	1000c2a8 <__udivsi3>
100100d4:	e13fff17 	ldw	r4,-4(fp)
100100d8:	100b883a 	mov	r5,r2
100100dc:	000c2a80 	call	1000c2a8 <__udivsi3>
100100e0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100100e4:	e0bffe17 	ldw	r2,-8(fp)
100100e8:	10002926 	beq	r2,zero,10010190 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
100100ec:	e03ffc15 	stw	zero,-16(fp)
100100f0:	00001606 	br	1001014c <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100100f4:	00a00034 	movhi	r2,32768
100100f8:	10bfffc4 	addi	r2,r2,-1
100100fc:	10bfffc4 	addi	r2,r2,-1
10010100:	103ffe1e 	bne	r2,zero,100100fc <__alt_data_end+0xf80100fc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010104:	e13ffd17 	ldw	r4,-12(fp)
10010108:	014003f4 	movhi	r5,15
1001010c:	29509004 	addi	r5,r5,16960
10010110:	000c2b80 	call	1000c2b8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010114:	0100bef4 	movhi	r4,763
10010118:	213c2004 	addi	r4,r4,-3968
1001011c:	100b883a 	mov	r5,r2
10010120:	000c2a80 	call	1000c2a8 <__udivsi3>
10010124:	01200034 	movhi	r4,32768
10010128:	213fffc4 	addi	r4,r4,-1
1001012c:	100b883a 	mov	r5,r2
10010130:	000c2a80 	call	1000c2a8 <__udivsi3>
10010134:	e0ffff17 	ldw	r3,-4(fp)
10010138:	1885c83a 	sub	r2,r3,r2
1001013c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010140:	e0bffc17 	ldw	r2,-16(fp)
10010144:	10800044 	addi	r2,r2,1
10010148:	e0bffc15 	stw	r2,-16(fp)
1001014c:	e0fffc17 	ldw	r3,-16(fp)
10010150:	e0bffe17 	ldw	r2,-8(fp)
10010154:	18bfe716 	blt	r3,r2,100100f4 <__alt_data_end+0xf80100f4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010158:	e13ffd17 	ldw	r4,-12(fp)
1001015c:	014003f4 	movhi	r5,15
10010160:	29509004 	addi	r5,r5,16960
10010164:	000c2b80 	call	1000c2b8 <__mulsi3>
10010168:	0100bef4 	movhi	r4,763
1001016c:	213c2004 	addi	r4,r4,-3968
10010170:	100b883a 	mov	r5,r2
10010174:	000c2a80 	call	1000c2a8 <__udivsi3>
10010178:	1009883a 	mov	r4,r2
1001017c:	e17fff17 	ldw	r5,-4(fp)
10010180:	000c2b80 	call	1000c2b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010184:	10bfffc4 	addi	r2,r2,-1
10010188:	103ffe1e 	bne	r2,zero,10010184 <__alt_data_end+0xf8010184>
1001018c:	00000d06 	br	100101c4 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010190:	e13ffd17 	ldw	r4,-12(fp)
10010194:	014003f4 	movhi	r5,15
10010198:	29509004 	addi	r5,r5,16960
1001019c:	000c2b80 	call	1000c2b8 <__mulsi3>
100101a0:	0100bef4 	movhi	r4,763
100101a4:	213c2004 	addi	r4,r4,-3968
100101a8:	100b883a 	mov	r5,r2
100101ac:	000c2a80 	call	1000c2a8 <__udivsi3>
100101b0:	1009883a 	mov	r4,r2
100101b4:	e17fff17 	ldw	r5,-4(fp)
100101b8:	000c2b80 	call	1000c2b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100101bc:	10bfffc4 	addi	r2,r2,-1
100101c0:	00bffe16 	blt	zero,r2,100101bc <__alt_data_end+0xf80101bc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100101c4:	0005883a 	mov	r2,zero
}
100101c8:	e037883a 	mov	sp,fp
100101cc:	dfc00117 	ldw	ra,4(sp)
100101d0:	df000017 	ldw	fp,0(sp)
100101d4:	dec00204 	addi	sp,sp,8
100101d8:	f800283a 	ret

100101dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100101dc:	deffff04 	addi	sp,sp,-4
100101e0:	df000015 	stw	fp,0(sp)
100101e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100101e8:	e037883a 	mov	sp,fp
100101ec:	df000017 	ldw	fp,0(sp)
100101f0:	dec00104 	addi	sp,sp,4
100101f4:	f800283a 	ret

100101f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100101f8:	defffe04 	addi	sp,sp,-8
100101fc:	dfc00115 	stw	ra,4(sp)
10010200:	df000015 	stw	fp,0(sp)
10010204:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010208:	00840074 	movhi	r2,4097
1001020c:	108def04 	addi	r2,r2,14268
10010210:	10800017 	ldw	r2,0(r2)
10010214:	10000526 	beq	r2,zero,1001022c <alt_get_errno+0x34>
10010218:	00840074 	movhi	r2,4097
1001021c:	108def04 	addi	r2,r2,14268
10010220:	10800017 	ldw	r2,0(r2)
10010224:	103ee83a 	callr	r2
10010228:	00000206 	br	10010234 <alt_get_errno+0x3c>
1001022c:	00840074 	movhi	r2,4097
10010230:	1094b604 	addi	r2,r2,21208
}
10010234:	e037883a 	mov	sp,fp
10010238:	dfc00117 	ldw	ra,4(sp)
1001023c:	df000017 	ldw	fp,0(sp)
10010240:	dec00204 	addi	sp,sp,8
10010244:	f800283a 	ret

10010248 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010248:	defffa04 	addi	sp,sp,-24
1001024c:	dfc00515 	stw	ra,20(sp)
10010250:	df000415 	stw	fp,16(sp)
10010254:	df000404 	addi	fp,sp,16
10010258:	e13ffe15 	stw	r4,-8(fp)
1001025c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010260:	e0bffe17 	ldw	r2,-8(fp)
10010264:	10000326 	beq	r2,zero,10010274 <alt_dev_llist_insert+0x2c>
10010268:	e0bffe17 	ldw	r2,-8(fp)
1001026c:	10800217 	ldw	r2,8(r2)
10010270:	1000051e 	bne	r2,zero,10010288 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
10010274:	00101f80 	call	100101f8 <alt_get_errno>
10010278:	00c00584 	movi	r3,22
1001027c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10010280:	00bffa84 	movi	r2,-22
10010284:	00001306 	br	100102d4 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010288:	e0bffe17 	ldw	r2,-8(fp)
1001028c:	e0ffff17 	ldw	r3,-4(fp)
10010290:	e0fffc15 	stw	r3,-16(fp)
10010294:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010298:	e0bffd17 	ldw	r2,-12(fp)
1001029c:	e0fffc17 	ldw	r3,-16(fp)
100102a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100102a4:	e0bffc17 	ldw	r2,-16(fp)
100102a8:	10c00017 	ldw	r3,0(r2)
100102ac:	e0bffd17 	ldw	r2,-12(fp)
100102b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100102b4:	e0bffc17 	ldw	r2,-16(fp)
100102b8:	10800017 	ldw	r2,0(r2)
100102bc:	e0fffd17 	ldw	r3,-12(fp)
100102c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100102c4:	e0bffc17 	ldw	r2,-16(fp)
100102c8:	e0fffd17 	ldw	r3,-12(fp)
100102cc:	10c00015 	stw	r3,0(r2)

  return 0;  
100102d0:	0005883a 	mov	r2,zero
}
100102d4:	e037883a 	mov	sp,fp
100102d8:	dfc00117 	ldw	ra,4(sp)
100102dc:	df000017 	ldw	fp,0(sp)
100102e0:	dec00204 	addi	sp,sp,8
100102e4:	f800283a 	ret

100102e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100102e8:	defffd04 	addi	sp,sp,-12
100102ec:	dfc00215 	stw	ra,8(sp)
100102f0:	df000115 	stw	fp,4(sp)
100102f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100102f8:	00840074 	movhi	r2,4097
100102fc:	10849a04 	addi	r2,r2,4712
10010300:	e0bfff15 	stw	r2,-4(fp)
10010304:	00000606 	br	10010320 <_do_ctors+0x38>
        (*ctor) (); 
10010308:	e0bfff17 	ldw	r2,-4(fp)
1001030c:	10800017 	ldw	r2,0(r2)
10010310:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010314:	e0bfff17 	ldw	r2,-4(fp)
10010318:	10bfff04 	addi	r2,r2,-4
1001031c:	e0bfff15 	stw	r2,-4(fp)
10010320:	e0ffff17 	ldw	r3,-4(fp)
10010324:	00840074 	movhi	r2,4097
10010328:	10849b04 	addi	r2,r2,4716
1001032c:	18bff62e 	bgeu	r3,r2,10010308 <__alt_data_end+0xf8010308>
        (*ctor) (); 
}
10010330:	e037883a 	mov	sp,fp
10010334:	dfc00117 	ldw	ra,4(sp)
10010338:	df000017 	ldw	fp,0(sp)
1001033c:	dec00204 	addi	sp,sp,8
10010340:	f800283a 	ret

10010344 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010344:	defffd04 	addi	sp,sp,-12
10010348:	dfc00215 	stw	ra,8(sp)
1001034c:	df000115 	stw	fp,4(sp)
10010350:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010354:	00840074 	movhi	r2,4097
10010358:	10849a04 	addi	r2,r2,4712
1001035c:	e0bfff15 	stw	r2,-4(fp)
10010360:	00000606 	br	1001037c <_do_dtors+0x38>
        (*dtor) (); 
10010364:	e0bfff17 	ldw	r2,-4(fp)
10010368:	10800017 	ldw	r2,0(r2)
1001036c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010370:	e0bfff17 	ldw	r2,-4(fp)
10010374:	10bfff04 	addi	r2,r2,-4
10010378:	e0bfff15 	stw	r2,-4(fp)
1001037c:	e0ffff17 	ldw	r3,-4(fp)
10010380:	00840074 	movhi	r2,4097
10010384:	10849b04 	addi	r2,r2,4716
10010388:	18bff62e 	bgeu	r3,r2,10010364 <__alt_data_end+0xf8010364>
        (*dtor) (); 
}
1001038c:	e037883a 	mov	sp,fp
10010390:	dfc00117 	ldw	ra,4(sp)
10010394:	df000017 	ldw	fp,0(sp)
10010398:	dec00204 	addi	sp,sp,8
1001039c:	f800283a 	ret

100103a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100103a0:	deffff04 	addi	sp,sp,-4
100103a4:	df000015 	stw	fp,0(sp)
100103a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100103ac:	e037883a 	mov	sp,fp
100103b0:	df000017 	ldw	fp,0(sp)
100103b4:	dec00104 	addi	sp,sp,4
100103b8:	f800283a 	ret

100103bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100103bc:	defff904 	addi	sp,sp,-28
100103c0:	dfc00615 	stw	ra,24(sp)
100103c4:	df000515 	stw	fp,20(sp)
100103c8:	df000504 	addi	fp,sp,20
100103cc:	e13ffc15 	stw	r4,-16(fp)
100103d0:	e17ffd15 	stw	r5,-12(fp)
100103d4:	e1bffe15 	stw	r6,-8(fp)
100103d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100103dc:	e0800217 	ldw	r2,8(fp)
100103e0:	d8800015 	stw	r2,0(sp)
100103e4:	e13ffc17 	ldw	r4,-16(fp)
100103e8:	e17ffd17 	ldw	r5,-12(fp)
100103ec:	e1bffe17 	ldw	r6,-8(fp)
100103f0:	e1ffff17 	ldw	r7,-4(fp)
100103f4:	00105940 	call	10010594 <alt_iic_isr_register>
}  
100103f8:	e037883a 	mov	sp,fp
100103fc:	dfc00117 	ldw	ra,4(sp)
10010400:	df000017 	ldw	fp,0(sp)
10010404:	dec00204 	addi	sp,sp,8
10010408:	f800283a 	ret

1001040c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1001040c:	defff904 	addi	sp,sp,-28
10010410:	df000615 	stw	fp,24(sp)
10010414:	df000604 	addi	fp,sp,24
10010418:	e13ffe15 	stw	r4,-8(fp)
1001041c:	e17fff15 	stw	r5,-4(fp)
10010420:	e0bfff17 	ldw	r2,-4(fp)
10010424:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010428:	0005303a 	rdctl	r2,status
1001042c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010430:	e0fffb17 	ldw	r3,-20(fp)
10010434:	00bfff84 	movi	r2,-2
10010438:	1884703a 	and	r2,r3,r2
1001043c:	1001703a 	wrctl	status,r2
  
  return context;
10010440:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010444:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010448:	e0bffa17 	ldw	r2,-24(fp)
1001044c:	00c00044 	movi	r3,1
10010450:	1884983a 	sll	r2,r3,r2
10010454:	1007883a 	mov	r3,r2
10010458:	00840074 	movhi	r2,4097
1001045c:	1094ba04 	addi	r2,r2,21224
10010460:	10800017 	ldw	r2,0(r2)
10010464:	1886b03a 	or	r3,r3,r2
10010468:	00840074 	movhi	r2,4097
1001046c:	1094ba04 	addi	r2,r2,21224
10010470:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010474:	00840074 	movhi	r2,4097
10010478:	1094ba04 	addi	r2,r2,21224
1001047c:	10800017 	ldw	r2,0(r2)
10010480:	100170fa 	wrctl	ienable,r2
10010484:	e0bffc17 	ldw	r2,-16(fp)
10010488:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001048c:	e0bffd17 	ldw	r2,-12(fp)
10010490:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010494:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
10010498:	e037883a 	mov	sp,fp
1001049c:	df000017 	ldw	fp,0(sp)
100104a0:	dec00104 	addi	sp,sp,4
100104a4:	f800283a 	ret

100104a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100104a8:	defff904 	addi	sp,sp,-28
100104ac:	df000615 	stw	fp,24(sp)
100104b0:	df000604 	addi	fp,sp,24
100104b4:	e13ffe15 	stw	r4,-8(fp)
100104b8:	e17fff15 	stw	r5,-4(fp)
100104bc:	e0bfff17 	ldw	r2,-4(fp)
100104c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100104c4:	0005303a 	rdctl	r2,status
100104c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100104cc:	e0fffb17 	ldw	r3,-20(fp)
100104d0:	00bfff84 	movi	r2,-2
100104d4:	1884703a 	and	r2,r3,r2
100104d8:	1001703a 	wrctl	status,r2
  
  return context;
100104dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100104e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100104e4:	e0bffa17 	ldw	r2,-24(fp)
100104e8:	00c00044 	movi	r3,1
100104ec:	1884983a 	sll	r2,r3,r2
100104f0:	0084303a 	nor	r2,zero,r2
100104f4:	1007883a 	mov	r3,r2
100104f8:	00840074 	movhi	r2,4097
100104fc:	1094ba04 	addi	r2,r2,21224
10010500:	10800017 	ldw	r2,0(r2)
10010504:	1886703a 	and	r3,r3,r2
10010508:	00840074 	movhi	r2,4097
1001050c:	1094ba04 	addi	r2,r2,21224
10010510:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010514:	00840074 	movhi	r2,4097
10010518:	1094ba04 	addi	r2,r2,21224
1001051c:	10800017 	ldw	r2,0(r2)
10010520:	100170fa 	wrctl	ienable,r2
10010524:	e0bffc17 	ldw	r2,-16(fp)
10010528:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001052c:	e0bffd17 	ldw	r2,-12(fp)
10010530:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010534:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
10010538:	e037883a 	mov	sp,fp
1001053c:	df000017 	ldw	fp,0(sp)
10010540:	dec00104 	addi	sp,sp,4
10010544:	f800283a 	ret

10010548 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010548:	defffc04 	addi	sp,sp,-16
1001054c:	df000315 	stw	fp,12(sp)
10010550:	df000304 	addi	fp,sp,12
10010554:	e13ffe15 	stw	r4,-8(fp)
10010558:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1001055c:	000530fa 	rdctl	r2,ienable
10010560:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010564:	e0bfff17 	ldw	r2,-4(fp)
10010568:	00c00044 	movi	r3,1
1001056c:	1884983a 	sll	r2,r3,r2
10010570:	1007883a 	mov	r3,r2
10010574:	e0bffd17 	ldw	r2,-12(fp)
10010578:	1884703a 	and	r2,r3,r2
1001057c:	1004c03a 	cmpne	r2,r2,zero
10010580:	10803fcc 	andi	r2,r2,255
}
10010584:	e037883a 	mov	sp,fp
10010588:	df000017 	ldw	fp,0(sp)
1001058c:	dec00104 	addi	sp,sp,4
10010590:	f800283a 	ret

10010594 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010594:	defff504 	addi	sp,sp,-44
10010598:	dfc00a15 	stw	ra,40(sp)
1001059c:	df000915 	stw	fp,36(sp)
100105a0:	df000904 	addi	fp,sp,36
100105a4:	e13ffc15 	stw	r4,-16(fp)
100105a8:	e17ffd15 	stw	r5,-12(fp)
100105ac:	e1bffe15 	stw	r6,-8(fp)
100105b0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100105b4:	00bffa84 	movi	r2,-22
100105b8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100105bc:	e0bffd17 	ldw	r2,-12(fp)
100105c0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100105c4:	e0bff817 	ldw	r2,-32(fp)
100105c8:	10800808 	cmpgei	r2,r2,32
100105cc:	1000271e 	bne	r2,zero,1001066c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100105d0:	0005303a 	rdctl	r2,status
100105d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100105d8:	e0fffa17 	ldw	r3,-24(fp)
100105dc:	00bfff84 	movi	r2,-2
100105e0:	1884703a 	and	r2,r3,r2
100105e4:	1001703a 	wrctl	status,r2
  
  return context;
100105e8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100105ec:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100105f0:	00c40074 	movhi	r3,4097
100105f4:	18d4c704 	addi	r3,r3,21276
100105f8:	e0bff817 	ldw	r2,-32(fp)
100105fc:	100490fa 	slli	r2,r2,3
10010600:	1885883a 	add	r2,r3,r2
10010604:	e0fffe17 	ldw	r3,-8(fp)
10010608:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1001060c:	00c40074 	movhi	r3,4097
10010610:	18d4c704 	addi	r3,r3,21276
10010614:	e0bff817 	ldw	r2,-32(fp)
10010618:	100490fa 	slli	r2,r2,3
1001061c:	1885883a 	add	r2,r3,r2
10010620:	10800104 	addi	r2,r2,4
10010624:	e0ffff17 	ldw	r3,-4(fp)
10010628:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1001062c:	e0bffe17 	ldw	r2,-8(fp)
10010630:	10000526 	beq	r2,zero,10010648 <alt_iic_isr_register+0xb4>
10010634:	e0bff817 	ldw	r2,-32(fp)
10010638:	e13ffc17 	ldw	r4,-16(fp)
1001063c:	100b883a 	mov	r5,r2
10010640:	001040c0 	call	1001040c <alt_ic_irq_enable>
10010644:	00000406 	br	10010658 <alt_iic_isr_register+0xc4>
10010648:	e0bff817 	ldw	r2,-32(fp)
1001064c:	e13ffc17 	ldw	r4,-16(fp)
10010650:	100b883a 	mov	r5,r2
10010654:	00104a80 	call	100104a8 <alt_ic_irq_disable>
10010658:	e0bff715 	stw	r2,-36(fp)
1001065c:	e0bff917 	ldw	r2,-28(fp)
10010660:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010664:	e0bffb17 	ldw	r2,-20(fp)
10010668:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1001066c:	e0bff717 	ldw	r2,-36(fp)
}
10010670:	e037883a 	mov	sp,fp
10010674:	dfc00117 	ldw	ra,4(sp)
10010678:	df000017 	ldw	fp,0(sp)
1001067c:	dec00204 	addi	sp,sp,8
10010680:	f800283a 	ret

10010684 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010684:	defff804 	addi	sp,sp,-32
10010688:	dfc00715 	stw	ra,28(sp)
1001068c:	df000615 	stw	fp,24(sp)
10010690:	dc000515 	stw	r16,20(sp)
10010694:	df000604 	addi	fp,sp,24
10010698:	e13ffb15 	stw	r4,-20(fp)
1001069c:	e17ffc15 	stw	r5,-16(fp)
100106a0:	e1bffd15 	stw	r6,-12(fp)
100106a4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100106a8:	e13ffc17 	ldw	r4,-16(fp)
100106ac:	e17ffd17 	ldw	r5,-12(fp)
100106b0:	e1bffe17 	ldw	r6,-8(fp)
100106b4:	00109200 	call	10010920 <open>
100106b8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100106bc:	e0bffa17 	ldw	r2,-24(fp)
100106c0:	10002216 	blt	r2,zero,1001074c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100106c4:	04040074 	movhi	r16,4097
100106c8:	84096c04 	addi	r16,r16,9648
100106cc:	e0bffa17 	ldw	r2,-24(fp)
100106d0:	1009883a 	mov	r4,r2
100106d4:	01400304 	movi	r5,12
100106d8:	000c2b80 	call	1000c2b8 <__mulsi3>
100106dc:	8085883a 	add	r2,r16,r2
100106e0:	10c00017 	ldw	r3,0(r2)
100106e4:	e0bffb17 	ldw	r2,-20(fp)
100106e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100106ec:	04040074 	movhi	r16,4097
100106f0:	84096c04 	addi	r16,r16,9648
100106f4:	e0bffa17 	ldw	r2,-24(fp)
100106f8:	1009883a 	mov	r4,r2
100106fc:	01400304 	movi	r5,12
10010700:	000c2b80 	call	1000c2b8 <__mulsi3>
10010704:	8085883a 	add	r2,r16,r2
10010708:	10800104 	addi	r2,r2,4
1001070c:	10c00017 	ldw	r3,0(r2)
10010710:	e0bffb17 	ldw	r2,-20(fp)
10010714:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010718:	04040074 	movhi	r16,4097
1001071c:	84096c04 	addi	r16,r16,9648
10010720:	e0bffa17 	ldw	r2,-24(fp)
10010724:	1009883a 	mov	r4,r2
10010728:	01400304 	movi	r5,12
1001072c:	000c2b80 	call	1000c2b8 <__mulsi3>
10010730:	8085883a 	add	r2,r16,r2
10010734:	10800204 	addi	r2,r2,8
10010738:	10c00017 	ldw	r3,0(r2)
1001073c:	e0bffb17 	ldw	r2,-20(fp)
10010740:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010744:	e13ffa17 	ldw	r4,-24(fp)
10010748:	000f1b80 	call	1000f1b8 <alt_release_fd>
  }
} 
1001074c:	e6ffff04 	addi	sp,fp,-4
10010750:	dfc00217 	ldw	ra,8(sp)
10010754:	df000117 	ldw	fp,4(sp)
10010758:	dc000017 	ldw	r16,0(sp)
1001075c:	dec00304 	addi	sp,sp,12
10010760:	f800283a 	ret

10010764 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010764:	defffb04 	addi	sp,sp,-20
10010768:	dfc00415 	stw	ra,16(sp)
1001076c:	df000315 	stw	fp,12(sp)
10010770:	df000304 	addi	fp,sp,12
10010774:	e13ffd15 	stw	r4,-12(fp)
10010778:	e17ffe15 	stw	r5,-8(fp)
1001077c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010780:	01040074 	movhi	r4,4097
10010784:	21096f04 	addi	r4,r4,9660
10010788:	e17ffd17 	ldw	r5,-12(fp)
1001078c:	01800044 	movi	r6,1
10010790:	01c07fc4 	movi	r7,511
10010794:	00106840 	call	10010684 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010798:	01040074 	movhi	r4,4097
1001079c:	21096c04 	addi	r4,r4,9648
100107a0:	e17ffe17 	ldw	r5,-8(fp)
100107a4:	000d883a 	mov	r6,zero
100107a8:	01c07fc4 	movi	r7,511
100107ac:	00106840 	call	10010684 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100107b0:	01040074 	movhi	r4,4097
100107b4:	21097204 	addi	r4,r4,9672
100107b8:	e17fff17 	ldw	r5,-4(fp)
100107bc:	01800044 	movi	r6,1
100107c0:	01c07fc4 	movi	r7,511
100107c4:	00106840 	call	10010684 <alt_open_fd>
}  
100107c8:	e037883a 	mov	sp,fp
100107cc:	dfc00117 	ldw	ra,4(sp)
100107d0:	df000017 	ldw	fp,0(sp)
100107d4:	dec00204 	addi	sp,sp,8
100107d8:	f800283a 	ret

100107dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100107dc:	defffe04 	addi	sp,sp,-8
100107e0:	dfc00115 	stw	ra,4(sp)
100107e4:	df000015 	stw	fp,0(sp)
100107e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100107ec:	00840074 	movhi	r2,4097
100107f0:	108def04 	addi	r2,r2,14268
100107f4:	10800017 	ldw	r2,0(r2)
100107f8:	10000526 	beq	r2,zero,10010810 <alt_get_errno+0x34>
100107fc:	00840074 	movhi	r2,4097
10010800:	108def04 	addi	r2,r2,14268
10010804:	10800017 	ldw	r2,0(r2)
10010808:	103ee83a 	callr	r2
1001080c:	00000206 	br	10010818 <alt_get_errno+0x3c>
10010810:	00840074 	movhi	r2,4097
10010814:	1094b604 	addi	r2,r2,21208
}
10010818:	e037883a 	mov	sp,fp
1001081c:	dfc00117 	ldw	ra,4(sp)
10010820:	df000017 	ldw	fp,0(sp)
10010824:	dec00204 	addi	sp,sp,8
10010828:	f800283a 	ret

1001082c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001082c:	defffb04 	addi	sp,sp,-20
10010830:	dfc00415 	stw	ra,16(sp)
10010834:	df000315 	stw	fp,12(sp)
10010838:	dc000215 	stw	r16,8(sp)
1001083c:	df000304 	addi	fp,sp,12
10010840:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010844:	e0bffe17 	ldw	r2,-8(fp)
10010848:	10800217 	ldw	r2,8(r2)
1001084c:	10d00034 	orhi	r3,r2,16384
10010850:	e0bffe17 	ldw	r2,-8(fp)
10010854:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010858:	e03ffd15 	stw	zero,-12(fp)
1001085c:	00002306 	br	100108ec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010860:	04040074 	movhi	r16,4097
10010864:	84096c04 	addi	r16,r16,9648
10010868:	e0bffd17 	ldw	r2,-12(fp)
1001086c:	1009883a 	mov	r4,r2
10010870:	01400304 	movi	r5,12
10010874:	000c2b80 	call	1000c2b8 <__mulsi3>
10010878:	8085883a 	add	r2,r16,r2
1001087c:	10c00017 	ldw	r3,0(r2)
10010880:	e0bffe17 	ldw	r2,-8(fp)
10010884:	10800017 	ldw	r2,0(r2)
10010888:	1880151e 	bne	r3,r2,100108e0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001088c:	04040074 	movhi	r16,4097
10010890:	84096c04 	addi	r16,r16,9648
10010894:	e0bffd17 	ldw	r2,-12(fp)
10010898:	1009883a 	mov	r4,r2
1001089c:	01400304 	movi	r5,12
100108a0:	000c2b80 	call	1000c2b8 <__mulsi3>
100108a4:	8085883a 	add	r2,r16,r2
100108a8:	10800204 	addi	r2,r2,8
100108ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100108b0:	10000b0e 	bge	r2,zero,100108e0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100108b4:	e13ffd17 	ldw	r4,-12(fp)
100108b8:	01400304 	movi	r5,12
100108bc:	000c2b80 	call	1000c2b8 <__mulsi3>
100108c0:	1007883a 	mov	r3,r2
100108c4:	00840074 	movhi	r2,4097
100108c8:	10896c04 	addi	r2,r2,9648
100108cc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100108d0:	e0bffe17 	ldw	r2,-8(fp)
100108d4:	18800226 	beq	r3,r2,100108e0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100108d8:	00bffcc4 	movi	r2,-13
100108dc:	00000a06 	br	10010908 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100108e0:	e0bffd17 	ldw	r2,-12(fp)
100108e4:	10800044 	addi	r2,r2,1
100108e8:	e0bffd15 	stw	r2,-12(fp)
100108ec:	00840074 	movhi	r2,4097
100108f0:	108dee04 	addi	r2,r2,14264
100108f4:	10800017 	ldw	r2,0(r2)
100108f8:	1007883a 	mov	r3,r2
100108fc:	e0bffd17 	ldw	r2,-12(fp)
10010900:	18bfd72e 	bgeu	r3,r2,10010860 <__alt_data_end+0xf8010860>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010904:	0005883a 	mov	r2,zero
}
10010908:	e6ffff04 	addi	sp,fp,-4
1001090c:	dfc00217 	ldw	ra,8(sp)
10010910:	df000117 	ldw	fp,4(sp)
10010914:	dc000017 	ldw	r16,0(sp)
10010918:	dec00304 	addi	sp,sp,12
1001091c:	f800283a 	ret

10010920 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010920:	defff604 	addi	sp,sp,-40
10010924:	dfc00915 	stw	ra,36(sp)
10010928:	df000815 	stw	fp,32(sp)
1001092c:	df000804 	addi	fp,sp,32
10010930:	e13ffd15 	stw	r4,-12(fp)
10010934:	e17ffe15 	stw	r5,-8(fp)
10010938:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001093c:	00bfffc4 	movi	r2,-1
10010940:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010944:	00bffb44 	movi	r2,-19
10010948:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001094c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010950:	e13ffd17 	ldw	r4,-12(fp)
10010954:	01440074 	movhi	r5,4097
10010958:	294dec04 	addi	r5,r5,14256
1001095c:	0010c380 	call	10010c38 <alt_find_dev>
10010960:	e0bff815 	stw	r2,-32(fp)
10010964:	e0bff817 	ldw	r2,-32(fp)
10010968:	1000051e 	bne	r2,zero,10010980 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001096c:	e13ffd17 	ldw	r4,-12(fp)
10010970:	0010cc80 	call	10010cc8 <alt_find_file>
10010974:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010978:	00800044 	movi	r2,1
1001097c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010980:	e0bff817 	ldw	r2,-32(fp)
10010984:	10002b26 	beq	r2,zero,10010a34 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010988:	e13ff817 	ldw	r4,-32(fp)
1001098c:	0010ddc0 	call	10010ddc <alt_get_fd>
10010990:	e0bff915 	stw	r2,-28(fp)
10010994:	e0bff917 	ldw	r2,-28(fp)
10010998:	1000030e 	bge	r2,zero,100109a8 <open+0x88>
    {
      status = index;
1001099c:	e0bff917 	ldw	r2,-28(fp)
100109a0:	e0bffa15 	stw	r2,-24(fp)
100109a4:	00002506 	br	10010a3c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100109a8:	e13ff917 	ldw	r4,-28(fp)
100109ac:	01400304 	movi	r5,12
100109b0:	000c2b80 	call	1000c2b8 <__mulsi3>
100109b4:	1007883a 	mov	r3,r2
100109b8:	00840074 	movhi	r2,4097
100109bc:	10896c04 	addi	r2,r2,9648
100109c0:	1885883a 	add	r2,r3,r2
100109c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100109c8:	e0fffe17 	ldw	r3,-8(fp)
100109cc:	00900034 	movhi	r2,16384
100109d0:	10bfffc4 	addi	r2,r2,-1
100109d4:	1886703a 	and	r3,r3,r2
100109d8:	e0bffc17 	ldw	r2,-16(fp)
100109dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100109e0:	e0bffb17 	ldw	r2,-20(fp)
100109e4:	1000051e 	bne	r2,zero,100109fc <open+0xdc>
100109e8:	e13ffc17 	ldw	r4,-16(fp)
100109ec:	001082c0 	call	1001082c <alt_file_locked>
100109f0:	e0bffa15 	stw	r2,-24(fp)
100109f4:	e0bffa17 	ldw	r2,-24(fp)
100109f8:	10001016 	blt	r2,zero,10010a3c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100109fc:	e0bff817 	ldw	r2,-32(fp)
10010a00:	10800317 	ldw	r2,12(r2)
10010a04:	10000826 	beq	r2,zero,10010a28 <open+0x108>
10010a08:	e0bff817 	ldw	r2,-32(fp)
10010a0c:	10800317 	ldw	r2,12(r2)
10010a10:	e13ffc17 	ldw	r4,-16(fp)
10010a14:	e17ffd17 	ldw	r5,-12(fp)
10010a18:	e1bffe17 	ldw	r6,-8(fp)
10010a1c:	e1ffff17 	ldw	r7,-4(fp)
10010a20:	103ee83a 	callr	r2
10010a24:	00000106 	br	10010a2c <open+0x10c>
10010a28:	0005883a 	mov	r2,zero
10010a2c:	e0bffa15 	stw	r2,-24(fp)
10010a30:	00000206 	br	10010a3c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010a34:	00bffb44 	movi	r2,-19
10010a38:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010a3c:	e0bffa17 	ldw	r2,-24(fp)
10010a40:	1000080e 	bge	r2,zero,10010a64 <open+0x144>
  {
    alt_release_fd (index);  
10010a44:	e13ff917 	ldw	r4,-28(fp)
10010a48:	000f1b80 	call	1000f1b8 <alt_release_fd>
    ALT_ERRNO = -status;
10010a4c:	00107dc0 	call	100107dc <alt_get_errno>
10010a50:	e0fffa17 	ldw	r3,-24(fp)
10010a54:	00c7c83a 	sub	r3,zero,r3
10010a58:	10c00015 	stw	r3,0(r2)
    return -1;
10010a5c:	00bfffc4 	movi	r2,-1
10010a60:	00000106 	br	10010a68 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10010a64:	e0bff917 	ldw	r2,-28(fp)
}
10010a68:	e037883a 	mov	sp,fp
10010a6c:	dfc00117 	ldw	ra,4(sp)
10010a70:	df000017 	ldw	fp,0(sp)
10010a74:	dec00204 	addi	sp,sp,8
10010a78:	f800283a 	ret

10010a7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010a7c:	defffa04 	addi	sp,sp,-24
10010a80:	df000515 	stw	fp,20(sp)
10010a84:	df000504 	addi	fp,sp,20
10010a88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010a8c:	0005303a 	rdctl	r2,status
10010a90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010a94:	e0fffc17 	ldw	r3,-16(fp)
10010a98:	00bfff84 	movi	r2,-2
10010a9c:	1884703a 	and	r2,r3,r2
10010aa0:	1001703a 	wrctl	status,r2
  
  return context;
10010aa4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10010aa8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10010aac:	e0bfff17 	ldw	r2,-4(fp)
10010ab0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010ab4:	e0bffd17 	ldw	r2,-12(fp)
10010ab8:	10800017 	ldw	r2,0(r2)
10010abc:	e0fffd17 	ldw	r3,-12(fp)
10010ac0:	18c00117 	ldw	r3,4(r3)
10010ac4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10010ac8:	e0bffd17 	ldw	r2,-12(fp)
10010acc:	10800117 	ldw	r2,4(r2)
10010ad0:	e0fffd17 	ldw	r3,-12(fp)
10010ad4:	18c00017 	ldw	r3,0(r3)
10010ad8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10010adc:	e0bffd17 	ldw	r2,-12(fp)
10010ae0:	e0fffd17 	ldw	r3,-12(fp)
10010ae4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010ae8:	e0bffd17 	ldw	r2,-12(fp)
10010aec:	e0fffd17 	ldw	r3,-12(fp)
10010af0:	10c00015 	stw	r3,0(r2)
10010af4:	e0bffb17 	ldw	r2,-20(fp)
10010af8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010afc:	e0bffe17 	ldw	r2,-8(fp)
10010b00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010b04:	e037883a 	mov	sp,fp
10010b08:	df000017 	ldw	fp,0(sp)
10010b0c:	dec00104 	addi	sp,sp,4
10010b10:	f800283a 	ret

10010b14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010b14:	defffb04 	addi	sp,sp,-20
10010b18:	dfc00415 	stw	ra,16(sp)
10010b1c:	df000315 	stw	fp,12(sp)
10010b20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010b24:	d0a00e17 	ldw	r2,-32712(gp)
10010b28:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010b2c:	d0a6d817 	ldw	r2,-25760(gp)
10010b30:	10800044 	addi	r2,r2,1
10010b34:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010b38:	00002e06 	br	10010bf4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010b3c:	e0bffd17 	ldw	r2,-12(fp)
10010b40:	10800017 	ldw	r2,0(r2)
10010b44:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010b48:	e0bffd17 	ldw	r2,-12(fp)
10010b4c:	10800403 	ldbu	r2,16(r2)
10010b50:	10803fcc 	andi	r2,r2,255
10010b54:	10000426 	beq	r2,zero,10010b68 <alt_tick+0x54>
10010b58:	d0a6d817 	ldw	r2,-25760(gp)
10010b5c:	1000021e 	bne	r2,zero,10010b68 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10010b60:	e0bffd17 	ldw	r2,-12(fp)
10010b64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010b68:	e0bffd17 	ldw	r2,-12(fp)
10010b6c:	10800217 	ldw	r2,8(r2)
10010b70:	d0e6d817 	ldw	r3,-25760(gp)
10010b74:	18801d36 	bltu	r3,r2,10010bec <alt_tick+0xd8>
10010b78:	e0bffd17 	ldw	r2,-12(fp)
10010b7c:	10800403 	ldbu	r2,16(r2)
10010b80:	10803fcc 	andi	r2,r2,255
10010b84:	1000191e 	bne	r2,zero,10010bec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10010b88:	e0bffd17 	ldw	r2,-12(fp)
10010b8c:	10800317 	ldw	r2,12(r2)
10010b90:	e0fffd17 	ldw	r3,-12(fp)
10010b94:	18c00517 	ldw	r3,20(r3)
10010b98:	1809883a 	mov	r4,r3
10010b9c:	103ee83a 	callr	r2
10010ba0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10010ba4:	e0bfff17 	ldw	r2,-4(fp)
10010ba8:	1000031e 	bne	r2,zero,10010bb8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10010bac:	e13ffd17 	ldw	r4,-12(fp)
10010bb0:	0010a7c0 	call	10010a7c <alt_alarm_stop>
10010bb4:	00000d06 	br	10010bec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10010bb8:	e0bffd17 	ldw	r2,-12(fp)
10010bbc:	10c00217 	ldw	r3,8(r2)
10010bc0:	e0bfff17 	ldw	r2,-4(fp)
10010bc4:	1887883a 	add	r3,r3,r2
10010bc8:	e0bffd17 	ldw	r2,-12(fp)
10010bcc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10010bd0:	e0bffd17 	ldw	r2,-12(fp)
10010bd4:	10c00217 	ldw	r3,8(r2)
10010bd8:	d0a6d817 	ldw	r2,-25760(gp)
10010bdc:	1880032e 	bgeu	r3,r2,10010bec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10010be0:	e0bffd17 	ldw	r2,-12(fp)
10010be4:	00c00044 	movi	r3,1
10010be8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10010bec:	e0bffe17 	ldw	r2,-8(fp)
10010bf0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010bf4:	e0fffd17 	ldw	r3,-12(fp)
10010bf8:	d0a00e04 	addi	r2,gp,-32712
10010bfc:	18bfcf1e 	bne	r3,r2,10010b3c <__alt_data_end+0xf8010b3c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10010c00:	0001883a 	nop
}
10010c04:	e037883a 	mov	sp,fp
10010c08:	dfc00117 	ldw	ra,4(sp)
10010c0c:	df000017 	ldw	fp,0(sp)
10010c10:	dec00204 	addi	sp,sp,8
10010c14:	f800283a 	ret

10010c18 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10010c18:	deffff04 	addi	sp,sp,-4
10010c1c:	df000015 	stw	fp,0(sp)
10010c20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010c24:	000170fa 	wrctl	ienable,zero
}
10010c28:	e037883a 	mov	sp,fp
10010c2c:	df000017 	ldw	fp,0(sp)
10010c30:	dec00104 	addi	sp,sp,4
10010c34:	f800283a 	ret

10010c38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010c38:	defffa04 	addi	sp,sp,-24
10010c3c:	dfc00515 	stw	ra,20(sp)
10010c40:	df000415 	stw	fp,16(sp)
10010c44:	df000404 	addi	fp,sp,16
10010c48:	e13ffe15 	stw	r4,-8(fp)
10010c4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10010c50:	e0bfff17 	ldw	r2,-4(fp)
10010c54:	10800017 	ldw	r2,0(r2)
10010c58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10010c5c:	e13ffe17 	ldw	r4,-8(fp)
10010c60:	00022e40 	call	100022e4 <strlen>
10010c64:	10800044 	addi	r2,r2,1
10010c68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010c6c:	00000d06 	br	10010ca4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10010c70:	e0bffc17 	ldw	r2,-16(fp)
10010c74:	10c00217 	ldw	r3,8(r2)
10010c78:	e0bffd17 	ldw	r2,-12(fp)
10010c7c:	1809883a 	mov	r4,r3
10010c80:	e17ffe17 	ldw	r5,-8(fp)
10010c84:	100d883a 	mov	r6,r2
10010c88:	0010efc0 	call	10010efc <memcmp>
10010c8c:	1000021e 	bne	r2,zero,10010c98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10010c90:	e0bffc17 	ldw	r2,-16(fp)
10010c94:	00000706 	br	10010cb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010c98:	e0bffc17 	ldw	r2,-16(fp)
10010c9c:	10800017 	ldw	r2,0(r2)
10010ca0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010ca4:	e0fffc17 	ldw	r3,-16(fp)
10010ca8:	e0bfff17 	ldw	r2,-4(fp)
10010cac:	18bff01e 	bne	r3,r2,10010c70 <__alt_data_end+0xf8010c70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010cb0:	0005883a 	mov	r2,zero
}
10010cb4:	e037883a 	mov	sp,fp
10010cb8:	dfc00117 	ldw	ra,4(sp)
10010cbc:	df000017 	ldw	fp,0(sp)
10010cc0:	dec00204 	addi	sp,sp,8
10010cc4:	f800283a 	ret

10010cc8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10010cc8:	defffb04 	addi	sp,sp,-20
10010ccc:	dfc00415 	stw	ra,16(sp)
10010cd0:	df000315 	stw	fp,12(sp)
10010cd4:	df000304 	addi	fp,sp,12
10010cd8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10010cdc:	00840074 	movhi	r2,4097
10010ce0:	108dea04 	addi	r2,r2,14248
10010ce4:	10800017 	ldw	r2,0(r2)
10010ce8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010cec:	00003106 	br	10010db4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10010cf0:	e0bffd17 	ldw	r2,-12(fp)
10010cf4:	10800217 	ldw	r2,8(r2)
10010cf8:	1009883a 	mov	r4,r2
10010cfc:	00022e40 	call	100022e4 <strlen>
10010d00:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010d04:	e0bffd17 	ldw	r2,-12(fp)
10010d08:	10c00217 	ldw	r3,8(r2)
10010d0c:	e0bffe17 	ldw	r2,-8(fp)
10010d10:	10bfffc4 	addi	r2,r2,-1
10010d14:	1885883a 	add	r2,r3,r2
10010d18:	10800003 	ldbu	r2,0(r2)
10010d1c:	10803fcc 	andi	r2,r2,255
10010d20:	1080201c 	xori	r2,r2,128
10010d24:	10bfe004 	addi	r2,r2,-128
10010d28:	10800bd8 	cmpnei	r2,r2,47
10010d2c:	1000031e 	bne	r2,zero,10010d3c <alt_find_file+0x74>
    {
      len -= 1;
10010d30:	e0bffe17 	ldw	r2,-8(fp)
10010d34:	10bfffc4 	addi	r2,r2,-1
10010d38:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010d3c:	e0bffe17 	ldw	r2,-8(fp)
10010d40:	e0ffff17 	ldw	r3,-4(fp)
10010d44:	1885883a 	add	r2,r3,r2
10010d48:	10800003 	ldbu	r2,0(r2)
10010d4c:	10803fcc 	andi	r2,r2,255
10010d50:	1080201c 	xori	r2,r2,128
10010d54:	10bfe004 	addi	r2,r2,-128
10010d58:	10800be0 	cmpeqi	r2,r2,47
10010d5c:	1000081e 	bne	r2,zero,10010d80 <alt_find_file+0xb8>
10010d60:	e0bffe17 	ldw	r2,-8(fp)
10010d64:	e0ffff17 	ldw	r3,-4(fp)
10010d68:	1885883a 	add	r2,r3,r2
10010d6c:	10800003 	ldbu	r2,0(r2)
10010d70:	10803fcc 	andi	r2,r2,255
10010d74:	1080201c 	xori	r2,r2,128
10010d78:	10bfe004 	addi	r2,r2,-128
10010d7c:	10000a1e 	bne	r2,zero,10010da8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10010d80:	e0bffd17 	ldw	r2,-12(fp)
10010d84:	10c00217 	ldw	r3,8(r2)
10010d88:	e0bffe17 	ldw	r2,-8(fp)
10010d8c:	1809883a 	mov	r4,r3
10010d90:	e17fff17 	ldw	r5,-4(fp)
10010d94:	100d883a 	mov	r6,r2
10010d98:	0010efc0 	call	10010efc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010d9c:	1000021e 	bne	r2,zero,10010da8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10010da0:	e0bffd17 	ldw	r2,-12(fp)
10010da4:	00000806 	br	10010dc8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10010da8:	e0bffd17 	ldw	r2,-12(fp)
10010dac:	10800017 	ldw	r2,0(r2)
10010db0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010db4:	e0fffd17 	ldw	r3,-12(fp)
10010db8:	00840074 	movhi	r2,4097
10010dbc:	108dea04 	addi	r2,r2,14248
10010dc0:	18bfcb1e 	bne	r3,r2,10010cf0 <__alt_data_end+0xf8010cf0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010dc4:	0005883a 	mov	r2,zero
}
10010dc8:	e037883a 	mov	sp,fp
10010dcc:	dfc00117 	ldw	ra,4(sp)
10010dd0:	df000017 	ldw	fp,0(sp)
10010dd4:	dec00204 	addi	sp,sp,8
10010dd8:	f800283a 	ret

10010ddc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10010ddc:	defffa04 	addi	sp,sp,-24
10010de0:	dfc00515 	stw	ra,20(sp)
10010de4:	df000415 	stw	fp,16(sp)
10010de8:	dc000315 	stw	r16,12(sp)
10010dec:	df000404 	addi	fp,sp,16
10010df0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010df4:	00bffa04 	movi	r2,-24
10010df8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010dfc:	e03ffc15 	stw	zero,-16(fp)
10010e00:	00002106 	br	10010e88 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010e04:	04040074 	movhi	r16,4097
10010e08:	84096c04 	addi	r16,r16,9648
10010e0c:	e0bffc17 	ldw	r2,-16(fp)
10010e10:	1009883a 	mov	r4,r2
10010e14:	01400304 	movi	r5,12
10010e18:	000c2b80 	call	1000c2b8 <__mulsi3>
10010e1c:	8085883a 	add	r2,r16,r2
10010e20:	10800017 	ldw	r2,0(r2)
10010e24:	1000151e 	bne	r2,zero,10010e7c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010e28:	04040074 	movhi	r16,4097
10010e2c:	84096c04 	addi	r16,r16,9648
10010e30:	e0bffc17 	ldw	r2,-16(fp)
10010e34:	1009883a 	mov	r4,r2
10010e38:	01400304 	movi	r5,12
10010e3c:	000c2b80 	call	1000c2b8 <__mulsi3>
10010e40:	8085883a 	add	r2,r16,r2
10010e44:	e0fffe17 	ldw	r3,-8(fp)
10010e48:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010e4c:	00840074 	movhi	r2,4097
10010e50:	108dee04 	addi	r2,r2,14264
10010e54:	10c00017 	ldw	r3,0(r2)
10010e58:	e0bffc17 	ldw	r2,-16(fp)
10010e5c:	1880040e 	bge	r3,r2,10010e70 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10010e60:	00840074 	movhi	r2,4097
10010e64:	108dee04 	addi	r2,r2,14264
10010e68:	e0fffc17 	ldw	r3,-16(fp)
10010e6c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10010e70:	e0bffc17 	ldw	r2,-16(fp)
10010e74:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10010e78:	00000606 	br	10010e94 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010e7c:	e0bffc17 	ldw	r2,-16(fp)
10010e80:	10800044 	addi	r2,r2,1
10010e84:	e0bffc15 	stw	r2,-16(fp)
10010e88:	e0bffc17 	ldw	r2,-16(fp)
10010e8c:	10800810 	cmplti	r2,r2,32
10010e90:	103fdc1e 	bne	r2,zero,10010e04 <__alt_data_end+0xf8010e04>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010e94:	e0bffd17 	ldw	r2,-12(fp)
}
10010e98:	e6ffff04 	addi	sp,fp,-4
10010e9c:	dfc00217 	ldw	ra,8(sp)
10010ea0:	df000117 	ldw	fp,4(sp)
10010ea4:	dc000017 	ldw	r16,0(sp)
10010ea8:	dec00304 	addi	sp,sp,12
10010eac:	f800283a 	ret

10010eb0 <atexit>:
10010eb0:	200b883a 	mov	r5,r4
10010eb4:	000d883a 	mov	r6,zero
10010eb8:	0009883a 	mov	r4,zero
10010ebc:	000f883a 	mov	r7,zero
10010ec0:	0010f781 	jmpi	10010f78 <__register_exitproc>

10010ec4 <exit>:
10010ec4:	defffe04 	addi	sp,sp,-8
10010ec8:	000b883a 	mov	r5,zero
10010ecc:	dc000015 	stw	r16,0(sp)
10010ed0:	dfc00115 	stw	ra,4(sp)
10010ed4:	2021883a 	mov	r16,r4
10010ed8:	00110940 	call	10011094 <__call_exitprocs>
10010edc:	00840074 	movhi	r2,4097
10010ee0:	108de404 	addi	r2,r2,14224
10010ee4:	11000017 	ldw	r4,0(r2)
10010ee8:	20800f17 	ldw	r2,60(r4)
10010eec:	10000126 	beq	r2,zero,10010ef4 <exit+0x30>
10010ef0:	103ee83a 	callr	r2
10010ef4:	8009883a 	mov	r4,r16
10010ef8:	00112380 	call	10011238 <_exit>

10010efc <memcmp>:
10010efc:	01c000c4 	movi	r7,3
10010f00:	3980192e 	bgeu	r7,r6,10010f68 <memcmp+0x6c>
10010f04:	2144b03a 	or	r2,r4,r5
10010f08:	11c4703a 	and	r2,r2,r7
10010f0c:	10000f26 	beq	r2,zero,10010f4c <memcmp+0x50>
10010f10:	21c00003 	ldbu	r7,0(r4)
10010f14:	28800003 	ldbu	r2,0(r5)
10010f18:	3880151e 	bne	r7,r2,10010f70 <memcmp+0x74>
10010f1c:	30ffff84 	addi	r3,r6,-2
10010f20:	01bfffc4 	movi	r6,-1
10010f24:	00000406 	br	10010f38 <memcmp+0x3c>
10010f28:	21c00003 	ldbu	r7,0(r4)
10010f2c:	28800003 	ldbu	r2,0(r5)
10010f30:	18ffffc4 	addi	r3,r3,-1
10010f34:	38800e1e 	bne	r7,r2,10010f70 <memcmp+0x74>
10010f38:	21000044 	addi	r4,r4,1
10010f3c:	29400044 	addi	r5,r5,1
10010f40:	19bff91e 	bne	r3,r6,10010f28 <__alt_data_end+0xf8010f28>
10010f44:	0005883a 	mov	r2,zero
10010f48:	f800283a 	ret
10010f4c:	20c00017 	ldw	r3,0(r4)
10010f50:	28800017 	ldw	r2,0(r5)
10010f54:	1880041e 	bne	r3,r2,10010f68 <memcmp+0x6c>
10010f58:	31bfff04 	addi	r6,r6,-4
10010f5c:	21000104 	addi	r4,r4,4
10010f60:	29400104 	addi	r5,r5,4
10010f64:	39bff936 	bltu	r7,r6,10010f4c <__alt_data_end+0xf8010f4c>
10010f68:	303fe91e 	bne	r6,zero,10010f10 <__alt_data_end+0xf8010f10>
10010f6c:	003ff506 	br	10010f44 <__alt_data_end+0xf8010f44>
10010f70:	3885c83a 	sub	r2,r7,r2
10010f74:	f800283a 	ret

10010f78 <__register_exitproc>:
10010f78:	defffa04 	addi	sp,sp,-24
10010f7c:	00840074 	movhi	r2,4097
10010f80:	108de404 	addi	r2,r2,14224
10010f84:	dc000315 	stw	r16,12(sp)
10010f88:	14000017 	ldw	r16,0(r2)
10010f8c:	dc400415 	stw	r17,16(sp)
10010f90:	dfc00515 	stw	ra,20(sp)
10010f94:	80805217 	ldw	r2,328(r16)
10010f98:	2023883a 	mov	r17,r4
10010f9c:	10003a26 	beq	r2,zero,10011088 <__register_exitproc+0x110>
10010fa0:	10c00117 	ldw	r3,4(r2)
10010fa4:	020007c4 	movi	r8,31
10010fa8:	40c0190e 	bge	r8,r3,10011010 <__register_exitproc+0x98>
10010fac:	00800034 	movhi	r2,0
10010fb0:	10800004 	addi	r2,r2,0
10010fb4:	1000061e 	bne	r2,zero,10010fd0 <__register_exitproc+0x58>
10010fb8:	00bfffc4 	movi	r2,-1
10010fbc:	dfc00517 	ldw	ra,20(sp)
10010fc0:	dc400417 	ldw	r17,16(sp)
10010fc4:	dc000317 	ldw	r16,12(sp)
10010fc8:	dec00604 	addi	sp,sp,24
10010fcc:	f800283a 	ret
10010fd0:	01006404 	movi	r4,400
10010fd4:	d9400015 	stw	r5,0(sp)
10010fd8:	d9800115 	stw	r6,4(sp)
10010fdc:	d9c00215 	stw	r7,8(sp)
10010fe0:	00000000 	call	10000000 <__reset>
10010fe4:	d9400017 	ldw	r5,0(sp)
10010fe8:	d9800117 	ldw	r6,4(sp)
10010fec:	d9c00217 	ldw	r7,8(sp)
10010ff0:	103ff126 	beq	r2,zero,10010fb8 <__alt_data_end+0xf8010fb8>
10010ff4:	81005217 	ldw	r4,328(r16)
10010ff8:	10000115 	stw	zero,4(r2)
10010ffc:	0007883a 	mov	r3,zero
10011000:	11000015 	stw	r4,0(r2)
10011004:	80805215 	stw	r2,328(r16)
10011008:	10006215 	stw	zero,392(r2)
1001100c:	10006315 	stw	zero,396(r2)
10011010:	88000d1e 	bne	r17,zero,10011048 <__register_exitproc+0xd0>
10011014:	19000084 	addi	r4,r3,2
10011018:	2109883a 	add	r4,r4,r4
1001101c:	18c00044 	addi	r3,r3,1
10011020:	2109883a 	add	r4,r4,r4
10011024:	10c00115 	stw	r3,4(r2)
10011028:	1105883a 	add	r2,r2,r4
1001102c:	11400015 	stw	r5,0(r2)
10011030:	0005883a 	mov	r2,zero
10011034:	dfc00517 	ldw	ra,20(sp)
10011038:	dc400417 	ldw	r17,16(sp)
1001103c:	dc000317 	ldw	r16,12(sp)
10011040:	dec00604 	addi	sp,sp,24
10011044:	f800283a 	ret
10011048:	18c9883a 	add	r4,r3,r3
1001104c:	2109883a 	add	r4,r4,r4
10011050:	1109883a 	add	r4,r2,r4
10011054:	21802215 	stw	r6,136(r4)
10011058:	01800044 	movi	r6,1
1001105c:	12006217 	ldw	r8,392(r2)
10011060:	30cc983a 	sll	r6,r6,r3
10011064:	4190b03a 	or	r8,r8,r6
10011068:	12006215 	stw	r8,392(r2)
1001106c:	21c04215 	stw	r7,264(r4)
10011070:	01000084 	movi	r4,2
10011074:	893fe71e 	bne	r17,r4,10011014 <__alt_data_end+0xf8011014>
10011078:	11006317 	ldw	r4,396(r2)
1001107c:	218cb03a 	or	r6,r4,r6
10011080:	11806315 	stw	r6,396(r2)
10011084:	003fe306 	br	10011014 <__alt_data_end+0xf8011014>
10011088:	80805304 	addi	r2,r16,332
1001108c:	80805215 	stw	r2,328(r16)
10011090:	003fc306 	br	10010fa0 <__alt_data_end+0xf8010fa0>

10011094 <__call_exitprocs>:
10011094:	00840074 	movhi	r2,4097
10011098:	108de404 	addi	r2,r2,14224
1001109c:	10800017 	ldw	r2,0(r2)
100110a0:	defff304 	addi	sp,sp,-52
100110a4:	df000b15 	stw	fp,44(sp)
100110a8:	d8800015 	stw	r2,0(sp)
100110ac:	10805204 	addi	r2,r2,328
100110b0:	dd400815 	stw	r21,32(sp)
100110b4:	dfc00c15 	stw	ra,48(sp)
100110b8:	ddc00a15 	stw	r23,40(sp)
100110bc:	dd800915 	stw	r22,36(sp)
100110c0:	dd000715 	stw	r20,28(sp)
100110c4:	dcc00615 	stw	r19,24(sp)
100110c8:	dc800515 	stw	r18,20(sp)
100110cc:	dc400415 	stw	r17,16(sp)
100110d0:	dc000315 	stw	r16,12(sp)
100110d4:	d9000115 	stw	r4,4(sp)
100110d8:	2839883a 	mov	fp,r5
100110dc:	d8800215 	stw	r2,8(sp)
100110e0:	057fffc4 	movi	r21,-1
100110e4:	d8800017 	ldw	r2,0(sp)
100110e8:	14805217 	ldw	r18,328(r2)
100110ec:	90001826 	beq	r18,zero,10011150 <__call_exitprocs+0xbc>
100110f0:	ddc00217 	ldw	r23,8(sp)
100110f4:	90c00117 	ldw	r3,4(r18)
100110f8:	1c3fffc4 	addi	r16,r3,-1
100110fc:	80001116 	blt	r16,zero,10011144 <__call_exitprocs+0xb0>
10011100:	18c00044 	addi	r3,r3,1
10011104:	8427883a 	add	r19,r16,r16
10011108:	18c7883a 	add	r3,r3,r3
1001110c:	95802204 	addi	r22,r18,136
10011110:	9ce7883a 	add	r19,r19,r19
10011114:	18c7883a 	add	r3,r3,r3
10011118:	b4e7883a 	add	r19,r22,r19
1001111c:	90e3883a 	add	r17,r18,r3
10011120:	e0001726 	beq	fp,zero,10011180 <__call_exitprocs+0xec>
10011124:	8c87c83a 	sub	r3,r17,r18
10011128:	b0c7883a 	add	r3,r22,r3
1001112c:	18c01e17 	ldw	r3,120(r3)
10011130:	1f001326 	beq	r3,fp,10011180 <__call_exitprocs+0xec>
10011134:	843fffc4 	addi	r16,r16,-1
10011138:	9cffff04 	addi	r19,r19,-4
1001113c:	8c7fff04 	addi	r17,r17,-4
10011140:	857ff71e 	bne	r16,r21,10011120 <__alt_data_end+0xf8011120>
10011144:	00800034 	movhi	r2,0
10011148:	10800004 	addi	r2,r2,0
1001114c:	10002a1e 	bne	r2,zero,100111f8 <__call_exitprocs+0x164>
10011150:	dfc00c17 	ldw	ra,48(sp)
10011154:	df000b17 	ldw	fp,44(sp)
10011158:	ddc00a17 	ldw	r23,40(sp)
1001115c:	dd800917 	ldw	r22,36(sp)
10011160:	dd400817 	ldw	r21,32(sp)
10011164:	dd000717 	ldw	r20,28(sp)
10011168:	dcc00617 	ldw	r19,24(sp)
1001116c:	dc800517 	ldw	r18,20(sp)
10011170:	dc400417 	ldw	r17,16(sp)
10011174:	dc000317 	ldw	r16,12(sp)
10011178:	dec00d04 	addi	sp,sp,52
1001117c:	f800283a 	ret
10011180:	91000117 	ldw	r4,4(r18)
10011184:	88c00017 	ldw	r3,0(r17)
10011188:	213fffc4 	addi	r4,r4,-1
1001118c:	24001526 	beq	r4,r16,100111e4 <__call_exitprocs+0x150>
10011190:	88000015 	stw	zero,0(r17)
10011194:	183fe726 	beq	r3,zero,10011134 <__alt_data_end+0xf8011134>
10011198:	00800044 	movi	r2,1
1001119c:	1408983a 	sll	r4,r2,r16
100111a0:	91406217 	ldw	r5,392(r18)
100111a4:	95000117 	ldw	r20,4(r18)
100111a8:	214a703a 	and	r5,r4,r5
100111ac:	28000b26 	beq	r5,zero,100111dc <__call_exitprocs+0x148>
100111b0:	91406317 	ldw	r5,396(r18)
100111b4:	2148703a 	and	r4,r4,r5
100111b8:	20000c1e 	bne	r4,zero,100111ec <__call_exitprocs+0x158>
100111bc:	99400017 	ldw	r5,0(r19)
100111c0:	d9000117 	ldw	r4,4(sp)
100111c4:	183ee83a 	callr	r3
100111c8:	90c00117 	ldw	r3,4(r18)
100111cc:	1d3fc51e 	bne	r3,r20,100110e4 <__alt_data_end+0xf80110e4>
100111d0:	b8c00017 	ldw	r3,0(r23)
100111d4:	1cbfd726 	beq	r3,r18,10011134 <__alt_data_end+0xf8011134>
100111d8:	003fc206 	br	100110e4 <__alt_data_end+0xf80110e4>
100111dc:	183ee83a 	callr	r3
100111e0:	003ff906 	br	100111c8 <__alt_data_end+0xf80111c8>
100111e4:	94000115 	stw	r16,4(r18)
100111e8:	003fea06 	br	10011194 <__alt_data_end+0xf8011194>
100111ec:	99000017 	ldw	r4,0(r19)
100111f0:	183ee83a 	callr	r3
100111f4:	003ff406 	br	100111c8 <__alt_data_end+0xf80111c8>
100111f8:	90c00117 	ldw	r3,4(r18)
100111fc:	1800081e 	bne	r3,zero,10011220 <__call_exitprocs+0x18c>
10011200:	90c00017 	ldw	r3,0(r18)
10011204:	18000a26 	beq	r3,zero,10011230 <__call_exitprocs+0x19c>
10011208:	9009883a 	mov	r4,r18
1001120c:	b8c00015 	stw	r3,0(r23)
10011210:	00000000 	call	10000000 <__reset>
10011214:	bc800017 	ldw	r18,0(r23)
10011218:	903fb61e 	bne	r18,zero,100110f4 <__alt_data_end+0xf80110f4>
1001121c:	003fcc06 	br	10011150 <__alt_data_end+0xf8011150>
10011220:	90c00017 	ldw	r3,0(r18)
10011224:	902f883a 	mov	r23,r18
10011228:	1825883a 	mov	r18,r3
1001122c:	003ffa06 	br	10011218 <__alt_data_end+0xf8011218>
10011230:	0007883a 	mov	r3,zero
10011234:	003ffb06 	br	10011224 <__alt_data_end+0xf8011224>

10011238 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011238:	defffd04 	addi	sp,sp,-12
1001123c:	df000215 	stw	fp,8(sp)
10011240:	df000204 	addi	fp,sp,8
10011244:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011248:	0001883a 	nop
1001124c:	e0bfff17 	ldw	r2,-4(fp)
10011250:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011254:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011258:	10000226 	beq	r2,zero,10011264 <_exit+0x2c>
    ALT_SIM_FAIL();
1001125c:	002af070 	cmpltui	zero,zero,43969
10011260:	00000106 	br	10011268 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011264:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011268:	003fff06 	br	10011268 <__alt_data_end+0xf8011268>
